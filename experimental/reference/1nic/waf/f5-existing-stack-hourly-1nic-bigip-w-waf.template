{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Template Version 1.0.0: AWS CloudFormation Template for creating a 1NIC BIG-IP in an existing VPC **WARNING** This template creates Amazon EC2 Instances. You will be billed for the AWS resources used if you create a stack from this template.",
    "Mappings": {
        "BigipRegionMap": {
            "ap-northeast-1": {
                "Best1000Mbps": "ami-acf82acd",
                "Best200Mbps": "ami-6bfc2e0a",
                "Best25Mbps": "ami-a6f92bc7",
                "Better1000Mbps": "ami-aff82ace",
                "Better200Mbps": "ami-69f92b08",
                "Better25Mbps": "ami-1afd2f7b",
                "Good1000Mbps": "ami-3ef82a5f",
                "Good200Mbps": "ami-62fc2e03",
                "Good25Mbps": "ami-3af82a5b"
            },
            "ap-southeast-1": {
                "Best1000Mbps": "ami-ab78ddc8",
                "Best200Mbps": "ami-d37edbb0",
                "Best25Mbps": "ami-4e79dc2d",
                "Better1000Mbps": "ami-d47fdab7",
                "Better200Mbps": "ami-7f78dd1c",
                "Better25Mbps": "ami-4278dd21",
                "Good1000Mbps": "ami-d87cd9bb",
                "Good200Mbps": "ami-da7cd9b9",
                "Good25Mbps": "ami-d47cd9b7"
            },
            "ap-southeast-2": {
                "Best1000Mbps": "ami-c2e8d8a1",
                "Best200Mbps": "ami-c4e8d8a7",
                "Best25Mbps": "ami-bdecdcde",
                "Better1000Mbps": "ami-6febdb0c",
                "Better200Mbps": "ami-b1ebdbd2",
                "Better25Mbps": "ami-42e8d821",
                "Good1000Mbps": "ami-bcebdbdf",
                "Good200Mbps": "ami-dbebdbb8",
                "Good25Mbps": "ami-58e9d93b"
            },
            "eu-central-1": {
                "Best1000Mbps": "ami-2157aa4e",
                "Best200Mbps": "ami-8055a8ef",
                "Best25Mbps": "ami-2c56ab43",
                "Better1000Mbps": "ami-2f57aa40",
                "Better200Mbps": "ami-2854a947",
                "Better25Mbps": "ami-2657aa49",
                "Good1000Mbps": "ami-e357aa8c",
                "Good200Mbps": "ami-2557aa4a",
                "Good25Mbps": "ami-cb55a8a4"
            },
            "eu-west-1": {
                "Best1000Mbps": "ami-8af48ef9",
                "Best200Mbps": "ami-fbeb9188",
                "Best25Mbps": "ami-cbf58fb8",
                "Better1000Mbps": "ami-c8f58fbb",
                "Better200Mbps": "ami-51f18b22",
                "Better25Mbps": "ami-7bf38908",
                "Good1000Mbps": "ami-b5f68cc6",
                "Good200Mbps": "ami-65f58f16",
                "Good25Mbps": "ami-91f18be2"
            },
            "sa-east-1": {
                "Best1000Mbps": "ami-7142d11d",
                "Best200Mbps": "ami-8b5fcce7",
                "Best25Mbps": "ami-8a5ecde6",
                "Better1000Mbps": "ami-955fccf9",
                "Better200Mbps": "ami-c142d1ad",
                "Better25Mbps": "ami-c342d1af",
                "Good1000Mbps": "ami-335dce5f",
                "Good200Mbps": "ami-1359ca7f",
                "Good25Mbps": "ami-1f59ca73"
            },
            "us-east-1": {
                "Best1000Mbps": "ami-1d057e0a",
                "Best200Mbps": "ami-0b7a011c",
                "Best25Mbps": "ami-ce047fd9",
                "Better1000Mbps": "ami-83047f94",
                "Better200Mbps": "ami-84017a93",
                "Better25Mbps": "ami-8f007b98",
                "Good1000Mbps": "ami-98017a8f",
                "Good200Mbps": "ami-a2017ab5",
                "Good25Mbps": "ami-130c7704"
            },
            "us-west-1": {
                "Best1000Mbps": "ami-812668e1",
                "Best200Mbps": "ami-05246a65",
                "Best25Mbps": "ami-f0256b90",
                "Better1000Mbps": "ami-822668e2",
                "Better200Mbps": "ami-44226c24",
                "Better25Mbps": "ami-8b256beb",
                "Good1000Mbps": "ami-49256b29",
                "Good200Mbps": "ami-a72769c7",
                "Good25Mbps": "ami-e5246a85"
            },
            "us-west-2": {
                "Best1000Mbps": "ami-012ef261",
                "Best200Mbps": "ami-8633efe6",
                "Best25Mbps": "ami-792ff319",
                "Better1000Mbps": "ami-5b29f53b",
                "Better200Mbps": "ami-a031edc0",
                "Better25Mbps": "ami-a731edc7",
                "Good1000Mbps": "ami-6a2df10a",
                "Good200Mbps": "ami-532ff333",
                "Good25Mbps": "ami-dc2ef2bc"
            }
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "NETWORKING CONFIGURATION"
                    },
                    "Parameters": [
                        "Vpc",
                        "managementSubnetAz1",
                        "managementSubnetAz2",
                        "subnet1Az2",
                        "bigipManagementSecurityGroup",
                        "subnet1Az1",
                        "bigipExternalSecurityGroup",
                        "availabilityZone1",
                        "availabilityZone2"
                    ]
                },
                {
                    "Label": {
                        "default": "INSTANCE CONFIGURATION"
                    },
                    "Parameters": [
                        "adminUsername",
                        "adminPassword",
                        "imageName",
                        "instanceType",
                        "applicationInstanceType",
                        "licenseKey1",
                        "licenseKey2",
                        "managementGuiPort",
                        "sshKey",
                        "restrictedSrcAddress",
                        "iamAccessKey",
                        "iamSecretKey"
                    ]
                },
                {
                    "Label": {
                        "default": "TAGS"
                    },
                    "Parameters": [
                        "application",
                        "environment",
                        "group",
                        "owner",
                        "costcenter"
                    ]
                }
            ],
            "ParameterLabels": {
                "Vpc": {
                    "default": "VPC"
                },
                "adminPassword": {
                    "default": "Admin Password"
                },
                "adminUsername": {
                    "default": "Admin Username"
                },
                "application": {
                    "default": "Application"
                },
                "applicationInstanceType": {
                    "default": "Application Instance Type"
                },
                "availabilityZone1": {
                    "default": "Availability Zone 1"
                },
                "availabilityZone2": {
                    "default": "Availability Zone 2"
                },
                "bigipExternalSecurityGroup": {
                    "default": "External Security Group"
                },
                "bigipManagementSecurityGroup": {
                    "default": "Management Security Group"
                },
                "costcenter": {
                    "default": "Cost Center"
                },
                "environment": {
                    "default": "Environment"
                },
                "group": {
                    "default": "Group"
                },
                "iamAccessKey": {
                    "default": "IAM Access Key"
                },
                "iamSecretKey": {
                    "default": "IAM Secret Key"
                },
                "imageName": {
                    "default": "Image Name"
                },
                "instanceType": {
                    "default": "AWS Instance Size"
                },
                "licenseKey1": {
                    "default": "License Key1"
                },
                "managementGuiPort": {
                    "default": "Management Port"
                },
                "managementSubnetAz1": {
                    "default": "Management Subnet AZ1"
                },
                "managementSubnetAz2": {
                    "default": "Management Subnet AZ2"
                },
                "owner": {
                    "default": "Owner"
                },
                "restrictedSrcAddress": {
                    "default": "Source Address(es) for SSH Access"
                },
                "sshKey": {
                    "default": "SSH Key"
                },
                "subnet1Az1": {
                    "default": "Subnet AZ1"
                },
                "subnet1Az2": {
                    "default": "Subnet AZ2"
                }
            }
        },
        "Version": "1.0.0"
    },
    "Outputs": {
        "Bigip1ExternalInterfacePrivateIp": {
            "Description": "Internally routable IP of the public interface on BIG-IP",
            "Value": {
                "Fn::GetAtt": [
                    "Bigip1subnet1Az1Interface",
                    "PrimaryPrivateIpAddress"
                ]
            }
        },
        "Bigip1InstanceId": {
            "Description": "Instance Id of BIG-IP in Amazon",
            "Value": {
                "Ref": "Bigip1Instance"
            }
        },
        "Bigip1Url": {
            "Description": "BIG-IP Management GUI",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://",
                        {
                            "Fn::GetAtt": [
                                "Bigip1Instance",
                                "PublicIp"
                            ]
                        },
                        ":",
                        {
                            "Ref": "managementGuiPort"
                        }
                    ]
                ]
            }
        },
        "Bigip1VipEipAddress": {
            "Description": "EIP address for VIP",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "http://",
                        {
                            "Fn::GetAtt": [
                                "Bigip1Instance",
                                "PublicIp"
                            ]
                        },
                        ":80"
                    ]
                ]
            }
        },
        "Bigip1subnet1Az1Interface": {
            "Description": "External interface Id on BIG-IP",
            "Value": {
                "Ref": "Bigip1subnet1Az1Interface"
            }
        },
        "Bigip1subnet1Az1SelfEipAddress": {
            "Description": "IP Address of the External interface attached to BIG-IP",
            "Value": {
                "Ref": "Bigip1subnet1Az1SelfEipAddress"
            }
        },
        "availabilityZone1": {
            "Description": "Availability Zone",
            "Value": {
                "Fn::GetAtt": [
                    "Bigip1Instance",
                    "AvailabilityZone"
                ]
            }
        }
    },
    "Parameters": {
        "Vpc": {
            "ConstraintDescription": "This must be an existing VPC within the working region.",
            "Type": "AWS::EC2::VPC::Id"
        },
        "adminPassword": {
            "ConstraintDescription": "Verify your BIG-IP VE Admin Password",
            "Description": "BIG-IP VE Admin Password",
            "MaxLength": "255",
            "MinLength": "1",
            "NoEcho": true,
            "Type": "String"
        },
        "adminUsername": {
            "ConstraintDescription": "Verify your BIG-IP VE Admin Username",
            "Default": "admin",
            "Description": "BIG-IP VE Admin Username",
            "MaxLength": "255",
            "MinLength": "1",
            "Type": "String"
        },
        "application": {
            "Default": "f5app",
            "Description": "Name of the Application Tag",
            "Type": "String"
        },
        "bigipExternalSecurityGroup": {
            "ConstraintDescription": "The security group ID must be within an existing VPC",
            "Description": "Public or External Security Group",
            "Type": "AWS::EC2::SecurityGroup::Id"
        },
        "costcenter": {
            "Default": "f5costcenter",
            "Description": "Name of the Cost Center Tag",
            "Type": "String"
        },
        "environment": {
            "Default": "f5env",
            "Description": "Name of the Environment Tag",
            "Type": "String"
        },
        "group": {
            "Default": "f5group",
            "Description": "Name of the Group Tag",
            "Type": "String"
        },
        "imageName": {
            "AllowedValues": [
                "Best25Mbps",
                "Best200Mbps",
                "Best1000Mbps"
            ],
            "ConstraintDescription": "Must be a valid F5 BIG-IP VE image type",
            "Default": "Best1000Mbps",
            "Description": "F5 BIG-IP Performance Type",
            "Type": "String"
        },
        "instanceType": {
            "AllowedValues": [
                "m3.2xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "cc2.8xlarge"
            ],
            "ConstraintDescription": "Must be a valid EC2 instance type for BIG-IP",
            "Default": "m3.2xlarge",
            "Description": "AWS instance type",
            "Type": "String"
        },
        "managementGuiPort": {
            "ConstraintDescription": "Must be a valid, unused port on the BIG-IP.",
            "Default": "8443",
            "Description": "Port for the BIG-IP management Configuration utility",
            "Type": "Number"
        },
        "owner": {
            "Default": "f5owner",
            "Description": "Name of the Owner Tag",
            "Type": "String"
        },
        "restrictedSrcAddress": {
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x.",
            "Default": "0.0.0.0/0",
            "Description": " The IP address range that can be used to SSH to the EC2 instances",
            "MaxLength": "18",
            "MinLength": "9",
            "Type": "String"
        },
        "sshKey": {
            "Description": "Key pair for accessing the instance",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "subnet1Az1": {
            "ConstraintDescription": "The subnet ID must be within an existing VPC",
            "Description": "Public or External subnet",
            "Type": "AWS::EC2::Subnet::Id"
        }
    },
    "Resources": {
        "Bigip1Instance": {
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "commands": {
                            "001-disable-1nicautoconfig": {
                                "command": "/usr/bin/setdb provision.1nicautoconfig disable"
                            },
                            "002-install-libs": {
                                "command": {
                                    "Fn::Join": [
                                        " ",
                                        [
                                            "nohup /config/installCloudLibs.sh",
                                            "> /var/log/cloudlibs-install.log 2> /var/log/cloudlibs-install.log < /dev/null &"
                                        ]
                                    ]
                                }
                            },
                            "003-1nic-setup": {
                                "command": {
                                    "Fn::Join": [
                                        " ",
                                        [
                                            "nohup /config/waitThenRun.sh",
                                            "f5-rest-node /config/cloud/aws/f5-cloud-libs/scripts/runScript.js",
                                            "--file /config/cloud/aws/f5-cloud-libs/scripts/aws/1nicSetup.sh",
                                            "--cwd /config/cloud/aws/f5-cloud-libs/scripts/aws",
                                            "--log-level debug",
                                            "-o /var/log/1nicSetup.log",
                                            "--signal 1_NIC_SETUP_DONE",
                                            "> /var/log/cloudlibs-install.log 2> /var/log/cloudlibs-install.log < /dev/null &"
                                        ]
                                    ]
                                }
                            },
                            "004-create-admin-user": {
                                "command": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "nohup /config/waitThenRun.sh",
                                            " f5-rest-node /config/cloud/aws/f5-cloud-libs/scripts/runScript.js",
                                            " --wait-for 1_NIC_SETUP_DONE",
                                            " --signal ADMIN_CREATED",
                                            " --file /config/cloud/aws/createUser.sh",
                                            " --cl-args ",
                                            {
                                                "Ref": "adminUsername"
                                            },
                                            " --log-level debug",
                                            " -o /var/log/createUser.log",
                                            " > /var/log/cloudlibs-install.log 2> /var/log/cloudlibs-install.log < /dev/null &"
                                        ]
                                    ]
                                }
                            },
                            "005-onboard-BIG-IP": {
                                "command": {
                                    "Fn::Join": [
                                        " ",
                                        [
                                            "NAME_SERVER=`/config/getNameServer.sh eth0`;",
                                            "nohup /config/waitThenRun.sh",
                                            "f5-rest-node /config/cloud/aws/f5-cloud-libs/scripts/onboard.js",
                                            "--ssl-port ",
                                            {
                                                "Ref": "managementGuiPort"
                                            },
                                            "--wait-for ADMIN_CREATED",
                                            "-o /var/log/onboard.log",
                                            "--log-level debug",
                                            "--no-reboot",
                                            "--host localhost",
                                            "--user ",
                                            {
                                                "Ref": "adminUsername"
                                            },
                                            "--password-url file:///config/cloud/aws/.adminPassword",
                                            "--hostname `curl http://169.254.169.254/latest/meta-data/hostname`",
                                            "--ntp 0.us.pool.ntp.org",
                                            "--ntp 1.us.pool.ntp.org",
                                            "--tz UTC",
                                            "--dns ${NAME_SERVER}",
                                            "--module ltm:nominal",
                                            "--module asm:nominal",
                                            "--ping",
                                            "> /var/log/cloudlibs-install.log 2> /var/log/cloudlibs-install.log < /dev/null &"
                                        ]
                                    ]
                                }
                            },
                            "006-custom-config": {
                                "command": {
                                    "Fn::Join": [
                                        " ",
                                        [
                                            "nohup /config/waitThenRun.sh",
                                            "f5-rest-node /config/cloud/aws/f5-cloud-libs/scripts/runScript.js",
                                            "--file /config/cloud/aws/custom-config.sh",
                                            "--cwd /config/cloud/aws",
                                            "-o /var/log/custom-config.log",
                                            "--log-level debug",
                                            "--wait-for ONBOARD_DONE",
                                            "> /var/log/cloudlibs-install.log 2> /var/log/cloudlibs-install.log < /dev/null &"
                                        ]
                                    ]
                                }
                            }
                        },
                        "files": {
                            "/config/cloud/aws/.adminPassword": {
                                "content": {
                                    "Ref": "adminPassword"
                                },
                                "group": "root",
                                "mode": "000755",
                                "owner": "root"
                            },
                            "/config/cloud/aws/createUser.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "\n",
                                        [
                                            "#!/bin/bash",
                                            "PASSWORD=$(/bin/sed -e $'s:[\\'\"{};/|#\\x20\\\\\\\\]:\\\\\\\\&:g' < /config/cloud/aws/.adminPassword)",
                                            "if [ \"$1\" = admin ]; then",
                                            "    tmsh modify auth user \"$1\" password ${PASSWORD}",
                                            "else",
                                            "    tmsh create auth user \"$1\" password ${PASSWORD} shell bash partition-access replace-all-with { all-partitions { role admin } }",
                                            "fi"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000755",
                                "owner": "root"
                            },
                            "/config/cloud/aws/custom-config.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "#!/bin/bash\n",
                                            "date\n",
                                            "echo 'starting tmsh config'\n",
                                            "tmsh modify net self-allow defaults add { tcp:6123 tcp:6124 tcp:6125 tcp:6126 tcp:6127 tcp:6128 }\n",
                                            "curl -o /home/admin/asm-policy-linux-high.xml http://cdn.f5.com/product/templates/utils/asm-policy-linux-high.xml \n",
                                            "tmsh load asm policy file /home/admin/asm-policy-linux-high.xml\n",
                                            "# modify asm policy names below (ex. /Common/linux-high) to match name in xml\n",
                                            "tmsh modify asm policy /Common/linux-high active\n",
                                            "tmsh create ltm policy app-ltm-policy strategy first-match legacy\n",
                                            "tmsh modify ltm policy app-ltm-policy controls add { asm }\n",
                                            "tmsh modify ltm policy app-ltm-policy rules add { associate-asm-policy { actions replace-all-with { 0 { asm request enable policy /Common/linux-high } } } }\n",
                                            "rm /config/cloud/aws/.adminPassword\n",
                                            "tmsh save /sys config\n",
                                            "date\n",
                                            "### START CUSTOM TMSH CONFIGURTION\n",
                                            "### END CUSTOM TMSH CONFIGURATION"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000755",
                                "owner": "root"
                            },
                            "/config/cloud/f5-cloud-libs.tar.gz": {
                                "group": "root",
                                "mode": "000755",
                                "owner": "root",
                                "source": "https://raw.githubusercontent.com/F5Networks/f5-cloud-libs/v2.0.1/dist/f5-cloud-libs.tar.gz"
                            },
                            "/config/getNameServer.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "\n",
                                        [
                                            "INTERFACE=$1",
                                            "INTERFACE_MAC=`ifconfig ${INTERFACE} | egrep HWaddr | awk '{print tolower($5)}'`",
                                            "INTERFACE_MAC=`ifconfig ${INTERFACE} | egrep HWaddr | awk '{print tolower($5)}'`",
                                            "VPC_CIDR_BLOCK=`curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/${INTERFACE_MAC}/vpc-ipv4-cidr-block`",
                                            "VPC_NET=${VPC_CIDR_BLOCK%/*}",
                                            "NAME_SERVER=`echo ${VPC_NET} | awk -F. '{ printf \"%d.%d.%d.%d\", $1, $2, $3, $4+2 }'`",
                                            "echo $NAME_SERVER"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000755",
                                "owner": "root"
                            },
                            "/config/installCloudLibs.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "\n",
                                        [
                                            "#!/bin/bash",
                                            "echo about to execute",
                                            "checks=0",
                                            "while [ $checks -lt 120 ]; do echo checking mcpd",
                                            "    tmsh -a show sys mcp-state field-fmt | grep -q running",
                                            "    if [ $? == 0 ]; then",
                                            "        echo mcpd ready",
                                            "        break",
                                            "    fi",
                                            "    echo mcpd not ready yet",
                                            "    let checks=checks+1",
                                            "    sleep 10",
                                            "done",
                                            "echo loading sigcheck script",
                                            "tmsh load sys config merge file /config/sigcheck",
                                            "if [ $? != 0 ]; then",
                                            "    echo cannot validate signature of /config/sigcheck",
                                            "    exit",
                                            "fi",
                                            "echo loaded sigcheck",
                                            "echo verifying f5-cloud-libs.targ.gz",
                                            "tmsh run cli script verifyHash /config/cloud/f5-cloud-libs.tar.gz",
                                            "if [ $? != 0 ]; then",
                                            "    echo f5-cloud-libs.tar.gz does not match signature f5-coud-libs.tar.gz.f5sig",
                                            "    exit",
                                            "fi",
                                            "echo verified f5-cloud-libs.tar.gz",
                                            "echo expanding f5-cloud-libs.tar.gz",
                                            "tar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/aws",
                                            "cd /config/cloud/aws/f5-cloud-libs",
                                            "touch /config/cloud/cloudLibsReady"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000755",
                                "owner": "root"
                            },
                            "/config/sigcheck": {
                                "content": {
                                    "Fn::Join": [
                                        "\n",
                                        [
                                            "cli script /Common/verifyHash {",
                                            "    proc script::run {} {",
                                            "        if {[catch {",
                                            "            set file_path [lindex $tmsh::argv 1]",
                                            "            set expected_hash f5c4206c0b093fb2f3a6e16409610ec0300b509dee9157b2c4801f99e41d08b1b1d2b6a3c75c6a509daee77c3103403aa4c8ae47c4b232a6ec76b4663017b11c",
                                            "            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]",
                                            "            if { $expected_hash eq $computed_hash } {",
                                            "                exit 0",
                                            "            }",
                                            "            tmsh::log err {Hash does not match}",
                                            "            exit 1",
                                            "        }]} {",
                                            "            tmsh::log err {Unexpected error in verifyHash}",
                                            "            exit 1",
                                            "        }",
                                            "    }",
                                            "    script-signature o4v4/Y2mV0cXV/eZefkq6wXlE5GCACYd6+HuN4ScfL/meD0Grw1aJxZGp9MAvv4Ik3IPIwS2n8WgvfG/cDKcwQHVMGFJN4kmN4tzhr9Zdf3879hKqJaqbLLkifDsYk8bX3ontvrqT7r7XKboBv2qygPaUrVZPtkxzbcAJ26ewIj9m+Rui2yp+uYskZAL0bAPi/g5KDTZvEz0rCtSSxOeVljk5lr6vA79HPCHfglCKucH1QnbcrGhpARcs+wiwCYC18yiKsOBl+BVRTQwXuQYs8RsNhCJ8bHQeM8dOHUZj5/1Exh0V6QOcqG8/6pMuSmXfduNKzmQQPyN+bO4ETQ03Q==",
                                            "}"
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000755",
                                "owner": "root"
                            },
                            "/config/waitThenRun.sh": {
                                "content": {
                                    "Fn::Join": [
                                        "\n",
                                        [
                                            "#!/bin/bash",
                                            "while true; do echo \"waiting for cloud libs install to complete\"",
                                            "    if [ -f /config/cloud/cloudLibsReady ]; then",
                                            "        break",
                                            "    else",
                                            "        sleep 10",
                                            "    fi",
                                            "done",
                                            "\"$@\""
                                        ]
                                    ]
                                },
                                "group": "root",
                                "mode": "000755",
                                "owner": "root"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "BigipRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        {
                            "Ref": "imageName"
                        }
                    ]
                },
                "InstanceType": {
                    "Ref": "instanceType"
                },
                "KeyName": {
                    "Ref": "sshKey"
                },
                "NetworkInterfaces": [
                    {
                        "Description": "Public or External Interface",
                        "DeviceIndex": "0",
                        "NetworkInterfaceId": {
                            "Ref": "Bigip1subnet1Az1Interface"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "application"
                        }
                    },
                    {
                        "Key": "Costcenter",
                        "Value": {
                            "Ref": "costcenter"
                        }
                    },
                    {
                        "Key": "Environment",
                        "Value": {
                            "Ref": "environment"
                        }
                    },
                    {
                        "Key": "Group",
                        "Value": {
                            "Ref": "group"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    "Big-IP: ",
                                    {
                                        "Ref": "AWS::StackName"
                                    }
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Owner",
                        "Value": {
                            "Ref": "owner"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "/opt/aws/apitools/cfn-init-1.4-0.amzn1/bin/cfn-init -v -s ",
                                {
                                    "Ref": "AWS::StackId"
                                },
                                " -r ",
                                "Bigip1Instance",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n"
                            ]
                        ]
                    }
                }
            },
            "Type": "AWS::EC2::Instance"
        },
        "Bigip1subnet1Az1Interface": {
            "Properties": {
                "Description": "Public External Interface for the BIG-IP",
                "GroupSet": [
                    {
                        "Ref": "bigipExternalSecurityGroup"
                    }
                ],
                "SecondaryPrivateIpAddressCount": "1",
                "SubnetId": {
                    "Ref": "subnet1Az1"
                }
            },
            "Type": "AWS::EC2::NetworkInterface"
        },
        "Bigip1subnet1Az1SelfEipAddress": {
            "Properties": {
                "Domain": "vpc"
            },
            "Type": "AWS::EC2::EIP"
        },
        "Bigip1subnet1Az1SelfEipAssociation": {
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "Bigip1subnet1Az1SelfEipAddress",
                        "AllocationId"
                    ]
                },
                "NetworkInterfaceId": {
                    "Ref": "Bigip1subnet1Az1Interface"
                },
                "PrivateIpAddress": {
                    "Fn::GetAtt": [
                        "Bigip1subnet1Az1Interface",
                        "PrimaryPrivateIpAddress"
                    ]
                }
            },
            "Type": "AWS::EC2::EIPAssociation"
        }
    }
}
