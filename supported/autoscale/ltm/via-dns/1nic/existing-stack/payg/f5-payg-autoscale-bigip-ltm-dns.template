{
 "AWSTemplateFormatVersion": "2010-09-09",
 "Conditions": {
  "noCustomImageId": {
   "Fn::Equals": [
    "OPTIONAL",
    {
     "Ref": "customImageId"
    }
   ]
  },
  "optin": {
   "Fn::Equals": [
    "Yes",
    {
     "Ref": "allowUsageAnalytics"
    }
   ]
  },
  "usePublicIP": {
   "Fn::Equals": [
    "Yes",
    {
     "Ref": "provisionPublicIP"
    }
   ]
  }
 },
 "Description": "Template v5.16.0: Deploys an AWS Auto Scaling group of F5 LTM PAYG instances. Example scaling policies and CloudWatch alarms are associated with the Auto Scaling group.",
 "Mappings": {
  "AWSBigipThrougput": {
   "1000Mbps": {
    "Best": "Best1000Mbps",
    "Better": "Better1000Mbps",
    "Good": "Good1000Mbps",
    "PerAppVeLtm": "PerAppVeLtm1000Mbps"
   },
   "200Mbps": {
    "Best": "Best200Mbps",
    "Better": "Better200Mbps",
    "Good": "Good200Mbps",
    "PerAppVeLtm": "PerAppVeLtm200Mbps"
   },
   "25Mbps": {
    "Best": "Best25Mbps",
    "Better": "Better25Mbps",
    "Good": "Good25Mbps",
    "PerAppVeLtm": "PerAppVeLtm25Mbps"
   },
   "5000Mbps": {
    "Best": "Best5000Mbps",
    "Better": "Better5000Mbps",
    "Good": "Good5000Mbps",
    "PerAppVeLtm": "PerAppVeLtm5000Mbps"
   }
  },
  "BigipRegionMap": {
   "af-south-1": {
    "AdvancedWaf200Mbps": "ami-0780a2f4f0dcc370c",
    "AdvancedWaf25Mbps": "ami-016627175d4256a6a",
    "AdvancedWaf3000Mbps": "ami-06dff7310df9e2a34",
    "Best10000Mbps": "ami-0bcdedf2b75173395",
    "Best1000Mbps": "ami-039569f01d1b66fa9",
    "Best200Mbps": "ami-0819a7f10ce76fc5a",
    "Best25Mbps": "ami-00af081df73bd58dc",
    "Best5000Mbps": "ami-0dfd667fd41fb6d46",
    "Better10000Mbps": "ami-0719049608adfa46a",
    "Better1000Mbps": "ami-081d39df2bd9f7abb",
    "Better200Mbps": "ami-08dffdeeb4a441979",
    "Better25Mbps": "ami-017ea6494a12d81c4",
    "Better5000Mbps": "ami-047ba0a2392ac15c9",
    "Good10000Mbps": "ami-04be677e476d06e61",
    "Good1000Mbps": "ami-0917a5fdaeebee7ec",
    "Good200Mbps": "ami-06322163edf203eaa",
    "Good25Mbps": "ami-0748396eda6c50f6e",
    "Good5000Mbps": "ami-00195c714aafadfc2",
    "PerAppVeAwaf200Mbps": "ami-050c93501adaf94fc",
    "PerAppVeAwaf25Mbps": "ami-078e1b65fdb7f8eef"
   },
   "ap-east-1": {
    "AdvancedWaf200Mbps": "ami-0112bb029d176be5c",
    "AdvancedWaf25Mbps": "ami-0427958315bc886f2",
    "AdvancedWaf3000Mbps": "ami-0985147f7920ed542",
    "Best10000Mbps": "ami-03a50078f74846458",
    "Best1000Mbps": "ami-0ddf9dee916521ca9",
    "Best200Mbps": "ami-082c29f2bea9ef305",
    "Best25Mbps": "ami-087d9ae12a5cd03d4",
    "Best5000Mbps": "ami-081d4fac3ba20f64a",
    "Better10000Mbps": "ami-0716fc4ca8c0095b9",
    "Better1000Mbps": "ami-0daba7fe71b4c801f",
    "Better200Mbps": "ami-09514a48baab2d367",
    "Better25Mbps": "ami-038a1d6dfc834d6b0",
    "Better5000Mbps": "ami-0850f87424dd700ca",
    "Good10000Mbps": "ami-05c0a1af2b9839d8d",
    "Good1000Mbps": "ami-02ab3dba34d7473a2",
    "Good200Mbps": "ami-075059c5f661b0adf",
    "Good25Mbps": "ami-0e8bb8e868bc6f935",
    "Good5000Mbps": "ami-03d13577137d00d31",
    "PerAppVeAwaf200Mbps": "ami-0a0499a58bb97d6c6",
    "PerAppVeAwaf25Mbps": "ami-06692cfab8ca50158"
   },
   "ap-northeast-1": {
    "AdvancedWaf200Mbps": "ami-013590344850f0c4a",
    "AdvancedWaf25Mbps": "ami-05662ecab2d7939ee",
    "AdvancedWaf3000Mbps": "ami-0a555c565bf5326ab",
    "Best10000Mbps": "ami-05b3f023f8c88810b",
    "Best1000Mbps": "ami-065b43404d34cd469",
    "Best200Mbps": "ami-00911be4e164e0f9a",
    "Best25Mbps": "ami-01342b8b47ebf955b",
    "Best5000Mbps": "ami-08173c7492280e175",
    "Better10000Mbps": "ami-0eb414513a30d321f",
    "Better1000Mbps": "ami-0d3a2e0a810fdd54e",
    "Better200Mbps": "ami-0217ab516e54a8e72",
    "Better25Mbps": "ami-02608c7b8f41607a5",
    "Better5000Mbps": "ami-0b09a2327044e62ae",
    "Good10000Mbps": "ami-0c50664f2b0aad275",
    "Good1000Mbps": "ami-0916843d4a3107eff",
    "Good200Mbps": "ami-04432068d413d53ac",
    "Good25Mbps": "ami-0fdba5bf3e2a358b8",
    "Good5000Mbps": "ami-064df364436ac2034",
    "PerAppVeAwaf200Mbps": "ami-0ae907a7f802bd4cc",
    "PerAppVeAwaf25Mbps": "ami-044eb164b1cd796c6"
   },
   "ap-northeast-2": {
    "AdvancedWaf200Mbps": "ami-0ae525fffd78f3a8a",
    "AdvancedWaf25Mbps": "ami-09ac037daaff3b089",
    "AdvancedWaf3000Mbps": "ami-0417cd39efa683a29",
    "Best10000Mbps": "ami-01d3349c6c8e54856",
    "Best1000Mbps": "ami-00e75dd170ed3edec",
    "Best200Mbps": "ami-017e7556782db473d",
    "Best25Mbps": "ami-00e86904125f71c9b",
    "Best5000Mbps": "ami-0450fa170416cbaf2",
    "Better10000Mbps": "ami-060585a4c255116ba",
    "Better1000Mbps": "ami-0bdc52f786b6ecc3b",
    "Better200Mbps": "ami-01cd6d2e9630a0b14",
    "Better25Mbps": "ami-0f3467b31e14830f5",
    "Better5000Mbps": "ami-086d7f1d82be77b9c",
    "Good10000Mbps": "ami-0886f0701610fcac7",
    "Good1000Mbps": "ami-048e878af15d33947",
    "Good200Mbps": "ami-074e7a59e724ce06f",
    "Good25Mbps": "ami-037b539f91bf3d6b9",
    "Good5000Mbps": "ami-0804da4a11dab8b89",
    "PerAppVeAwaf200Mbps": "ami-014a7df490baa4dd2",
    "PerAppVeAwaf25Mbps": "ami-05079a9b73c703868"
   },
   "ap-northeast-3": {
    "AdvancedWaf200Mbps": "ami-044ee4376e7814feb",
    "AdvancedWaf25Mbps": "ami-05e802030f6d6405a",
    "AdvancedWaf3000Mbps": "ami-08d4a60e93ce1e5ee",
    "Best10000Mbps": "ami-092772b2906a1563d",
    "Best1000Mbps": "ami-00b02a610a9490310",
    "Best200Mbps": "ami-03362ef762adf2d5a",
    "Best25Mbps": "ami-0084558cdcae84ddf",
    "Best5000Mbps": "ami-01d7c9df2c802ccb4",
    "Better10000Mbps": "ami-0c0d1d96d95367b71",
    "Better1000Mbps": "ami-0d5e6381d1d8f34ae",
    "Better200Mbps": "ami-0c6bdd4c6bd1ac352",
    "Better25Mbps": "ami-069153c3c8688c7b3",
    "Better5000Mbps": "ami-06e880555232c3df1",
    "Good10000Mbps": "ami-00b1d96c5fa42d2cd",
    "Good1000Mbps": "ami-0a53383884cdb0c40",
    "Good200Mbps": "ami-0d0d78fa77a547112",
    "Good25Mbps": "ami-0390ac6b2ef057af6",
    "Good5000Mbps": "ami-05d4148df61da83c2",
    "PerAppVeAwaf200Mbps": "ami-02f01013615387abe",
    "PerAppVeAwaf25Mbps": "ami-0a53c2bda3cbb5341"
   },
   "ap-south-1": {
    "AdvancedWaf200Mbps": "ami-0ea7cdac800173b38",
    "AdvancedWaf25Mbps": "ami-0583e518a6b41a2bf",
    "AdvancedWaf3000Mbps": "ami-01decfe09630d0181",
    "Best10000Mbps": "ami-03edbb049df94b62d",
    "Best1000Mbps": "ami-0233fbce39fe77d0b",
    "Best200Mbps": "ami-06b5a9e4b947a826e",
    "Best25Mbps": "ami-0558a5ae384731855",
    "Best5000Mbps": "ami-013785c3a14ff0599",
    "Better10000Mbps": "ami-0d7b1b974f22f43bd",
    "Better1000Mbps": "ami-0a03151bf485a7182",
    "Better200Mbps": "ami-0ed76d0483126f236",
    "Better25Mbps": "ami-063528053c0653b70",
    "Better5000Mbps": "ami-0bbd630bd408a9768",
    "Good10000Mbps": "ami-04253d1b8c572ccfd",
    "Good1000Mbps": "ami-06bd864283dfe7929",
    "Good200Mbps": "ami-0fad2334e10507ad6",
    "Good25Mbps": "ami-0915b43840df4160f",
    "Good5000Mbps": "ami-0a762c673bbea7ba5",
    "PerAppVeAwaf200Mbps": "ami-0617701b974640f7b",
    "PerAppVeAwaf25Mbps": "ami-0475233025fcd7288"
   },
   "ap-southeast-1": {
    "AdvancedWaf200Mbps": "ami-0cfa11d98b04ce46c",
    "AdvancedWaf25Mbps": "ami-067c9831fd21f50cc",
    "AdvancedWaf3000Mbps": "ami-0e519ec586ce890ed",
    "Best10000Mbps": "ami-022345ac4c9428821",
    "Best1000Mbps": "ami-0e91ac17cab710888",
    "Best200Mbps": "ami-054bb9553ea481b13",
    "Best25Mbps": "ami-03ffd03bbca5b89b1",
    "Best5000Mbps": "ami-02dc666f2e7eaeb2c",
    "Better10000Mbps": "ami-0621b5b2622e42de2",
    "Better1000Mbps": "ami-054b85740db4e07d7",
    "Better200Mbps": "ami-0b4a358a66fd45e18",
    "Better25Mbps": "ami-0e157d16b4a789a93",
    "Better5000Mbps": "ami-09148377a0a8d2269",
    "Good10000Mbps": "ami-0539f614529618d47",
    "Good1000Mbps": "ami-0445f40d2b59fab4f",
    "Good200Mbps": "ami-02d8471cdc82a930c",
    "Good25Mbps": "ami-0a1a3902836744525",
    "Good5000Mbps": "ami-02e0bf8e84de7b2d0",
    "PerAppVeAwaf200Mbps": "ami-0ffbcdd1e2da80883",
    "PerAppVeAwaf25Mbps": "ami-051c1dd2e7b2dfb1a"
   },
   "ap-southeast-2": {
    "AdvancedWaf200Mbps": "ami-074a7000cb2b0c616",
    "AdvancedWaf25Mbps": "ami-00a58fea2fb06c361",
    "AdvancedWaf3000Mbps": "ami-0fe74b69752b30dba",
    "Best10000Mbps": "ami-01c9632e464588516",
    "Best1000Mbps": "ami-010d0644e071aeed3",
    "Best200Mbps": "ami-01415a9a471ba33dd",
    "Best25Mbps": "ami-0678c527580fa2725",
    "Best5000Mbps": "ami-0448333989516a25b",
    "Better10000Mbps": "ami-0726f8137ad57a1a0",
    "Better1000Mbps": "ami-02bd4c8cdde6336eb",
    "Better200Mbps": "ami-002a246acdfb35d32",
    "Better25Mbps": "ami-0d3766add05bc0c3a",
    "Better5000Mbps": "ami-01937ad668a732c35",
    "Good10000Mbps": "ami-0e1c6fe0dc82b720e",
    "Good1000Mbps": "ami-0f2d19d20ee3b5140",
    "Good200Mbps": "ami-05ff0acc68a42319c",
    "Good25Mbps": "ami-0db72b44d3419e8a4",
    "Good5000Mbps": "ami-07fb527deace4ab4a",
    "PerAppVeAwaf200Mbps": "ami-0996a5523f49deef4",
    "PerAppVeAwaf25Mbps": "ami-02705aac41539ba0a"
   },
   "ca-central-1": {
    "AdvancedWaf200Mbps": "ami-01db7b7c33a8deeb2",
    "AdvancedWaf25Mbps": "ami-037f1c4f5fe3a9f25",
    "AdvancedWaf3000Mbps": "ami-0d487534c26d73cd7",
    "Best10000Mbps": "ami-080db530a5f6c1019",
    "Best1000Mbps": "ami-03452b36312913a08",
    "Best200Mbps": "ami-0ba0f7c733d48efac",
    "Best25Mbps": "ami-0bbc529047f005ce8",
    "Best5000Mbps": "ami-044c9570c5950b123",
    "Better10000Mbps": "ami-0249b017d21f54af9",
    "Better1000Mbps": "ami-081fdad7b9a441e8a",
    "Better200Mbps": "ami-0ebbb1aeda107bf79",
    "Better25Mbps": "ami-08b564c1772ac5015",
    "Better5000Mbps": "ami-0787c8ac6bf99a1e6",
    "Good10000Mbps": "ami-0fb8cef65b9e831e8",
    "Good1000Mbps": "ami-0f01887712d807177",
    "Good200Mbps": "ami-0ec3144af50d0af49",
    "Good25Mbps": "ami-0fdd151834f1255be",
    "Good5000Mbps": "ami-029d7c0e8cac46a82",
    "PerAppVeAwaf200Mbps": "ami-093c191168e4c5926",
    "PerAppVeAwaf25Mbps": "ami-07c13142fedb18075"
   },
   "eu-central-1": {
    "AdvancedWaf200Mbps": "ami-03dbd3c5f31c60ac9",
    "AdvancedWaf25Mbps": "ami-0a0a89c3c0dd4a795",
    "AdvancedWaf3000Mbps": "ami-0e53524689e061810",
    "Best10000Mbps": "ami-0498bcf52eff435eb",
    "Best1000Mbps": "ami-0d4801f0b470873d6",
    "Best200Mbps": "ami-003e16d42da4fb223",
    "Best25Mbps": "ami-03790a502a008cb38",
    "Best5000Mbps": "ami-0393c6509ee5b6a4b",
    "Better10000Mbps": "ami-054ea1bbb5668f567",
    "Better1000Mbps": "ami-06aecf3afc36415b6",
    "Better200Mbps": "ami-006299874d016d39c",
    "Better25Mbps": "ami-0609fd65c9b38f7aa",
    "Better5000Mbps": "ami-06c034c2690a56583",
    "Good10000Mbps": "ami-0227203ce0af9d1fc",
    "Good1000Mbps": "ami-074380a1c4274595a",
    "Good200Mbps": "ami-0938fde7b28f27ab4",
    "Good25Mbps": "ami-07f3ab36a3cab31cf",
    "Good5000Mbps": "ami-0e4de8153b2a28965",
    "PerAppVeAwaf200Mbps": "ami-02df16800a63b7f99",
    "PerAppVeAwaf25Mbps": "ami-0b162edc9b2d6662c"
   },
   "eu-north-1": {
    "AdvancedWaf200Mbps": "ami-0b563afed7c6a11c8",
    "AdvancedWaf25Mbps": "ami-07a5500b732a17313",
    "AdvancedWaf3000Mbps": "ami-0f6938498b2bd7663",
    "Best10000Mbps": "ami-02e54ee18462643e4",
    "Best1000Mbps": "ami-03904bbce91b7d28f",
    "Best200Mbps": "ami-072cef7964a3a4244",
    "Best25Mbps": "ami-01ac8c8a28290985c",
    "Best5000Mbps": "ami-0560ace7048641f48",
    "Better10000Mbps": "ami-0faba39075b4bbd95",
    "Better1000Mbps": "ami-040779f2c620481ce",
    "Better200Mbps": "ami-0cba93018f23e6d3e",
    "Better25Mbps": "ami-09dcbdc17c2c6bf89",
    "Better5000Mbps": "ami-02ffeb0a8623d5e40",
    "Good10000Mbps": "ami-0ad8f473e172db0a1",
    "Good1000Mbps": "ami-0398cfb482171afc5",
    "Good200Mbps": "ami-0155804e238329edf",
    "Good25Mbps": "ami-0b9a869884f2cb467",
    "Good5000Mbps": "ami-0bb0b310eb71dde23",
    "PerAppVeAwaf200Mbps": "ami-0e70b9d5447bb4d81",
    "PerAppVeAwaf25Mbps": "ami-03055f18080724c2b"
   },
   "eu-south-1": {
    "AdvancedWaf200Mbps": "ami-06cbcaa3b7d6c9f90",
    "AdvancedWaf25Mbps": "ami-0dcfd32aa7fe29df4",
    "AdvancedWaf3000Mbps": "ami-0a6007b00579e12f7",
    "Best10000Mbps": "ami-0d9d029841ff787df",
    "Best1000Mbps": "ami-00e4fa693b20b5903",
    "Best200Mbps": "ami-033a9c41cbb1bcbcc",
    "Best25Mbps": "ami-0e62aa67270da2c48",
    "Best5000Mbps": "ami-034db9afde8dac5bd",
    "Better10000Mbps": "ami-0a76c81397bb69bca",
    "Better1000Mbps": "ami-0da44bc021cdf93a9",
    "Better200Mbps": "ami-0ca8eaee4efbf07c1",
    "Better25Mbps": "ami-0631ca66d5cc098d4",
    "Better5000Mbps": "ami-04c75ea546cabd377",
    "Good10000Mbps": "ami-000fb5e59c6071c90",
    "Good1000Mbps": "ami-05e5665d5ef6400ef",
    "Good200Mbps": "ami-0b302cb5197ef0f22",
    "Good25Mbps": "ami-047101036c1c57c17",
    "Good5000Mbps": "ami-0eca9585d84b15776",
    "PerAppVeAwaf200Mbps": "ami-04d166d09cfe5141c",
    "PerAppVeAwaf25Mbps": "ami-0e1ed19706bbf8d1c"
   },
   "eu-west-1": {
    "AdvancedWaf200Mbps": "ami-01ba32ebfba5dc087",
    "AdvancedWaf25Mbps": "ami-0d31530a991cfdfcf",
    "AdvancedWaf3000Mbps": "ami-0baea0b00bd3dfbec",
    "Best10000Mbps": "ami-06d98c0d84121fa7d",
    "Best1000Mbps": "ami-066623796907bc13f",
    "Best200Mbps": "ami-00e73e77e0ab8887b",
    "Best25Mbps": "ami-03c6545981e4c344d",
    "Best5000Mbps": "ami-05e36687e7bdc3868",
    "Better10000Mbps": "ami-0ad5afce1126dc4db",
    "Better1000Mbps": "ami-09bbf3cb4db68138d",
    "Better200Mbps": "ami-053cb2028b1bbae57",
    "Better25Mbps": "ami-09a2802d9a3fb3f24",
    "Better5000Mbps": "ami-0f0d3cf9061be114c",
    "Good10000Mbps": "ami-0d3da2e912cad1f67",
    "Good1000Mbps": "ami-02c2951f97342c7f6",
    "Good200Mbps": "ami-007f80bfc9f68b439",
    "Good25Mbps": "ami-0269df2184574690d",
    "Good5000Mbps": "ami-03e17850b755f0e6b",
    "PerAppVeAwaf200Mbps": "ami-02236175bb4fd71db",
    "PerAppVeAwaf25Mbps": "ami-05fd062a9c63ab0aa"
   },
   "eu-west-2": {
    "AdvancedWaf200Mbps": "ami-04de2d9f55093d557",
    "AdvancedWaf25Mbps": "ami-0f330b34e6bb62b35",
    "AdvancedWaf3000Mbps": "ami-0365471ab143312ae",
    "Best10000Mbps": "ami-00550fe4c50630661",
    "Best1000Mbps": "ami-015b6325fb23a2c66",
    "Best200Mbps": "ami-038e0a944d7e6d048",
    "Best25Mbps": "ami-001bbab746c994174",
    "Best5000Mbps": "ami-05899a5aa6cc7131f",
    "Better10000Mbps": "ami-04d4e1d33e12de66f",
    "Better1000Mbps": "ami-020ec427b7ff84311",
    "Better200Mbps": "ami-020d3b1cf338f58bd",
    "Better25Mbps": "ami-0a404ff0c165678dc",
    "Better5000Mbps": "ami-0aafbc90fe33d27ba",
    "Good10000Mbps": "ami-0afc9571bd07474f3",
    "Good1000Mbps": "ami-05fde7b872958a5bc",
    "Good200Mbps": "ami-02a0c30f1cb61f998",
    "Good25Mbps": "ami-03a6db680769bee29",
    "Good5000Mbps": "ami-00dbfcf8451b0bcc5",
    "PerAppVeAwaf200Mbps": "ami-056a5c04c83dd7ef0",
    "PerAppVeAwaf25Mbps": "ami-098b9726171b30bd7"
   },
   "eu-west-3": {
    "AdvancedWaf200Mbps": "ami-019de472eba508e32",
    "AdvancedWaf25Mbps": "ami-0187cfc2f500dad3b",
    "AdvancedWaf3000Mbps": "ami-0ac0ac1817808297e",
    "Best10000Mbps": "ami-0bda7b68d78cc6150",
    "Best1000Mbps": "ami-04e3b085acbffc590",
    "Best200Mbps": "ami-035f3155f83b875bd",
    "Best25Mbps": "ami-07ec729998be9351d",
    "Best5000Mbps": "ami-027f991d08b7b2f68",
    "Better10000Mbps": "ami-041c06eb3885ae16b",
    "Better1000Mbps": "ami-01a56961e6318e1ed",
    "Better200Mbps": "ami-06fd14c8d923b8c15",
    "Better25Mbps": "ami-09d706aa51061c984",
    "Better5000Mbps": "ami-0a218a1f872e89a57",
    "Good10000Mbps": "ami-0b1eebe3e74f7a1a1",
    "Good1000Mbps": "ami-092b7c6794414f9d9",
    "Good200Mbps": "ami-0afde22360d21d8e0",
    "Good25Mbps": "ami-0aed4690f0492995d",
    "Good5000Mbps": "ami-07643e66004370ea3",
    "PerAppVeAwaf200Mbps": "ami-0e434d46d2a8df1a8",
    "PerAppVeAwaf25Mbps": "ami-01c79e17fa9e0606b"
   },
   "me-south-1": {
    "AdvancedWaf200Mbps": "ami-03291da8648c7e0fe",
    "AdvancedWaf25Mbps": "ami-01a486e0983e8bf9b",
    "AdvancedWaf3000Mbps": "ami-09b6b40bf760f5f90",
    "Best10000Mbps": "ami-0154a9181092bf077",
    "Best1000Mbps": "ami-071370d9f61ad5c64",
    "Best200Mbps": "ami-0a16232362eaa31da",
    "Best25Mbps": "ami-00cdd90ad0c074e20",
    "Best5000Mbps": "ami-0568731c8ac253f7c",
    "Better10000Mbps": "ami-0f9558daca853a93d",
    "Better1000Mbps": "ami-0735f2e1d516c7802",
    "Better200Mbps": "ami-0871b0ac6625bac7d",
    "Better25Mbps": "ami-03df60f8e41c1ad6b",
    "Better5000Mbps": "ami-0e04a4d26f31204db",
    "Good10000Mbps": "ami-060d4e7b5c4a40bcd",
    "Good1000Mbps": "ami-02768c795f60008ef",
    "Good200Mbps": "ami-0306064fa8b4f3587",
    "Good25Mbps": "ami-0481aa31a0236eff1",
    "Good5000Mbps": "ami-0bd609f788d340b9a",
    "PerAppVeAwaf200Mbps": "ami-0a042b85a2e25f48b",
    "PerAppVeAwaf25Mbps": "ami-00cfc9e13fe289f1f"
   },
   "sa-east-1": {
    "AdvancedWaf200Mbps": "ami-017eed031ff30d74f",
    "AdvancedWaf25Mbps": "ami-08ae53fe11ce8519f",
    "AdvancedWaf3000Mbps": "ami-0394ef012ad0c1033",
    "Best10000Mbps": "ami-06758792de4019c85",
    "Best1000Mbps": "ami-0758cfe431711f65f",
    "Best200Mbps": "ami-00ddc710486c7aa33",
    "Best25Mbps": "ami-0c5c2838aa3887338",
    "Best5000Mbps": "ami-034c1a53dcd39fc75",
    "Better10000Mbps": "ami-0816d5c9783a64749",
    "Better1000Mbps": "ami-0500cf866ab086dd4",
    "Better200Mbps": "ami-0bc020fca8b56ebd6",
    "Better25Mbps": "ami-09a04be3778d5a4ae",
    "Better5000Mbps": "ami-09dab6a05088ab1aa",
    "Good10000Mbps": "ami-01722163f917c8013",
    "Good1000Mbps": "ami-0ff6bf7b4714d8225",
    "Good200Mbps": "ami-012021d6d09499b61",
    "Good25Mbps": "ami-0811bde4010ec3d9f",
    "Good5000Mbps": "ami-022f833518ad33242",
    "PerAppVeAwaf200Mbps": "ami-066bf7bb88de987a7",
    "PerAppVeAwaf25Mbps": "ami-0ace6523e3dad53c0"
   },
   "us-east-1": {
    "AdvancedWaf200Mbps": "ami-04f64528e4ec2e338",
    "AdvancedWaf25Mbps": "ami-00d75b4219bdde22b",
    "AdvancedWaf3000Mbps": "ami-016bd6e8f70ca4f47",
    "Best10000Mbps": "ami-0d1c1efb0e81f3d8f",
    "Best1000Mbps": "ami-08d7dce5a2b108ede",
    "Best200Mbps": "ami-01a79c12d08c392de",
    "Best25Mbps": "ami-0ce94feb4eff482da",
    "Best5000Mbps": "ami-08c1dd06a4ba6a2ed",
    "Better10000Mbps": "ami-0ac012038eef90fe6",
    "Better1000Mbps": "ami-03229e0525866cb48",
    "Better200Mbps": "ami-0f900abc0c51709f4",
    "Better25Mbps": "ami-0cd2662033b96d66d",
    "Better5000Mbps": "ami-093908d723f81a9b5",
    "Good10000Mbps": "ami-072668af32a14e6d6",
    "Good1000Mbps": "ami-0a9a68d782340da61",
    "Good200Mbps": "ami-05cfc47c35582a77b",
    "Good25Mbps": "ami-07e0b884b4e2aace1",
    "Good5000Mbps": "ami-07a567bf10263d5c5",
    "PerAppVeAwaf200Mbps": "ami-0530934e3f1e6d860",
    "PerAppVeAwaf25Mbps": "ami-0b98b80919269bcc5"
   },
   "us-east-2": {
    "AdvancedWaf200Mbps": "ami-00139a1743c29e4ee",
    "AdvancedWaf25Mbps": "ami-00b99be3cfeca2ee3",
    "AdvancedWaf3000Mbps": "ami-0b05737ddc84f6ab3",
    "Best10000Mbps": "ami-03440972d30fb79a8",
    "Best1000Mbps": "ami-0099ba5aecebad9d3",
    "Best200Mbps": "ami-0c2f29fedd3b91673",
    "Best25Mbps": "ami-026f260f147a28795",
    "Best5000Mbps": "ami-059a09b1f8c90dcea",
    "Better10000Mbps": "ami-0b0670cd8c6e6afe5",
    "Better1000Mbps": "ami-08c0c4a711b78da67",
    "Better200Mbps": "ami-06e9ba55046985b00",
    "Better25Mbps": "ami-06e0fbaf3a681f60f",
    "Better5000Mbps": "ami-0d5ee7c65059de35c",
    "Good10000Mbps": "ami-0ac019219f34efb83",
    "Good1000Mbps": "ami-0f2483743b9723e9d",
    "Good200Mbps": "ami-025e2c0866b094b74",
    "Good25Mbps": "ami-074c99c645b75583f",
    "Good5000Mbps": "ami-037e17611c1e0ad60",
    "PerAppVeAwaf200Mbps": "ami-077f679e4dfc5a842",
    "PerAppVeAwaf25Mbps": "ami-0ffdc9075cdc594f6"
   },
   "us-gov-east-1": {
    "AdvancedWaf200Mbps": "ami-06f992c6fd3167076",
    "AdvancedWaf25Mbps": "ami-07c04a5a4c69bade0",
    "AdvancedWaf3000Mbps": "ami-08a997a78de8c3839",
    "Best10000Mbps": "ami-0081adda7ca292150",
    "Best1000Mbps": "ami-01a9d200b5f8ca790",
    "Best200Mbps": "ami-0474d68fbb2dd387d",
    "Best25Mbps": "ami-0d1680dc093c8a87a",
    "Best5000Mbps": "ami-07442fa3240c2b59d",
    "Better10000Mbps": "ami-0c57f3982b9557e67",
    "Better1000Mbps": "ami-012cbcecf35059d98",
    "Better200Mbps": "ami-0b2edfbc5d0608d88",
    "Better25Mbps": "ami-0002d0db8727dd13e",
    "Better5000Mbps": "ami-02f884d3403b7ef5b",
    "Good10000Mbps": "ami-0960ff1b331f3c669",
    "Good1000Mbps": "ami-0a36236b2bc72ab4f",
    "Good200Mbps": "ami-01ce8943ac3cd2140",
    "Good25Mbps": "ami-0b2e150f2b7d4bc80",
    "Good5000Mbps": "ami-00d745992de824698",
    "PerAppVeAwaf200Mbps": "ami-06c44d36ded626936",
    "PerAppVeAwaf25Mbps": "ami-085c6a3f8318eb012"
   },
   "us-gov-west-1": {
    "AdvancedWaf200Mbps": "ami-018cd51280e129fcf",
    "AdvancedWaf25Mbps": "ami-0636826f76665a577",
    "AdvancedWaf3000Mbps": "ami-09fe429dd3d9a08bf",
    "Best10000Mbps": "ami-09f02d2f5fc6f8fbf",
    "Best1000Mbps": "ami-0725328b436aba7cc",
    "Best200Mbps": "ami-0bc3a599c32f4ca53",
    "Best25Mbps": "ami-01e0e128106e99e8d",
    "Best5000Mbps": "ami-01331cdf1c8ef5065",
    "Better10000Mbps": "ami-0e4a4e29065460948",
    "Better1000Mbps": "ami-0361513e5b23e080b",
    "Better200Mbps": "ami-059bb4e705c446494",
    "Better25Mbps": "ami-0f3883cb7b12063ac",
    "Better5000Mbps": "ami-066c08f441ab85037",
    "Good10000Mbps": "ami-0c9f82057f42bd5c8",
    "Good1000Mbps": "ami-0b4fe41180a3ca7e5",
    "Good200Mbps": "ami-031a793f967cf1cba",
    "Good25Mbps": "ami-0fe336468ba5209aa",
    "Good5000Mbps": "ami-0d26047ab614fc06f",
    "PerAppVeAwaf200Mbps": "ami-06acdad852643c140",
    "PerAppVeAwaf25Mbps": "ami-027a3880ff8c531d4"
   },
   "us-west-1": {
    "AdvancedWaf200Mbps": "ami-06ca58157a744efc5",
    "AdvancedWaf25Mbps": "ami-0a4a03f1522800287",
    "AdvancedWaf3000Mbps": "ami-0ccc1aa31b49198e7",
    "Best10000Mbps": "ami-02ef59200a0d2e0c9",
    "Best1000Mbps": "ami-0af63df6ec33b5f2e",
    "Best200Mbps": "ami-09b80a0d083b800e8",
    "Best25Mbps": "ami-01b6a29600dee3b06",
    "Best5000Mbps": "ami-055e04688cd2f6d85",
    "Better10000Mbps": "ami-00204ebdfe70bd72f",
    "Better1000Mbps": "ami-02a5b0e9152050d57",
    "Better200Mbps": "ami-02508b5c6b81b79fa",
    "Better25Mbps": "ami-0bd24b1c3f56b89ec",
    "Better5000Mbps": "ami-0dbf4457f0eb98b03",
    "Good10000Mbps": "ami-00c2217dc08949832",
    "Good1000Mbps": "ami-0f8901671ce1b5c1c",
    "Good200Mbps": "ami-031f1e9c198226d08",
    "Good25Mbps": "ami-00fe694460bb12239",
    "Good5000Mbps": "ami-01418f756566812e7",
    "PerAppVeAwaf200Mbps": "ami-0d511e2ba88b265e4",
    "PerAppVeAwaf25Mbps": "ami-003244166295441bc"
   },
   "us-west-2": {
    "AdvancedWaf200Mbps": "ami-0df7038f809d8900d",
    "AdvancedWaf25Mbps": "ami-0e677b5afee562f6e",
    "AdvancedWaf3000Mbps": "ami-05023f822e5e21938",
    "Best10000Mbps": "ami-0165371074af9df0d",
    "Best1000Mbps": "ami-088f468fad728c9c5",
    "Best200Mbps": "ami-06bf3e6a4f585a4ec",
    "Best25Mbps": "ami-00e7c3b9ba5e12e27",
    "Best5000Mbps": "ami-009c4a2cc328432e6",
    "Better10000Mbps": "ami-04eac0e784e19cf01",
    "Better1000Mbps": "ami-00b512adcc925ba23",
    "Better200Mbps": "ami-0cd379d1220ef9846",
    "Better25Mbps": "ami-049644bd3e41383fd",
    "Better5000Mbps": "ami-02c3a2e42170f2b89",
    "Good10000Mbps": "ami-033530265e6843d39",
    "Good1000Mbps": "ami-0abe7d4fe683ebd2a",
    "Good200Mbps": "ami-042e571b4de1bb64b",
    "Good25Mbps": "ami-0b13d6fb8fd06e3dd",
    "Good5000Mbps": "ami-0d16bc6b3b853c07c",
    "PerAppVeAwaf200Mbps": "ami-0fd337418b0d90a7c",
    "PerAppVeAwaf25Mbps": "ami-07b3ad6b375f365fd"
   }
  },
  "Transformations": {
   "Boolean": {
    "No": "false",
    "Yes": "true"
   }
  }
 },
 "Metadata": {
  "AWS::CloudFormation::Interface": {
   "ParameterGroups": [
    {
     "Label": {
      "default": "DEPLOYMENT"
     },
     "Parameters": [
      "deploymentName"
     ]
    },
    {
     "Label": {
      "default": "NETWORKING CONFIGURATION"
     },
     "Parameters": [
      "Vpc",
      "availabilityZones",
      "subnets",
      "restrictedSrcAddress",
      "restrictedSrcAddressApp",
      "dnsMemberIpType",
      "dnsMemberPort",
      "dnsProviderHost",
      "dnsProviderPort",
      "dnsProviderUser",
      "dnsPasswordS3Arn",
      "dnsProviderPool",
      "dnsProviderDataCenter",
      "provisionPublicIP"
     ]
    },
    {
     "Label": {
      "default": "INSTANCE CONFIGURATION"
     },
     "Parameters": [
      "sshKey",
      "instanceType",
      "throughput",
      "imageName",
      "customImageId",
      "adminUsername",
      "managementGuiPort",
      "timezone",
      "ntpServer",
      "bigIpModules"
     ]
    },
    {
     "Label": {
      "default": "AUTO SCALING CONFIGURATION"
     },
     "Parameters": [
      "scalingMinSize",
      "scalingMaxSize",
      "scaleDownBytesThreshold",
      "scaleUpBytesThreshold",
      "lowCpuThreshold",
      "highCpuThreshold",
      "notificationEmail"
     ]
    },
    {
     "Label": {
      "default": "VIRTUAL SERVICE CONFIGURATION"
     },
     "Parameters": [
      "virtualServicePort",
      "applicationPort",
      "appInternalDnsName",
      "applicationPoolTagKey",
      "applicationPoolTagValue",
      "declarationUrl"
     ]
    },
    {
     "Label": {
      "default": "TAGS"
     },
     "Parameters": [
      "application",
      "environment",
      "group",
      "owner",
      "costcenter"
     ]
    },
    {},
    {
     "Label": {
      "default": "TEMPLATE ANALYTICS"
     },
     "Parameters": [
      "allowUsageAnalytics",
      "allowPhoneHome"
     ]
    }
   ],
   "ParameterLabels": {
    "Vpc": {
     "default": "VPC ID"
    },
    "adminUsername": {
     "default": "BIG-IP Admin User for clustering"
    },
    "allowPhoneHome": {
     "default": "Send Anonymous Device Statistics to F5"
    },
    "allowUsageAnalytics": {
     "default": "Send Anonymous Template Statistics to F5"
    },
    "appInternalDnsName": {
     "default": "Application Pool DNS"
    },
    "application": {
     "default": "Application"
    },
    "applicationPoolTagKey": {
     "default": "Application Pool Tag Key"
    },
    "applicationPoolTagValue": {
     "default": "Application Pool Tag Value"
    },
    "applicationPort": {
     "default": "Application Pool Member Port"
    },
    "availabilityZones": {
     "default": "Availability Zone(s)"
    },
    "bigIpModules": {
     "default": "BIG-IP Modules"
    },
    "costcenter": {
     "default": "Cost Center"
    },
    "customImageId": {
     "default": "Custom Image Id"
    },
    "declarationUrl": {
     "default": "AS3 Declaration URL"
    },
    "deploymentName": {
     "default": "Deployment Name"
    },
    "dnsMemberIpType": {
     "default": "DNS Member IP Type (public | private)"
    },
    "dnsMemberPort": {
     "default": "DNS Member Port"
    },
    "dnsPasswordS3Arn": {
     "default": "S3 ARN of the BIG-IP DNS Password File"
    },
    "dnsProviderDataCenter": {
     "default": "GSLB Datacenter on BIG-IP DNS"
    },
    "dnsProviderHost": {
     "default": "BIG-IP DNS Management IP address (or hostname)"
    },
    "dnsProviderPool": {
     "default": "GSLB Pool on BIG-IP DNS"
    },
    "dnsProviderPort": {
     "default": "BIG-IP DNS Management Port"
    },
    "dnsProviderUser": {
     "default": "BIG-IP DNS user for updating DNS"
    },
    "environment": {
     "default": "Environment"
    },
    "group": {
     "default": "Group"
    },
    "highCpuThreshold": {
     "default": "High CPU Percentage Threshold"
    },
    "imageName": {
     "default": "F5 Image Name"
    },
    "instanceType": {
     "default": "AWS Instance Size"
    },
    "lowCpuThreshold": {
     "default": "Low CPU Percentage Threshold"
    },
    "managementGuiPort": {
     "default": "Management Port"
    },
    "notificationEmail": {
     "default": "Notification Email"
    },
    "ntpServer": {
     "default": "NTP Server"
    },
    "owner": {
     "default": "Owner"
    },
    "policyLevel": "",
    "provisionPublicIP": {
     "default": "Provision Public IP addresses for the BIG-IP interfaces"
    },
    "restrictedSrcAddress": {
     "default": "Restricted Source Address to BIG-IP"
    },
    "restrictedSrcAddressApp": {
     "default": "Restricted Source Address to Application"
    },
    "scaleDownBytesThreshold": {
     "default": "Scale Down Bytes Threshold"
    },
    "scaleUpBytesThreshold": {
     "default": "Scale Up Bytes Threshold"
    },
    "scalingMaxSize": {
     "default": "Maximum Instances"
    },
    "scalingMinSize": {
     "default": "Minimum Instances"
    },
    "sshKey": {
     "default": "SSH Key Name"
    },
    "subnets": {
     "default": "Subnet ID(s)"
    },
    "throughput": {
     "default": "Maximum Throughput"
    },
    "timezone": {
     "default": "Timezone (Olson)"
    },
    "virtualServicePort": {
     "default": "Virtual Service Port"
    }
   }
  },
  "Version": "5.16.0"
 },
 "Outputs": {
  "bigipAutoscaleGroup": {
   "Description": "BIG-IP Autoscale Group",
   "Value": {
    "Ref": "BigipAutoscaleGroup"
   }
  },
  "bigipExternalSecurityGroup": {
   "Description": "BIG-IP Security Group (External or Public)",
   "Value": {
    "Ref": "bigipExternalSecurityGroup"
   }
  },
  "s3Bucket": {
   "Description": "BIG-IP S3 Bucket",
   "Value": {
    "Ref": "S3Bucket"
   }
  }
 },
 "Parameters": {
  "Vpc": {
   "ConstraintDescription": "This must be an existing VPC within the working region.",
   "Type": "AWS::EC2::VPC::Id"
  },
  "adminUsername": {
   "AllowedPattern": "[a-zA-Z0-9._-]+",
   "ConstraintDescription": "Verify your BIG-IP admin username. Note that the user name can contain only alphanumeric characters, periods ( . ), underscores ( _ ), or hyphens ( - ). The user name cannot be any of the following: adm, apache, bin, daemon, guest, lp, mail, manager, mysql, named, nobody, ntp, operator, partition, password, pcap, postfix, radvd, root, rpc, rpm, sshd, syscheck, tomcat, uucp, or vcsa.",
   "Default": "cluster-admin",
   "Description": "BIG-IP Admin User for clustering",
   "MaxLength": 255,
   "MinLength": 1,
   "Type": "String"
  },
  "allowPhoneHome": {
   "AllowedValues": [
    "Yes",
    "No"
   ],
   "Default": "Yes",
   "Description": "This deployment can send anonymous device statistics to F5 to help us determine how to improve our solutions. If you select **No** statistics are not sent.",
   "Type": "String"
  },
  "allowUsageAnalytics": {
   "AllowedValues": [
    "Yes",
    "No"
   ],
   "Default": "Yes",
   "Description": "This deployment can send anonymous template statistics to F5 to help us determine how to improve our solutions. If you select **No** statistics are not sent.",
   "Type": "String"
  },
  "appInternalDnsName": {
   "Default": "www.example.com",
   "Description": "DNS name poolapp.example.com for the application pool.  This is not required if you are using the Service Discovery feature.",
   "Type": "String"
  },
  "application": {
   "Default": "f5app",
   "Description": "Name of the Application Tag",
   "Type": "String"
  },
  "applicationPoolTagKey": {
   "Default": "default",
   "Description": "This is used for the Service Discovery feature. If you specify a non-default value here, the template automatically discovers the pool members you have tagged with this key and the value you specify next.",
   "Type": "String"
  },
  "applicationPoolTagValue": {
   "Default": "default",
   "Description": "This is used for the Service Discovery feature. If you specify a non-default value here, the template automatically discovers the pool members you have tagged with the key you specified and this value.",
   "Type": "String"
  },
  "applicationPort": {
   "ConstraintDescription": "Must be a valid port number (1-65535).",
   "Default": 80,
   "Description": "Port for the application pool member on BIG-IP VE",
   "MaxValue": 65535,
   "MinValue": 1,
   "Type": "Number"
  },
  "availabilityZones": {
   "Description": "Availability Zones where you want to deploy BIG-IP VEs (we recommend at least 2)",
   "Type": "List<AWS::EC2::AvailabilityZone::Name>"
  },
  "bigIpModules": {
   "Default": "ltm:nominal",
   "Description": "Comma separated list of modules and levels to provision, for example: ltm:nominal,asm:nominal",
   "Type": "String"
  },
  "costcenter": {
   "Default": "f5costcenter",
   "Description": "Name of the Cost Center Tag",
   "Type": "String"
  },
  "customImageId": {
   "ConstraintDescription": "Must be a valid AMI Id",
   "Default": "OPTIONAL",
   "Description": "If you would like to deploy using a custom BIG-IP image, provide the AMI Id.  **Note**: Unless specifically required, leave the default of **OPTIONAL**",
   "MaxLength": 255,
   "MinLength": 1,
   "Type": "String"
  },
  "declarationUrl": {
   "AllowedPattern": "^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$|^none$|^default$",
   "Default": "default",
   "Description": "URL for the AS3 declaration JSON file to be deployed. If left at **default**, the recommended F5 application service configuration will be applied. Enter **none** to deploy without a service configuration.",
   "Type": "String"
  },
  "deploymentName": {
   "Default": "example",
   "Description": "Name the template uses to create object names",
   "MaxLength": 25,
   "Type": "String"
  },
  "dnsMemberIpType": {
   "Description": "The IP type (public | private) to add as the record when updating the DNS provider.",
   "Type": "String"
  },
  "dnsMemberPort": {
   "Description": "The port for the DNS member to use for monitoring the members status.",
   "Type": "Number"
  },
  "dnsPasswordS3Arn": {
   "ConstraintDescription": "Verify the S3 ARN of BIG-IP DNS management password file",
   "Description": "S3 ARN of the BIG-IP DNS management password file. e.g. arn:aws:s3:::bucket_name/full_path_to_file for public regions. For GovCloud (US) region, start with arn:aws-us-gov:s3. For China region, start with arn:aws-cn:s3.",
   "MaxLength": "255",
   "MinLength": "1",
   "Type": "String"
  },
  "dnsProviderDataCenter": {
   "Description": "The GSLB datacenter on the BIG-IP DNS system to use when creating GSLB server(s). Note: If the datacenter provided does not exist the template will create one with the value given.",
   "Type": "String"
  },
  "dnsProviderHost": {
   "Description": "The management IP address (or hostname) for the DNS provider to use when updating DNS.",
   "Type": "String"
  },
  "dnsProviderPool": {
   "Description": "The GSLB pool on the BIG-IP DNS system to populate.",
   "Type": "String"
  },
  "dnsProviderPort": {
   "Description": "The management port for the DNS provider to use when updating DNS.",
   "Type": "Number"
  },
  "dnsProviderUser": {
   "Description": "The management username for the DNS provider to use when updating DNS.",
   "Type": "String"
  },
  "environment": {
   "Default": "f5env",
   "Description": "Name of the Environment Tag",
   "Type": "String"
  },
  "group": {
   "Default": "f5group",
   "Description": "Name of the Group Tag",
   "Type": "String"
  },
  "highCpuThreshold": {
   "ConstraintDescription": "Select a value between 0 to 100",
   "Default": 80,
   "Description": "High CPU Percentage threshold to begin scaling up BIG-IP VE instances",
   "MaxValue": 100,
   "MinValue": 0,
   "Type": "Number"
  },
  "imageName": {
   "AllowedValues": [
    "Better",
    "Best",
    "Good",
    "PerAppVeLtm"
   ],
   "ConstraintDescription": "Must be a valid F5 BIG-IP VE image type",
   "Default": "Best",
   "Description": "F5 BIG-IP Performance Type",
   "Type": "String"
  },
  "instanceType": {
   "AllowedValues": [
    "m5.xlarge",
    "m5.4xlarge",
    "m5.large",
    "m5.12xlarge",
    "m4.xlarge",
    "m4.large",
    "m4.4xlarge",
    "m4.2xlarge",
    "m4.16xlarge",
    "m4.10xlarge",
    "m3.xlarge",
    "m3.medium",
    "m3.large",
    "t3.large",
    "m3.2xlarge",
    "cc2.8xlarge",
    "c5.xlarge",
    "c5.large",
    "c5.4xlarge",
    "c5.9xlarge",
    "c4.xlarge",
    "c4.8xlarge",
    "c4.4xlarge",
    "c4.2xlarge",
    "c3.xlarge",
    "c3.8xlarge",
    "c3.4xlarge",
    "c3.2xlarge",
    "c5n.2xlarge",
    "c5n.4xlarge"
   ],
   "ConstraintDescription": "Must be a valid EC2 instance type for BIG-IP",
   "Default": "m5.xlarge",
   "Description": "Size of the F5 BIG-IP Virtual Instance",
   "Type": "String"
  },
  "lowCpuThreshold": {
   "ConstraintDescription": "Select a value between 0 to 100",
   "Default": 0,
   "Description": "Low CPU Percentage threshold to begin scaling down BIG-IP VE instances",
   "MaxValue": 100,
   "MinValue": 0,
   "Type": "Number"
  },
  "managementGuiPort": {
   "ConstraintDescription": "Must be a valid, unused port on the BIG-IP.",
   "Default": "8443",
   "Description": "Port for the BIG-IP management Configuration utility",
   "Type": "Number"
  },
  "notificationEmail": {
   "AllowedPattern": ".+@.+",
   "ConstraintDescription": "Must be a valid email address.",
   "Description": "Valid email address to send Auto Scaling event notifications",
   "Type": "String"
  },
  "ntpServer": {
   "Default": "0.pool.ntp.org",
   "Description": "NTP server for this implementation",
   "Type": "String"
  },
  "owner": {
   "Default": "f5owner",
   "Description": "Name of the Owner Tag",
   "Type": "String"
  },
  "provisionPublicIP": {
   "AllowedValues": [
    "Yes",
    "No"
   ],
   "Default": "Yes",
   "Description": "Whether or not to provision Public IP Addresses for the BIG-IP Network Interfaces. By Default no Public IP addresses are provisioned.",
   "Type": "String"
  },
  "restrictedSrcAddress": {
   "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
   "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x.",
   "Description": " The IP address range used to SSH and access managment GUI on the EC2 instances",
   "MaxLength": "18",
   "MinLength": "9",
   "Type": "String"
  },
  "restrictedSrcAddressApp": {
   "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
   "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x.",
   "Description": " The IP address range that can be used to access web traffic (80/443) to the EC2 instances",
   "MaxLength": "18",
   "MinLength": "9",
   "Type": "String"
  },
  "scaleDownBytesThreshold": {
   "Default": 10000,
   "Description": "Incoming bytes threshold to begin scaling down BIG-IP VE instances",
   "Type": "Number"
  },
  "scaleUpBytesThreshold": {
   "Default": 35000,
   "Description": "Incoming bytes threshold to begin scaling up BIG-IP VE instances",
   "Type": "Number"
  },
  "scalingMaxSize": {
   "ConstraintDescription": "Must be a number between 2-8",
   "Default": 3,
   "Description": "Maximum number of BIG-IP instances (2-8) that can be created in the Auto Scale Group",
   "MaxValue": 8,
   "MinValue": 2,
   "Type": "Number"
  },
  "scalingMinSize": {
   "ConstraintDescription": "Must be a number between 1-8",
   "Default": 1,
   "Description": "Minimum number of BIG-IP instances (1-8) you want available in the Auto Scale Group",
   "MaxValue": 8,
   "MinValue": 1,
   "Type": "Number"
  },
  "sshKey": {
   "Description": "EC2 KeyPair to enable SSH access to the BIG-IP instance",
   "Type": "AWS::EC2::KeyPair::KeyName"
  },
  "subnets": {
   "ConstraintDescription": "The subnet IDs must be within an existing VPC",
   "Description": "Public or external subnets for the availability zones",
   "Type": "List<AWS::EC2::Subnet::Id>"
  },
  "throughput": {
   "AllowedValues": [
    "25Mbps",
    "200Mbps",
    "1000Mbps",
    "5000Mbps"
   ],
   "ConstraintDescription": "Select the BIG-IP throughput you want to use",
   "Default": "1000Mbps",
   "Description": "Maximum amount of throughput for BIG-IP VE",
   "Type": "String"
  },
  "timezone": {
   "Default": "UTC",
   "Description": "Enter the Olson timezone string from /usr/share/zoneinfo. The default is 'UTC'. See the TZ column here (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) for legal values. For example, 'US/Eastern'.",
   "Type": "String"
  },
  "virtualServicePort": {
   "ConstraintDescription": "Must be a valid port number (1-65535).",
   "Default": 80,
   "Description": "Port for the virtual service on BIG-IP VE",
   "MaxValue": 65535,
   "MinValue": 1,
   "Type": "Number"
  }
 },
 "Resources": {
  "BigipAutoScalingAccessRole": {
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "ec2.amazonaws.com"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Path": "/",
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "s3:ListBucket"
         ],
         "Effect": "Allow",
         "Resource": {
          "Fn::Join": [
           "",
           [
            "arn:*:s3:::",
            {
             "Ref": "S3Bucket"
            }
           ]
          ]
         }
        },
        {
         "Action": [
          "s3:PutObject",
          "s3:GetObject",
          "s3:DeleteObject"
         ],
         "Effect": "Allow",
         "Resource": {
          "Fn::Join": [
           "",
           [
            "arn:*:s3:::",
            {
             "Ref": "S3Bucket"
            },
            "/*"
           ]
          ]
         }
        },
        {
         "Action": [
          "sqs:SendMessage",
          "sqs:ReceiveMessage",
          "sqs:DeleteMessage"
         ],
         "Effect": "Allow",
         "Resource": {
          "Fn::GetAtt": [
           "SQSQueue",
           "Arn"
          ]
         }
        },
        {
         "Action": [
          "autoscaling:DescribeAutoScalingGroups",
          "autoscaling:DescribeAutoScalingInstances",
          "autoscaling:SetInstanceProtection",
          "ec2:DescribeInstances",
          "ec2:DescribeInstanceStatus",
          "ec2:DescribeAddresses",
          "ec2:AssociateAddress",
          "ec2:DisassociateAddress",
          "ec2:DescribeSubnets",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeNetworkInterfaceAttribute",
          "ec2:DescribeRouteTables",
          "ec2:AssignPrivateIpAddresses",
          "ec2:DescribeTags",
          "ec2:CreateTags",
          "ec2:DeleteTags",
          "cloudwatch:PutMetricData",
          "cloudformation:ListStackResources",
          "cloudformation:SignalResource"
         ],
         "Effect": "Allow",
         "Resource": [
          "*"
         ]
        },
        {
         "Action": [
          "s3:GetObject"
         ],
         "Effect": "Allow",
         "Resource": {
          "Ref": "dnsPasswordS3Arn"
         }
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "BigipAutoScalingAcccessPolicy"
     }
    ]
   },
   "Type": "AWS::IAM::Role"
  },
  "BigipAutoScalingInstanceProfile": {
   "Properties": {
    "Path": "/",
    "Roles": [
     {
      "Ref": "BigipAutoScalingAccessRole"
     }
    ]
   },
   "Type": "AWS::IAM::InstanceProfile"
  },
  "BigipAutoscaleGroup": {
   "CreationPolicy": {
    "ResourceSignal": {
     "Count": {
      "Ref": "scalingMinSize"
     },
     "Timeout": "PT30M"
    }
   },
   "Properties": {
    "Cooldown": "1500",
    "DesiredCapacity": {
     "Ref": "scalingMinSize"
    },
    "HealthCheckGracePeriod": 1500,
    "HealthCheckType": "EC2",
    "LaunchConfigurationName": {
     "Ref": "BigipLaunchConfig"
    },
    "MaxSize": {
     "Ref": "scalingMaxSize"
    },
    "MetricsCollection": [
     {
      "Granularity": "1Minute"
     }
    ],
    "MinSize": {
     "Ref": "scalingMinSize"
    },
    "NotificationConfigurations": [
     {
      "NotificationTypes": [
       "autoscaling:EC2_INSTANCE_LAUNCH",
       "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
       "autoscaling:EC2_INSTANCE_TERMINATE",
       "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
      ],
      "TopicARN": {
       "Ref": "SNSTopic"
      }
     }
    ],
    "Tags": [
     {
      "Key": "Application",
      "PropagateAtLaunch": true,
      "Value": {
       "Ref": "application"
      }
     },
     {
      "Key": "Costcenter",
      "PropagateAtLaunch": true,
      "Value": {
       "Ref": "costcenter"
      }
     },
     {
      "Key": "Environment",
      "PropagateAtLaunch": true,
      "Value": {
       "Ref": "environment"
      }
     },
     {
      "Key": "Group",
      "PropagateAtLaunch": true,
      "Value": {
       "Ref": "group"
      }
     },
     {
      "Key": "Name",
      "PropagateAtLaunch": true,
      "Value": {
       "Fn::Join": [
        "",
        [
         "BIG-IP Autoscale Instance: ",
         {
          "Ref": "deploymentName"
         }
        ]
       ]
      }
     },
     {
      "Key": "Owner",
      "PropagateAtLaunch": true,
      "Value": {
       "Ref": "owner"
      }
     }
    ],
    "VPCZoneIdentifier": {
     "Ref": "subnets"
    }
   },
   "Type": "AWS::AutoScaling::AutoScalingGroup",
   "UpdatePolicy": {
    "AutoScalingRollingUpdate": {
     "MaxBatchSize": 1,
     "MinInstancesInService": 1,
     "PauseTime": "PT30M"
    }
   }
  },
  "BigipHighCpuAlarm": {
   "DependsOn": "BigipAutoscaleGroup",
   "Properties": {
    "ActionsEnabled": true,
    "AlarmActions": [
     {
      "Ref": "BigipScaleUpPolicy"
     }
    ],
    "AlarmDescription": "CPU usage percentage exceeds average threshold after 1 successive interval of 1 minute",
    "ComparisonOperator": "GreaterThanThreshold",
    "EvaluationPeriods": 1,
    "MetricName": "tmm-stat",
    "Namespace": {
     "Ref": "BigipAutoscaleGroup"
    },
    "Period": 60,
    "Statistic": "Average",
    "Threshold": {
     "Ref": "highCpuThreshold"
    }
   },
   "Type": "AWS::CloudWatch::Alarm"
  },
  "BigipHighbytesAlarm": {
   "DependsOn": "BigipAutoscaleGroup",
   "Properties": {
    "ActionsEnabled": true,
    "AlarmActions": [
     {
      "Ref": "BigipScaleUpPolicy"
     }
    ],
    "AlarmDescription": "Throughput exceeds average threshold after 1 successive interval of 1 minute",
    "ComparisonOperator": "GreaterThanThreshold",
    "EvaluationPeriods": 1,
    "MetricName": "throughput-per-sec",
    "Namespace": {
     "Ref": "BigipAutoscaleGroup"
    },
    "Period": 60,
    "Statistic": "Average",
    "Threshold": {
     "Ref": "scaleUpBytesThreshold"
    }
   },
   "Type": "AWS::CloudWatch::Alarm"
  },
  "BigipLaunchConfig": {
   "Metadata": {
    "AWS::CloudFormation::Init": {
     "config": {
      "commands": {
       "000-disable-1nicautoconfig": {
        "command": "/usr/bin/setdb provision.1nicautoconfig disable"
       },
       "001-rest-provision-extramb": {
        "command": "/usr/bin/setdb provision.extramb 1000"
       },
       "002-rest-use-extramb": {
        "command": "/usr/bin/setdb restjavad.useextramb true"
       },
       "003-rest-post": {
        "command": "/usr/bin/curl -s -f -u admin: -H \"Content-Type: application/json\" -d '{\"maxMessageBodySize\":134217728}' -X POST http://localhost:8100/mgmt/shared/server/messaging/settings/8100 | jq ."
       },
       "004-rest-restart": {
        "command": "bigstart restart restjavad restnoded"
       },
       "010-install-libs": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "mkdir -p /var/log/cloud/aws;",
           "nohup /config/installCloudLibs.sh",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "015-network-config": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           "--file /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/aws/1nicSetup.sh",
           "--cwd /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/aws",
           "--log-level silly",
           "-o /var/log/cloud/aws/1nicSetup.log",
           "--signal NETWORK_CONFIG_DONE",
           "&>> /var/log/cloud/aws/install.log < /dev/null",
           "&"
          ]
         ]
        }
       },
       "017-set-master-key": {
        "command": {
         "Fn::Join": [
          "",
          [
           "nohup /config/waitThenRun.sh",
           " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           " --signal MASTER_KEY_CONFIGURED",
           " --wait-for NETWORK_CONFIG_DONE",
           " --file f5-rest-node",
           " --cl-args '/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/setMasterKey --log-level silly --cloud aws --provider-options s3Bucket:",
           {
            "Ref": "S3Bucket"
           },
           ",mgmtPort:",
           {
            "Ref": "managementGuiPort"
           },
           "' --log-level silly",
           " -o /var/log/cloud/aws/setMasterKey.log",
           " &>> /var/log/cloud/aws/install.log < /dev/null",
           " &"
          ]
         ]
        }
       },
       "020-generate-password": {
        "command": {
         "Fn::Join": [
          "",
          [
           "nohup /config/waitThenRun.sh",
           " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           " --signal PASSWORD_CREATED",
           " --wait-for MASTER_KEY_CONFIGURED",
           " --file f5-rest-node",
           " --cl-args '/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/generatePassword --file /config/cloud/aws/.adminPassword --encrypt --include-special-characters'",
           " --log-level silly",
           " -o /var/log/cloud/aws/generatePassword.log",
           " &>> /var/log/cloud/aws/install.log < /dev/null",
           " &"
          ]
         ]
        }
       },
       "030-create-admin-user": {
        "command": {
         "Fn::Join": [
          "",
          [
           "nohup /config/waitThenRun.sh",
           " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           " --wait-for PASSWORD_CREATED",
           " --signal ADMIN_CREATED",
           " --file /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/createUser.sh",
           " --cl-args '--user ",
           {
            "Ref": "adminUsername"
           },
           " --password-file /config/cloud/aws/.adminPassword",
           " --password-encrypted",
           "'",
           " --log-level silly",
           " -o /var/log/cloud/aws/createUser.log",
           " &>> /var/log/cloud/aws/install.log < /dev/null",
           " &"
          ]
         ]
        }
       },
       "050-onboard-BIG-IP": {
        "command": {
         "Fn::If": [
          "optin",
          {
           "Fn::Join": [
            " ",
            [
             "DEPLOYMENTID=`echo \"",
             {
              "Ref": "AWS::StackId"
             },
             "\"|sha512sum|cut -d \" \" -f 1`;",
             "CUSTOMERID=`echo \"",
             {
              "Ref": "AWS::AccountId"
             },
             "\"|sha512sum|cut -d \" \" -f 1`;",
             "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth0`;",
             "nohup /config/waitThenRun.sh",
             "TOKEN=`/usr/bin/curl -sS --retry 20 -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 120'`;",
             "HOSTNAME=`/usr/bin/curl -sS --retry 20 -H 'X-aws-ec2-metadata-token: '$TOKEN'' http://169.254.169.254/latest/meta-data/hostname`;",
             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
             "--log-level silly",
             "--wait-for ADMIN_CREATED",
             "--signal ONBOARD_DONE",
             "-o /var/log/cloud/aws/onboard.log",
             "--host localhost",
             "--user",
             {
              "Ref": "adminUsername"
             },
             "--password-url file:///config/cloud/aws/.adminPassword",
             "--password-encrypted",
             "--hostname ${HOSTNAME}",
             "--ntp ",
             {
              "Ref": "ntpServer"
             },
             "--tz ",
             {
              "Ref": "timezone"
             },
             "--dns ${NAME_SERVER}",
             "--port 8443",
             "--ssl-port ",
             {
              "Ref": "managementGuiPort"
             },
             "--modules ",
             {
              "Ref": "bigIpModules"
             },
             "--metrics \"cloudName:aws,region:${REGION},bigipVersion:16.1.2.1-0.0.10,customerId:${CUSTOMERID},deploymentId:${DEPLOYMENTID},templateName:f5-payg-autoscale-bigip-ltm-dns.template,templateVersion:5.16.0,licenseType:hourly\"",
             "-d tm.tcpudptxchecksum:software-only ",
             "--ping",
             "&>> /var/log/cloud/aws/install.log < /dev/null",
             "&"
            ]
           ]
          },
          {
           "Fn::Join": [
            " ",
            [
             "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth0`;",
             "nohup /config/waitThenRun.sh",
             "TOKEN=`/usr/bin/curl -sS --retry 20 -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 120'`;",
             "HOSTNAME=`/usr/bin/curl -sS --retry 20 -H 'X-aws-ec2-metadata-token: '$TOKEN'' http://169.254.169.254/latest/meta-data/hostname`;",
             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
             "--log-level silly",
             "--wait-for ADMIN_CREATED",
             "--signal ONBOARD_DONE",
             "-o /var/log/cloud/aws/onboard.log",
             "--host localhost",
             "--port 8443",
             "--user",
             {
              "Ref": "adminUsername"
             },
             "--password-url file:///config/cloud/aws/.adminPassword",
             "--password-encrypted",
             "--hostname ${HOSTNAME}",
             "--ntp ",
             {
              "Ref": "ntpServer"
             },
             "--tz ",
             {
              "Ref": "timezone"
             },
             "--dns ${NAME_SERVER}",
             "--ssl-port ",
             {
              "Ref": "managementGuiPort"
             },
             "--modules ",
             {
              "Ref": "bigIpModules"
             },
             "-d tm.tcpudptxchecksum:software-only ",
             "--ping",
             "&>> /var/log/cloud/aws/install.log < /dev/null",
             "&"
            ]
           ]
          }
         ]
        }
       },
       "060-custom-config": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           "--log-level silly",
           "--file /config/cloud/aws/custom-config.sh",
           "--cwd /config/cloud/aws",
           "-o /var/log/cloud/aws/custom-config.log",
           "--wait-for ONBOARD_DONE",
           "--signal CUSTOM_CONFIG_DONE",
           "&>> /var/log/cloud/aws/install.log < /dev/null",
           "&"
          ]
         ]
        }
       },
       "070-verify-deployment": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           " --wait-for CUSTOM_CONFIG_DONE",
           " --signal DEPLOYMENT_VERIFIED",
           " --file /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs-aws/scripts/verifyDeploymentCompletion.js",
           " --cl-args '--user ",
           {
            "Ref": "adminUsername"
           },
           " --password-url file:///config/cloud/aws/.adminPassword",
           " --password-encrypted true",
           " --host localhost",
           " --port ",
           {
            "Ref": "managementGuiPort"
           },
           " --solution autoscale",
           " --log-level silly",
           " --instances-count ",
           {
            "Ref": "scalingMinSize"
           },
           "'",
           " --log-level silly",
           " -o /var/log/cloud/aws/verifyDeploymentCompletion.log",
           " &>> /var/log/cloud/aws/install.log < /dev/null",
           " &"
          ]
         ]
        }
       }
      },
      "files": {
       "/config/cloud/aws/custom-config.sh": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "# Generated from 5.16.0\n",
           "date\n",
           ". /config/cloud/aws/onboard_config_vars\n",
           "if [[ $allowPhoneHome == \"No\" ]]; then\n",
           "    tmsh modify sys software update auto-phonehome disabled\n",
           "fi\n",
           "tmsh create sys icall script uploadMetrics definition { exec /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs-aws/scripts/reportMetrics.sh }\n",
           "tmsh create sys icall handler periodic /Common/metricUploadHandler { first-occurrence now interval 60 script /Common/uploadMetrics }\n",
           "tmsh save /sys config\n",
           "echo 'Attempting to Join or Initiate Autoscale Cluster' \n",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/autoscale.js --cloud aws --provider-options s3Bucket:${s3Bucket},sqsUrl:${sqsUrl},mgmtPort:${managementGuiPort} --host localhost --port ${managementGuiPort} --user ${adminUsername} --password-url file:///config/cloud/aws/.adminPassword --password-encrypted --device-group autoscale-group --block-sync -c join --log-level silly --output /var/log/cloud/aws/autoscale.log --dns gtm --dns-ip-type ${dnsMemberIpType} --dns-app-port ${dnsMemberPort} --dns-provider-options host:${dnsProviderHost},port:${dnsProviderPort},user:${dnsProviderUser},passwordUrl:${dnsPasswordS3Arn},serverName:${deploymentName},poolName:${dnsProviderPool},datacenter:${dnsProviderDataCenter} \n",
           "if [ -f /config/cloud/master ]; then \n",
           "  if `jq '.ucsLoaded' < /config/cloud/master`; then \n",
           "    echo \"UCS backup loaded from backup folder in S3 bucket ${s3Bucket}.\"\n",
           "  else\n",
           "    echo 'SELF-SELECTED as Master ... Initiated Autoscale Cluster ... Loading default config'\n",
           "    ### START CUSTOM CONFIGURATION\n",
           "    deployed=\"no\"\n",
           "    url_regex=\"(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$\"\n",
           "    file_loc=\"/config/cloud/custom_config\"\n",
           "    if [[ $declarationUrl =~ $url_regex ]]; then\n",
           "       response_code=$(/usr/bin/curl -sk -w \"%{http_code}\" $declarationUrl -o $file_loc)\n",
           "       if [[ $response_code == 200 ]]; then\n",
           "           echo \"Custom config download complete; checking for valid JSON.\"\n",
           "           cat $file_loc | jq .class\n",
           "           if [[ $? == 0 ]]; then\n",
           "               response_code=$(/usr/bin/curl -svvu admin: -w \"%{http_code}\" -X POST -H \"Content-Type: application/json\" -H \"Expect:\" http://localhost:8100/mgmt/shared/appsvcs/declare -d @$file_loc -o /dev/null)\n",
           "           if [[ $response_code == 200 || $response_code == 502 ]]; then\n",
           "               echo \"Deployment of custom application succeeded.\"\n",
           "               deployed=\"yes\"\n",
           "           else\n",
           "               echo \"Failed to deploy custom application; continuing...\"\n",
           "           fi\n",
           "       else\n",
           "           echo \"Custom config was not valid JSON, continuing...\"\n",
           "       fi\n",
           "       else\n",
           "           echo \"Failed to download custom config; continuing...\"\n",
           "       fi\n",
           "   else\n",
           "      echo \"Custom config was not a URL, continuing...\"\n",
           "   fi\n",
           "   if [[ $deployed == \"no\" && $declarationUrl == \"default\" ]]; then\n",
           "       payload=$(echo $payload | jq -c --arg pool_http_port $applicationPort --arg vs_http_port $virtualServicePort '.ltm.http.pool.members[0].servicePort = ($pool_http_port | tonumber) | .ltm.http.serviceMain.virtualPort = ($vs_http_port | tonumber)')\n",
           "    payload=$(echo $payload | jq -c 'del(.ltm.http.serviceMain.serverTLS)')\n",
           "       if [ \"${applicationPoolTagKey}\" != \"default\" ]\n",
           "       then\n",
           "           payload=$(echo $payload | jq -c 'del(.ltm.http.pool.members[0].autoPopulate) | del(.ltm.http.pool.members[0].hostname)')\n",
           "           payload=$(echo $payload | jq -c --arg tagKey $applicationPoolTagKey --arg tagValue $applicationPoolTagValue --arg region $region '.ltm.http.pool.members[0].tagKey = $tagKey | .ltm.http.pool.members[0].tagValue = $tagValue | .ltm.http.pool.members[0].region = $region')\n",
           "       else\n",
           "           payload=$(echo $payload | jq -c 'del(.ltm.http.pool.members[0].updateInterval) | del(.ltm.http.pool.members[0].tagKey) | del(.ltm.http.pool.members[0].tagValue) | del(.ltm.http.pool.members[0].addressRealm) | del(.ltm.http.pool.members[0].region)')\n",
           "           payload=$(echo $payload | jq -c --arg pool_member $appInternalDnsName '.ltm.http.pool.members[0].hostname = $pool_member | .ltm.http.pool.members[0].addressDiscovery = \"fqdn\"')\n",
           "       fi\n",
           "        response_code=$(/usr/bin/curl -svvu admin: -w \"%{http_code}\" -X POST -H \"Content-Type: application/json\" -H \"Expect:\" http://localhost:8100/mgmt/shared/appsvcs/declare -d \"$payload\" -o /dev/null)\n",
           "        if [[ $response_code == 200 || $response_code == 502  ]]; then\n",
           "            echo 'Deployment of recommended application succeeded.'\n",
           "        else\n",
           "            echo 'Failed to deploy recommended application'\n",
           "            exit 1\n",
           "        fi\n",
           "    fi\n",
           "    ### END CUSTOM CONFIGURATION\n",
           "    tmsh save /sys config\n",
           "    f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/autoscale.js --cloud aws --provider-options s3Bucket:${s3Bucket},sqsUrl:${sqsUrl},mgmtPort:${managementGuiPort}",
           "      --host localhost --port ${managementGuiPort} --user ${adminUsername} --password-url file:///config/cloud/aws/.adminPassword --password-encrypted -c unblock-sync --log-level silly --output /var/log/cloud/aws/autoscale.log \n",
           "  fi\n",
           "fi\n",
           "(crontab -l 2>/dev/null; echo '*/1 * * * * /config/cloud/aws/run_autoscale_update.sh') | crontab -\n",
           "(crontab -l 2>/dev/null; echo '59 23 * * * /config/cloud/aws/run_autoscale_backup.sh') | crontab -\n",
           "tmsh save /sys config\n",
           "systemctl restart crond\n",
           "date\n",
           "echo 'custom-config.sh complete'\n"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/getNameServer.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "INTERFACE=$1",
           "INTERFACE_MAC=`ifconfig ${INTERFACE} | egrep ether | awk '{print tolower($2)}'`",
           "TOKEN=`/usr/bin/curl -sS --retry 20 -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 120'`",
           "VPC_CIDR_BLOCK=`/usr/bin/curl -s -f --retry 20 -H 'X-aws-ec2-metadata-token: '$TOKEN'' http://169.254.169.254/latest/meta-data/network/interfaces/macs/${INTERFACE_MAC}/vpc-ipv4-cidr-block`",
           "VPC_NET=${VPC_CIDR_BLOCK%/*}",
           "NAME_SERVER=`echo ${VPC_NET} | awk -F. '{ printf \"%d.%d.%d.%d\", $1, $2, $3, $4+2 }'`",
           "echo $NAME_SERVER"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/onboard_config_vars": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "# Generated from 5.16.0\n",
           "TOKEN=`/usr/bin/curl -sS --retry 20 -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 120'`\n",
           "HOSTNAME=`/usr/bin/curl -sS --retry 20 -H 'X-aws-ec2-metadata-token: '$TOKEN'' http://169.254.169.254/latest/meta-data/hostname`\n",
           "region='",
           {
            "Ref": "AWS::Region"
           },
           "'\n",
           "deploymentName='",
           {
            "Ref": "deploymentName"
           },
           "'\n",
           "adminUsername='",
           {
            "Ref": "adminUsername"
           },
           "'\n",
           "managementGuiPort='",
           {
            "Ref": "managementGuiPort"
           },
           "'\n",
           "timezone='",
           {
            "Ref": "timezone"
           },
           "'\n",
           "ntpServer='",
           {
            "Ref": "ntpServer"
           },
           "'\n",
           "virtualServicePort='",
           {
            "Ref": "virtualServicePort"
           },
           "'\n",
           "applicationPort='",
           {
            "Ref": "applicationPort"
           },
           "'\n",
           "appInternalDnsName='",
           {
            "Ref": "appInternalDnsName"
           },
           "'\n",
           "applicationPoolTagKey='",
           {
            "Ref": "applicationPoolTagKey"
           },
           "'\n",
           "applicationPoolTagValue='",
           {
            "Ref": "applicationPoolTagValue"
           },
           "'\n",
           "s3Bucket='",
           {
            "Ref": "S3Bucket"
           },
           "'\n",
           "sqsUrl='",
           {
            "Ref": "SQSQueue"
           },
           "'\n",
           "declarationUrl='",
           {
            "Ref": "declarationUrl"
           },
           "'\n",
           "allowPhoneHome='",
           {
            "Ref": "allowPhoneHome"
           },
           "'\n",
           "passwd=$(f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/decryptDataFromFile.js --data-file /config/cloud/aws/.adminPassword)\n",
           "payload='{\"class\":\"ADC\",\"schemaVersion\":\"3.0.0\",\"label\":\"autoscale_ltm\",\"id\":\"AUTOSCALE_LTM\",\"remark\":\"Autoscale LTM\",\"ltm\":{\"class\":\"Tenant\",\"Shared\":{\"class\":\"Application\",\"template\":\"shared\",\"serviceAddress\":{\"class\":\"Service_Address\",\"virtualAddress\":\"0.0.0.0\"}},\"http\":{\"class\":\"Application\",\"template\":\"http\",\"serviceMain\":{\"class\":\"Service_HTTP\",\"virtualAddresses\":[{\"use\":\"/ltm/Shared/serviceAddress\"}],\"serverTLS\":{\"bigip\":\"/Common/example-clientssl-profile\"},\"snat\":\"auto\",\"pool\":\"pool\"},\"pool\":{\"class\":\"Pool\",\"monitors\":[\"http\"],\"members\":[{\"autoPopulate\":true,\"hostname\":\"demo.example.com\",\"servicePort\":80,\"addressDiscovery\":\"aws\",\"updateInterval\":15,\"tagKey\":\"applicationPoolTagKey\",\"tagValue\":\"applicationPoolTagValue\",\"addressRealm\":\"private\",\"region\":\"us-west-2\"}]}}}}'\n",
           "dnsMemberIpType='",
           {
            "Fn::If": [
             "usePublicIP",
             {
              "Ref": "dnsMemberIpType"
             },
             "private"
            ]
           },
           "'\n",
           "dnsMemberPort='",
           {
            "Ref": "dnsMemberPort"
           },
           "'\n",
           "dnsProviderHost='",
           {
            "Ref": "dnsProviderHost"
           },
           "'\n",
           "dnsProviderPort='",
           {
            "Ref": "dnsProviderPort"
           },
           "'\n",
           "dnsProviderUser='",
           {
            "Ref": "dnsProviderUser"
           },
           "'\n",
           "dnsPasswordS3Arn='",
           {
            "Ref": "dnsPasswordS3Arn"
           },
           "'\n",
           "dnsProviderPool='",
           {
            "Ref": "dnsProviderPool"
           },
           "'\n",
           "dnsProviderDataCenter='",
           {
            "Ref": "dnsProviderDataCenter"
           },
           "'\n"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/run_autoscale_backup.sh": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "source /config/cloud/aws/onboard_config_vars\n",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/autoscale.js",
           " --cloud aws --provider-options '",
           "s3Bucket:",
           {
            "Ref": "S3Bucket"
           },
           ",sqsUrl:",
           {
            "Ref": "SQSQueue"
           },
           ",mgmtPort:",
           {
            "Ref": "managementGuiPort"
           },
           "'",
           " --host localhost",
           " --port ",
           {
            "Ref": "managementGuiPort"
           },
           " --user ",
           {
            "Ref": "adminUsername"
           },
           " --password-url file:///config/cloud/aws/.adminPassword",
           " --password-encrypted",
           " --device-group autoscale-group",
           " --cluster-action backup-ucs",
           " --log-level silly --output /var/log/cloud/aws/autoscale.log"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/run_autoscale_update.sh": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/autoscale.js",
           " --cloud aws --provider-options '",
           "s3Bucket:",
           {
            "Ref": "S3Bucket"
           },
           ",sqsUrl:",
           {
            "Ref": "SQSQueue"
           },
           ",mgmtPort:",
           {
            "Ref": "managementGuiPort"
           },
           "'",
           " --host localhost",
           " --port ",
           {
            "Ref": "managementGuiPort"
           },
           " --user ",
           {
            "Ref": "adminUsername"
           },
           " --password-url file:///config/cloud/aws/.adminPassword",
           " --password-encrypted",
           " --device-group autoscale-group",
           " --cluster-action update",
           " --log-level silly --output /var/log/cloud/aws/autoscale.log ",
           " --dns gtm",
           " --dns-ip-type ",
           {
            "Ref": "dnsMemberIpType"
           },
           " --dns-app-port ",
           {
            "Ref": "dnsMemberPort"
           },
           " --dns-provider-options host:",
           {
            "Ref": "dnsProviderHost"
           },
           ",port:",
           {
            "Ref": "dnsProviderPort"
           },
           ",user:",
           {
            "Ref": "dnsProviderUser"
           },
           ",passwordUrl:",
           {
            "Ref": "dnsPasswordS3Arn"
           },
           ",serverName:",
           {
            "Ref": "deploymentName"
           },
           ",poolName:",
           {
            "Ref": "dnsProviderPool"
           },
           ",datacenter:",
           {
            "Ref": "dnsProviderDataCenter"
           }
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/f5-cloud-libs-aws.tar.gz": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "http://cdn.f5.com/product/cloudsolutions/f5-cloud-libs-aws/v2.10.1/f5-cloud-libs-aws.tar.gz"
       },
       "/config/cloud/f5-cloud-libs.tar.gz": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "http://cdn.f5.com/product/cloudsolutions/f5-cloud-libs/v4.26.8/f5-cloud-libs.tar.gz"
       },
       "/config/installCloudLibs.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "#!/bin/bash",
           "echo about to execute",
           "checks=0",
           "while [ $checks -lt 120 ]; do echo checking mcpd",
           "    tmsh -a show sys mcp-state field-fmt | grep -q running",
           "    if [ $? == 0 ]; then",
           "        echo mcpd ready",
           "        break",
           "    fi",
           "    echo mcpd not ready yet",
           "    let checks=checks+1",
           "    sleep 10",
           "done",
           "echo loading verifyHash script",
           "if ! tmsh load sys config merge file /config/verifyHash; then",
           "    echo cannot validate signature of /config/verifyHash",
           "    exit",
           "fi",
           "echo loaded verifyHash",
           "declare -a filesToVerify=(\"/config/cloud/f5-cloud-libs.tar.gz\" \"/config/cloud/f5-cloud-libs-aws.tar.gz\")",
           "for fileToVerify in \"${filesToVerify[@]}\"",
           "do",
           "    echo verifying \"$fileToVerify\"",
           "    if ! tmsh run cli script verifyHash \"$fileToVerify\"; then",
           "        echo \"$fileToVerify\" is not valid",
           "        exit 1",
           "    fi",
           "    echo verified \"$fileToVerify\"",
           "done",
           "mkdir -p /config/cloud/aws/node_modules/@f5devcentral",
           "echo expanding f5-cloud-libs.tar.gz",
           "tar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
           "echo installing dependencies",
           "tar xvfz /config/cloud/f5-cloud-libs-aws.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
           "tar xvfz /config/cloud/asm-policy-linux.tar.gz -C /config/cloud",
           "echo cloud libs install complete",
           "touch /config/cloud/cloudLibsReady"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/verifyHash": {
        "content": {
         "Fn::Join": [
          "",
          [
           "cli script /Common/verifyHash {\nproc script::run {} {\n        if {[catch {\n            set hashes(f5-cloud-libs.tar.gz) 4d5ec3793349b9c5231c2fec48c358b6f4dde262454604dc7fdf404e0aff650729438dc830d041e7b4c7ccd8a0b4a9b00c5dbea28e5322da32bc87bc412be51c\n            set hashes(f5-cloud-libs-aws.tar.gz) c2eadf04a910e28a52c21e1b9af9015b5a4e5a50501bc0dfbd354d03d08d5a82fe8c0326dd4138b835ff88fc17232e957b8f2d3fb031ed1809fd3d0b973afe09\n            set hashes(f5-cloud-libs-azure.tar.gz) 703bae0e774114b16528ca71bb2109db5f36623f8b8698588348677862ffa48559ba9698001d2f245860059a4fec588a15ee924317b967bf338cca66b0de6936\n            set hashes(f5-cloud-libs-gce.tar.gz) fd16ab827b3089e76d5c77c713a2eabe685707dba7207cfdf2778db2e96281fc8e3e4424fb20f584c44cb9722b4fbf352e7c364de5fed61a74bd138f974705b2\n            set hashes(f5-cloud-libs-openstack.tar.gz) 5c83fe6a93a6fceb5a2e8437b5ed8cc9faf4c1621bfc9e6a0779f6c2137b45eab8ae0e7ed745c8cf821b9371245ca29749ca0b7e5663949d77496b8728f4b0f9\n            set hashes(f5-cloud-libs-consul.tar.gz) a32aab397073df92cbbba5067e5823e9b5fafca862a258b60b6b40aa0975c3989d1e110f706177b2ffbe4dde65305a260a5856594ce7ad4ef0c47b694ae4a513\n            set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0\n            set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034\n            set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe\n            set hashes(f5.http.v1.2.0rc7.tmpl) 21f413342e9a7a281a0f0e1301e745aa86af21a697d2e6fdc21dd279734936631e92f34bf1c2d2504c201f56ccd75c5c13baa2fe7653213689ec3c9e27dff77d\n            set hashes(f5.aws_advanced_ha.v1.3.0rc1.tmpl) 9e55149c010c1d395abdae3c3d2cb83ec13d31ed39424695e88680cf3ed5a013d626b326711d3d40ef2df46b72d414b4cb8e4f445ea0738dcbd25c4c843ac39d\n            set hashes(f5.aws_advanced_ha.v1.4.0rc1.tmpl) de068455257412a949f1eadccaee8506347e04fd69bfb645001b76f200127668e4a06be2bbb94e10fefc215cfc3665b07945e6d733cbe1a4fa1b88e881590396\n            set hashes(f5.aws_advanced_ha.v1.4.0rc2.tmpl) 6ab0bffc426df7d31913f9a474b1a07860435e366b07d77b32064acfb2952c1f207beaed77013a15e44d80d74f3253e7cf9fbbe12a90ec7128de6facd097d68f\n            set hashes(f5.aws_advanced_ha.v1.4.0rc3.tmpl) 2f2339b4bc3a23c9cfd42aae2a6de39ba0658366f25985de2ea53410a745f0f18eedc491b20f4a8dba8db48970096e2efdca7b8efffa1a83a78e5aadf218b134\n            set hashes(f5.aws_advanced_ha.v1.4.0rc4.tmpl) 2418ac8b1f1884c5c096cbac6a94d4059aaaf05927a6a4508fd1f25b8cc6077498839fbdda8176d2cf2d274a27e6a1dae2a1e3a0a9991bc65fc74fc0d02ce963\n            set hashes(f5.aws_advanced_ha.v1.4.0rc5.tmpl) 5e582187ae1a6323e095d41eddd41151d6bd38eb83c634410d4527a3d0e246a8fc62685ab0849de2ade62b0275f51264d2deaccbc16b773417f847a4a1ea9bc4\n            set hashes(asm-policy.tar.gz) 2d39ec60d006d05d8a1567a1d8aae722419e8b062ad77d6d9a31652971e5e67bc4043d81671ba2a8b12dd229ea46d205144f75374ed4cae58cefa8f9ab6533e6\n            set hashes(deploy_waf.sh) 1a3a3c6274ab08a7dc2cb73aedc8d2b2a23cd9e0eb06a2e1534b3632f250f1d897056f219d5b35d3eed1207026e89989f754840fd92969c515ae4d829214fb74\n            set hashes(f5.policy_creator.tmpl) 06539e08d115efafe55aa507ecb4e443e83bdb1f5825a9514954ef6ca56d240ed00c7b5d67bd8f67b815ee9dd46451984701d058c89dae2434c89715d375a620\n            set hashes(f5.service_discovery.tmpl) 4811a95372d1dbdbb4f62f8bcc48d4bc919fa492cda012c81e3a2fe63d7966cc36ba8677ed049a814a930473234f300d3f8bced2b0db63176d52ac99640ce81b\n            set hashes(f5.cloud_logger.v1.0.0.tmpl) 64a0ed3b5e32a037ba4e71d460385fe8b5e1aecc27dc0e8514b511863952e419a89f4a2a43326abb543bba9bc34376afa114ceda950d2c3bd08dab735ff5ad20\n            set hashes(f5-appsvcs-3.5.1-5.noarch.rpm) ba71c6e1c52d0c7077cdb25a58709b8fb7c37b34418a8338bbf67668339676d208c1a4fef4e5470c152aac84020b4ccb8074ce387de24be339711256c0fa78c8\n            set hashes(f5-appsvcs-3.18.0-4.noarch.rpm) e72ee8005a27070ac399ab097e8aa507a72aae4721d7491589cfeb821db3ef86cbc979e796ab319ec727bb51400ccda813c4b9eb4a6b3d1220a396b582f8f400\n            set hashes(f5-appsvcs-3.20.0-3.noarch.rpm) d4bba8892a2068bb53f88c6090dc65f17707abca35a7ed2fff39980057fe7f7a2ebf710ab2284a1d83d70b7746beabad9df603017c0fd8728f7457661c95ac8d\n            set hashes(f5-appsvcs-3.25.0-3.noarch.rpm) 26f19bdaaa81cbe0421b3e08c09987f9dd0c54b05a626d6a21a836b34248d2d9d83095f0daad8e7a4a068e9ef99b89fbcd246ae8b617ac2b2456599157d0e8b3\n            set hashes(f5-appsvcs-3.26.1-1.noarch.rpm) b460e11679d38a96549b5041def27b419f1a41c8f788f9f8c7a034aa5cb5a8c9fd151c7c439bebd093fcd85cd8657f1c064551d9337566f9fc7e9506c55dc02c\n            set hashes(f5-appsvcs-3.31.0-6.noarch.rpm) 6506fde5d1c2e067662b513387dccda0281d3bbc604fc6dcf8e5740ae563748899f7f335e349006fe3f0e751cd70d4ef8be3701ae45dca305de649f259f090a9\n            set hashes(f5-cloud-failover-1.1.0-0.noarch.rpm) 15a440c299f9e4af86a3d0f5b0d75b0054385b95e47c3ef116d2e0bfb0041a26dcbf549028e2a26d2c718ec61446bd657be38fbbcd9db781efe5414c174ac68c\n            set hashes(f5-cloud-failover-1.3.0-0.noarch.rpm) 19681eb33d9f910c913f8180199485eb653b4b5ebeaae0b90a6ce8341d7a22fed8d21815b5ba148c468852d20cc26fad4c4242e50ecc184f1f8770dacced6f6a\n            set hashes(f5-cloud-failover-1.4.0-0.noarch.rpm) 49e9108a070e0c8713aeb7b330662358542e61b7c53a9d45108d37a9bf5246f9e4aaae10cc61064801dcccd20bfd5108347b0f694510e7ece07f96c45ba683b0\n            set hashes(f5-cloud-failover-1.5.0-0.noarch.rpm) 33a7e2d047106bcce681757a65240bfacedd48e13567e05fdb23a4b269d266aa5001f81158c3964dc297f0428db31c9df428002898d190285b349c59422a573b\n            set hashes(f5-cloud-failover-1.6.1-1.noarch.rpm) c1b842da21b8d1ba21b6eb63c8598a9ea9986d5daddc21e4d280e1d6b09d3db1de8ac7de5c84edf07b43e4af03daf8fe747a4048f6573d955206352cde2cec65\n            set hashes(f5-cloud-failover-1.7.1-1.noarch.rpm) 14ff0cd2bb49780cc0ae3021c4fc8fcc096e3fce2258096a4aa026d6d37de728ca7345bfe3a79031e336e74d25a2b40ff28324c2c752bf0ee71b7fc89b6fc8fe\n            set hashes(f5-cloud-failover-1.8.0-0.noarch.rpm) 23086d1cbf3cb24eac7eba2305156c600fa21f1b896321a2fa5225d331d7e41471edb3f5368144d86848a4520b1e005c014485ff451e7da6429053f58bfe8ce4\n            set hashes(f5-cloud-failover-1.9.0-0.noarch.rpm) 09c15377389ac18313370635fb99f9aff05970807cc60bff074f80f664023cfc0d9f5b7f2ed7a8f879deb2da84a034bb9fa9f4e95f9806d644af518db32f1425\n\n            set file_path [lindex $tmsh::argv 1]\n            set file_name [file tail $file_path]\n\n            if {![info exists hashes($file_name)]} {\n                tmsh::log err \"No hash found for $file_name\"\n                exit 1\n            }\n\n            set expected_hash $hashes($file_name)\n            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]\n            if { $expected_hash eq $computed_hash } {\n                exit 0\n            }\n            tmsh::log err \"Hash does not match for $file_path\"\n            exit 1\n        }]} {\n            tmsh::log err {Unexpected error in verifyHash}\n            exit 1\n        }\n    }\n    script-signature m+7sxDnJCigJogWN0raM4nFhOSKad3MeY+xY4ODtP+4D0UA0J/wkJUKgkOVm0ewPJ/FdvjEn5ERh0XD0tFhsSF0kWpQWxtaROeeuLd76y3RTtfrqrnWhp88JcsJXWLDz29mi50SX/yjcKlwlT0RaJn2HZclmFokgTxLQdBcD1UA0JBAJUdAoWAmlR3FVNddqe6NxMAoeOXrjpBW+l0zwPw9d7iWyMCjooauUkIlSVx6MIJvuji4DNmYfh4DnP4rV1fH+8MUFdy4T3yXVc8Kzdn+haMt1cGQcLO8jl2wLRkvrYP35CvyHkwN0nDFWX8+enJP6g8XOjxuC8mcGgBsZyw==\n    signing-key /Common/f5-irule\n}"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/waitThenRun.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "#!/bin/bash",
           "while true; do echo \"waiting for cloud libs install to complete\"",
           "    if [ -f /config/cloud/cloudLibsReady ]; then",
           "        break",
           "    else",
           "        sleep 10",
           "    fi",
           "done",
           "\"$@\""
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       }
      }
     }
    }
   },
   "Properties": {
    "AssociatePublicIpAddress": {
     "Fn::FindInMap": [
      "Transformations",
      "Boolean",
      {
       "Ref": "provisionPublicIP"
      }
     ]
    },
    "BlockDeviceMappings": [
     {
      "DeviceName": "/dev/xvda",
      "Ebs": {
       "DeleteOnTermination": true,
       "VolumeType": "gp2"
      }
     },
     {
      "DeviceName": "/dev/xvdb",
      "NoDevice": true
     }
    ],
    "IamInstanceProfile": {
     "Ref": "BigipAutoScalingInstanceProfile"
    },
    "ImageId": {
     "Fn::If": [
      "noCustomImageId",
      {
       "Fn::FindInMap": [
        "BigipRegionMap",
        {
         "Ref": "AWS::Region"
        },
        {
         "Fn::FindInMap": [
          "AWSBigipThrougput",
          {
           "Ref": "throughput"
          },
          {
           "Ref": "imageName"
          }
         ]
        }
       ]
      },
      {
       "Ref": "customImageId"
      }
     ]
    },
    "InstanceMonitoring": false,
    "InstanceType": {
     "Ref": "instanceType"
    },
    "KeyName": {
     "Ref": "sshKey"
    },
    "SecurityGroups": [
     {
      "Ref": "bigipExternalSecurityGroup"
     }
    ],
    "UserData": {
     "Fn::Base64": {
      "Fn::Join": [
       "",
       [
        "#!/bin/bash -x\n",
        "mkdir -p /var/log/cloud /config/cloud /var/config/rest/downloads\n",
        "/usr/bin/setdb provision.extramb 1000\n",
        "/usr/bin/setdb restjavad.useextramb true\n",
        "cat << EOF >> /config/cloud/runtime-init-config.yaml\n",
        "controls:\n",
        "  logLevel: info\n",
        "  logFilename: /var/log/cloud/bigIpRuntimeInit.log\n",
        "extension_packages:\n",
        "  install_operations:\n",
        "    - extensionType: as3\n",
        "      extensionVersion: 3.34.0\n",
        "      extensionHash: 05a80ec0848dc5b8876b78a8fbee2980d5a1671d635655b3af604dc830d5fed4\n",
        "EOF\n",
        "/usr/bin/curl -fv --retry 1 --connect-timeout 5 -L http://cdn.f5.com/product/cloudsolutions/f5-bigip-runtime-init/v1.4.1/dist/f5-bigip-runtime-init-1.4.1-1.gz.run -o /var/config/rest/downloads/f5-bigip-runtime-init-1.4.1-1.gz.run\n",
        "bash /var/config/rest/downloads/f5-bigip-runtime-init-1.4.1-1.gz.run -- '--cloud aws'\n",
        "f5-bigip-runtime-init --config-file /config/cloud/runtime-init-config.yaml --skip-telemetry\n",
        "/opt/aws/apitools/cfn-init/bin/cfn-init -v -s ",
        {
         "Ref": "AWS::StackId"
        },
        " -r BigipLaunchConfig",
        " --region ",
        {
         "Ref": "AWS::Region"
        },
        "\n"
       ]
      ]
     }
    }
   },
   "Type": "AWS::AutoScaling::LaunchConfiguration"
  },
  "BigipLowCpuAlarm": {
   "DependsOn": "BigipAutoscaleGroup",
   "Properties": {
    "ActionsEnabled": true,
    "AlarmActions": [
     {
      "Ref": "BigipScaleDownPolicy"
     }
    ],
    "AlarmDescription": "CPU usage percentage below average threshold after 10 successive interval of 5 minutes",
    "ComparisonOperator": "LessThanThreshold",
    "EvaluationPeriods": 10,
    "MetricName": "tmm-stat",
    "Namespace": {
     "Ref": "BigipAutoscaleGroup"
    },
    "Period": 300,
    "Statistic": "Average",
    "Threshold": {
     "Ref": "lowCpuThreshold"
    }
   },
   "Type": "AWS::CloudWatch::Alarm"
  },
  "BigipLowbytesAlarm": {
   "DependsOn": "BigipAutoscaleGroup",
   "Properties": {
    "ActionsEnabled": true,
    "AlarmActions": [
     {
      "Ref": "BigipScaleDownPolicy"
     }
    ],
    "AlarmDescription": "Throughput below average threshold for 10 successive intervals of 5 minutes",
    "ComparisonOperator": "LessThanThreshold",
    "EvaluationPeriods": 10,
    "MetricName": "throughput-per-sec",
    "Namespace": {
     "Ref": "BigipAutoscaleGroup"
    },
    "Period": 300,
    "Statistic": "Average",
    "Threshold": {
     "Ref": "scaleDownBytesThreshold"
    }
   },
   "Type": "AWS::CloudWatch::Alarm"
  },
  "BigipScaleDownPolicy": {
   "Properties": {
    "AdjustmentType": "ChangeInCapacity",
    "AutoScalingGroupName": {
     "Ref": "BigipAutoscaleGroup"
    },
    "Cooldown": "1500",
    "ScalingAdjustment": -1
   },
   "Type": "AWS::AutoScaling::ScalingPolicy"
  },
  "BigipScaleUpPolicy": {
   "Properties": {
    "AdjustmentType": "ChangeInCapacity",
    "AutoScalingGroupName": {
     "Ref": "BigipAutoscaleGroup"
    },
    "Cooldown": "1500",
    "ScalingAdjustment": 1
   },
   "Type": "AWS::AutoScaling::ScalingPolicy"
  },
  "S3Bucket": {
   "Properties": {
    "AccessControl": "BucketOwnerFullControl"
   },
   "Type": "AWS::S3::Bucket"
  },
  "SNSTopic": {
   "Properties": {
    "Subscription": [
     {
      "Endpoint": {
       "Ref": "notificationEmail"
      },
      "Protocol": "email"
     }
    ]
   },
   "Type": "AWS::SNS::Topic"
  },
  "SQSQueue": {
   "Properties": {
    "MessageRetentionPeriod": 3600
   },
   "Type": "AWS::SQS::Queue"
  },
  "bigipExternalSecurityGroup": {
   "Properties": {
    "GroupDescription": "Public or External interface rules, including BIG-IP management",
    "SecurityGroupIngress": [
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddress"
      },
      "FromPort": 22,
      "IpProtocol": "tcp",
      "ToPort": 22
     },
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddress"
      },
      "FromPort": {
       "Ref": "managementGuiPort"
      },
      "IpProtocol": "tcp",
      "ToPort": {
       "Ref": "managementGuiPort"
      }
     },
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddressApp"
      },
      "FromPort": 80,
      "IpProtocol": "tcp",
      "ToPort": 80
     },
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddressApp"
      },
      "FromPort": 443,
      "IpProtocol": "tcp",
      "ToPort": 443
     }
    ],
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "application"
      }
     },
     {
      "Key": "Costcenter",
      "Value": {
       "Ref": "costcenter"
      }
     },
     {
      "Key": "Environment",
      "Value": {
       "Ref": "environment"
      }
     },
     {
      "Key": "Group",
      "Value": {
       "Ref": "group"
      }
     },
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "Bigip Security Group: ",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     },
     {
      "Key": "Owner",
      "Value": {
       "Ref": "owner"
      }
     }
    ],
    "VpcId": {
     "Ref": "Vpc"
    }
   },
   "Type": "AWS::EC2::SecurityGroup"
  },
  "bigipSecurityGroupIngressAsmPolicySync": {
   "Properties": {
    "FromPort": 6123,
    "GroupId": {
     "Ref": "bigipExternalSecurityGroup"
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Ref": "bigipExternalSecurityGroup"
    },
    "ToPort": 6128
   },
   "Type": "AWS::EC2::SecurityGroupIngress"
  },
  "bigipSecurityGroupIngressConfigSync": {
   "Properties": {
    "FromPort": 4353,
    "GroupId": {
     "Ref": "bigipExternalSecurityGroup"
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Ref": "bigipExternalSecurityGroup"
    },
    "ToPort": 4353
   },
   "Type": "AWS::EC2::SecurityGroupIngress"
  },
  "bigipSecurityGroupIngressManagementGuiPort": {
   "Properties": {
    "FromPort": {
     "Ref": "managementGuiPort"
    },
    "GroupId": {
     "Ref": "bigipExternalSecurityGroup"
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Ref": "bigipExternalSecurityGroup"
    },
    "ToPort": {
     "Ref": "managementGuiPort"
    }
   },
   "Type": "AWS::EC2::SecurityGroupIngress"
  }
 },
 "Rules": {
  "ValidateDnsMemberIPType": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Equals": [
       {
        "Ref": "dnsMemberIpType"
       },
       "private"
      ]
     },
     "AssertDescription": "The type cannot be public when public IP is not provision (provisionPublicIP is required)"
    }
   ],
   "RuleCondition": {
    "Fn::Equals": [
     "No",
     {
      "Ref": "provisionPublicIP"
     }
    ]
   }
  }
 }
}
