{
 "AWSTemplateFormatVersion": "2010-09-09",
 "Conditions": {
  "noCustomImageId": {
   "Fn::Equals": [
    "OPTIONAL",
    {
     "Ref": "customImageId"
    }
   ]
  },
  "optin": {
   "Fn::Equals": [
    "Yes",
    {
     "Ref": "allowUsageAnalytics"
    }
   ]
  },
  "usePublicIP": {
   "Fn::Equals": [
    "Yes",
    {
     "Ref": "provisionPublicIP"
    }
   ]
  }
 },
 "Description": "Template v5.18.0: Deploys an AWS Auto Scaling group of F5 WAF PAYG instances. Example scaling policies and CloudWatch alarms are associated with the Auto Scaling group.",
 "Mappings": {
  "AWSBigipThrougput": {
   "1000Mbps": {
    "AdvancedWaf": "AdvancedWaf1000Mbps",
    "Best": "Best1000Mbps",
    "PerAppVeAwaf": "PerAppVeAwaf1000Mbps"
   },
   "200Mbps": {
    "AdvancedWaf": "AdvancedWaf200Mbps",
    "Best": "Best200Mbps",
    "PerAppVeAwaf": "PerAppVeAwaf200Mbps"
   },
   "25Mbps": {
    "AdvancedWaf": "AdvancedWaf25Mbps",
    "Best": "Best25Mbps",
    "PerAppVeAwaf": "PerAppVeAwaf25Mbps"
   },
   "5000Mbps": {
    "Best": "Best5000Mbps"
   }
  },
  "BigipRegionMap": {
   "af-south-1": {
    "AdvancedWaf200Mbps": "ami-0ebe9b603383c00ec",
    "AdvancedWaf25Mbps": "ami-011bc921fe461992a",
    "AdvancedWaf3000Mbps": "ami-06ff888f5b94afe08",
    "Best10000Mbps": "ami-058165e0fbd49251a",
    "Best1000Mbps": "ami-04244a26aace277e1",
    "Best200Mbps": "ami-00683ff68067c379f",
    "Best25Mbps": "ami-0285d9633e321aa48",
    "Best5000Mbps": "ami-08cfba0b81483fc7a",
    "Better10000Mbps": "ami-0197d6c97f8621d48",
    "Better1000Mbps": "ami-0ab56aebf69d79783",
    "Better200Mbps": "ami-0f17c29207179e193",
    "Better25Mbps": "ami-0ae983ff817f429b0",
    "Better5000Mbps": "ami-0de4472751ca753f1",
    "Good10000Mbps": "ami-029345b61e615f5ba",
    "Good1000Mbps": "ami-00714736973e6126e",
    "Good200Mbps": "ami-03e2ccf8feb111948",
    "Good25Mbps": "ami-04d2516053fce653f",
    "Good5000Mbps": "ami-0bb7427d8bf671ff1",
    "PerAppVeAwaf200Mbps": "ami-05f76838d56795826",
    "PerAppVeAwaf25Mbps": "ami-08152841c65cc8668"
   },
   "ap-east-1": {
    "AdvancedWaf200Mbps": "ami-09d7b89efd2808627",
    "AdvancedWaf25Mbps": "ami-0d138ad5fd0e0fbb8",
    "AdvancedWaf3000Mbps": "ami-0a05f849abe4de2d6",
    "Best10000Mbps": "ami-018f0fb28a85173bc",
    "Best1000Mbps": "ami-0822623b9accd4773",
    "Best200Mbps": "ami-0ee596456c1292d70",
    "Best25Mbps": "ami-06ed1c5966443a4ce",
    "Best5000Mbps": "ami-0fc3727ae42322221",
    "Better10000Mbps": "ami-0c6da14d05b8aae78",
    "Better1000Mbps": "ami-0ebd9cc74376a9872",
    "Better200Mbps": "ami-07d6be7de06b9a778",
    "Better25Mbps": "ami-0af714d9779ff5380",
    "Better5000Mbps": "ami-0c2e05f2818a8ad73",
    "Good10000Mbps": "ami-05d6e4a6f7b776045",
    "Good1000Mbps": "ami-0c78fc3c41fb6e713",
    "Good200Mbps": "ami-072d2d47e8dfaeb78",
    "Good25Mbps": "ami-00c8c1c5713818c7c",
    "Good5000Mbps": "ami-0a56ff17d3b74034d",
    "PerAppVeAwaf200Mbps": "ami-0efbb42c224922750",
    "PerAppVeAwaf25Mbps": "ami-09552648b85611376"
   },
   "ap-northeast-1": {
    "AdvancedWaf200Mbps": "ami-092d2f6984c9ccef6",
    "AdvancedWaf25Mbps": "ami-0cd4ea9f443534973",
    "AdvancedWaf3000Mbps": "ami-0e765192f4d0098a2",
    "Best10000Mbps": "ami-05ed6589635a9c9ba",
    "Best1000Mbps": "ami-00c8ca7da0bf270dd",
    "Best200Mbps": "ami-0daa6ceb4aa034c81",
    "Best25Mbps": "ami-0eca9f64fd51944db",
    "Best5000Mbps": "ami-0ffe2f51530986ec0",
    "Better10000Mbps": "ami-0e7a24b42e994a314",
    "Better1000Mbps": "ami-07d96b60b9d7d7354",
    "Better200Mbps": "ami-0944151ee8e31d5d6",
    "Better25Mbps": "ami-02076a21e79fe7695",
    "Better5000Mbps": "ami-072def15f3e0a12fc",
    "Good10000Mbps": "ami-0abd35a719c9a0f19",
    "Good1000Mbps": "ami-048fe1970aa5c4a0e",
    "Good200Mbps": "ami-0397b68bd854534fe",
    "Good25Mbps": "ami-0d9d41c710fdb777e",
    "Good5000Mbps": "ami-00f548f2af8cfe93b",
    "PerAppVeAwaf200Mbps": "ami-0dae4cc50bf1dd096",
    "PerAppVeAwaf25Mbps": "ami-0e02a1b8ce093c2d7"
   },
   "ap-northeast-2": {
    "AdvancedWaf200Mbps": "ami-03513a2c5e8597b02",
    "AdvancedWaf25Mbps": "ami-0733de272db5b969f",
    "AdvancedWaf3000Mbps": "ami-0c1b47c9e291bc3c8",
    "Best10000Mbps": "ami-03ec8ff04e0dc58a1",
    "Best1000Mbps": "ami-07ad184ffaf71b648",
    "Best200Mbps": "ami-0b1e49b3f187607ce",
    "Best25Mbps": "ami-0b85ea5a2d564b555",
    "Best5000Mbps": "ami-0634221ce565015e3",
    "Better10000Mbps": "ami-03d8541067c8e7a9e",
    "Better1000Mbps": "ami-08be35a4f2aa26afa",
    "Better200Mbps": "ami-04badfd344d63ba29",
    "Better25Mbps": "ami-0a43198c353b9f174",
    "Better5000Mbps": "ami-0b48491823be35945",
    "Good10000Mbps": "ami-0844992607d605aa5",
    "Good1000Mbps": "ami-0720a35d5b0c4d4ee",
    "Good200Mbps": "ami-08c31e3b3f9e15211",
    "Good25Mbps": "ami-0cdd8150048c04443",
    "Good5000Mbps": "ami-0f7f04840f07db650",
    "PerAppVeAwaf200Mbps": "ami-0480cbd55fd558525",
    "PerAppVeAwaf25Mbps": "ami-02af25a04f8535c18"
   },
   "ap-northeast-3": {
    "AdvancedWaf200Mbps": "ami-08fb83c87265b61ee",
    "AdvancedWaf25Mbps": "ami-07661cf92d188ca35",
    "AdvancedWaf3000Mbps": "ami-08324213f678ab52e",
    "Best10000Mbps": "ami-01e030c1ccae0362e",
    "Best1000Mbps": "ami-030015406dcf3b615",
    "Best200Mbps": "ami-0794667197ee800ea",
    "Best25Mbps": "ami-030e8242c7433d808",
    "Best5000Mbps": "ami-0d5b462829bd13f55",
    "Better10000Mbps": "ami-003166689d33f8b1f",
    "Better1000Mbps": "ami-0276d742ecb54c6d4",
    "Better200Mbps": "ami-0ee67d7176882b04e",
    "Better25Mbps": "ami-0b2e6f3bdf39c177a",
    "Better5000Mbps": "ami-0b404d7018c6ac80e",
    "Good10000Mbps": "ami-0e8a7b75b56da91d1",
    "Good1000Mbps": "ami-0f1a5954d98fb4a5f",
    "Good200Mbps": "ami-0f151e7d404b99264",
    "Good25Mbps": "ami-070bc281fe4bf9f11",
    "Good5000Mbps": "ami-0a0c0c4ce6c08c488",
    "PerAppVeAwaf200Mbps": "ami-037f6e604e53b2a67",
    "PerAppVeAwaf25Mbps": "ami-07babb664f3193bce"
   },
   "ap-south-1": {
    "AdvancedWaf200Mbps": "ami-0f2a07804717de746",
    "AdvancedWaf25Mbps": "ami-0615ce3fb685d6e33",
    "AdvancedWaf3000Mbps": "ami-0036da3755c3f35c9",
    "Best10000Mbps": "ami-0c559ac267bedc09b",
    "Best1000Mbps": "ami-0f220252592dcd423",
    "Best200Mbps": "ami-0e2e0c86e1ec07f25",
    "Best25Mbps": "ami-0e563666c27ce2eac",
    "Best5000Mbps": "ami-01f9618f18f57d2c6",
    "Better10000Mbps": "ami-0c75c2640abbade8a",
    "Better1000Mbps": "ami-06ee62c29b9adbad5",
    "Better200Mbps": "ami-0f94bd19688c4253f",
    "Better25Mbps": "ami-01746c78ab74d166c",
    "Better5000Mbps": "ami-02dcc8242afe8c757",
    "Good10000Mbps": "ami-0576f500a40be15d2",
    "Good1000Mbps": "ami-0c0eb9de639fc9e20",
    "Good200Mbps": "ami-0cfb0af94bacafea3",
    "Good25Mbps": "ami-059d40153061aeff8",
    "Good5000Mbps": "ami-0eaa2c9e11e3929fb",
    "PerAppVeAwaf200Mbps": "ami-098d3bf6421d1db95",
    "PerAppVeAwaf25Mbps": "ami-05e4d42e67a3cdea4"
   },
   "ap-southeast-1": {
    "AdvancedWaf200Mbps": "ami-08a020be8428b206d",
    "AdvancedWaf25Mbps": "ami-08c3ed76e019f2d62",
    "AdvancedWaf3000Mbps": "ami-0734ae2697e4c1d9d",
    "Best10000Mbps": "ami-0a9ad3fbbe0650aa4",
    "Best1000Mbps": "ami-0b0268dbd37226d80",
    "Best200Mbps": "ami-031824b97b7093afd",
    "Best25Mbps": "ami-06b20319b678f177a",
    "Best5000Mbps": "ami-0827ef35474550b67",
    "Better10000Mbps": "ami-0af39b9dd66cc6918",
    "Better1000Mbps": "ami-0e5d3ca31624fb97f",
    "Better200Mbps": "ami-0cff5fda7ed626ad6",
    "Better25Mbps": "ami-0cdc65ca3e27f6142",
    "Better5000Mbps": "ami-06737421c3828d0de",
    "Good10000Mbps": "ami-0f70cf18941afa698",
    "Good1000Mbps": "ami-0f6a051a532b3e226",
    "Good200Mbps": "ami-072e4e5e5b783b09c",
    "Good25Mbps": "ami-01668897599497bb4",
    "Good5000Mbps": "ami-03eab8a1395c6fcad",
    "PerAppVeAwaf200Mbps": "ami-01994544ed0a48af5",
    "PerAppVeAwaf25Mbps": "ami-00edcc6e8d9f93b3b"
   },
   "ap-southeast-2": {
    "AdvancedWaf200Mbps": "ami-00d1467343ee33160",
    "AdvancedWaf25Mbps": "ami-051c82bbb1a9e9cbe",
    "AdvancedWaf3000Mbps": "ami-01b1358e81df52138",
    "Best10000Mbps": "ami-0d1e423ad5384346e",
    "Best1000Mbps": "ami-0878699bc6ba65d52",
    "Best200Mbps": "ami-04fc5ae44c9e29887",
    "Best25Mbps": "ami-0c703d41d4dbb3c86",
    "Best5000Mbps": "ami-019fedbdf68044a00",
    "Better10000Mbps": "ami-0ea84f1bd1a02854e",
    "Better1000Mbps": "ami-0115ce0d7295dc4ed",
    "Better200Mbps": "ami-00ecb8603b98d47a3",
    "Better25Mbps": "ami-0dd08d10492233136",
    "Better5000Mbps": "ami-0c16f714a1d56ccfc",
    "Good10000Mbps": "ami-0ac81aec6869b456c",
    "Good1000Mbps": "ami-0090ed792583b54d9",
    "Good200Mbps": "ami-05ec6f2906f4e2d74",
    "Good25Mbps": "ami-0ae18b8548251254f",
    "Good5000Mbps": "ami-0eb4c754d542cf8dc",
    "PerAppVeAwaf200Mbps": "ami-01e4f57fb42ea701b",
    "PerAppVeAwaf25Mbps": "ami-0ac7f74aa87b0a1b2"
   },
   "ca-central-1": {
    "AdvancedWaf200Mbps": "ami-0aac68a886a9f8a1e",
    "AdvancedWaf25Mbps": "ami-0796e5091d0be3a5f",
    "AdvancedWaf3000Mbps": "ami-08b96d1db2cbb8654",
    "Best10000Mbps": "ami-0481ef1b7a9b39f72",
    "Best1000Mbps": "ami-0935c8aa9da5e9f12",
    "Best200Mbps": "ami-068c52f99ed279630",
    "Best25Mbps": "ami-014828384797b78af",
    "Best5000Mbps": "ami-0f8f72654ff5cba7c",
    "Better10000Mbps": "ami-0f4680b6dd4caa359",
    "Better1000Mbps": "ami-0e72bf5cee15ccb84",
    "Better200Mbps": "ami-0f6a9d1ab61dc5e07",
    "Better25Mbps": "ami-08044183c653316ce",
    "Better5000Mbps": "ami-094dbe6aa925a15ec",
    "Good10000Mbps": "ami-07d984642d5c739ef",
    "Good1000Mbps": "ami-01da5c5afe224161d",
    "Good200Mbps": "ami-0cf578370668d3cc7",
    "Good25Mbps": "ami-0de9f1fe2fbca7b51",
    "Good5000Mbps": "ami-056f93156da57cad2",
    "PerAppVeAwaf200Mbps": "ami-0fa13270b4a8107c6",
    "PerAppVeAwaf25Mbps": "ami-0ef652b4561df121c"
   },
   "eu-central-1": {
    "AdvancedWaf200Mbps": "ami-055ee83c0157adea4",
    "AdvancedWaf25Mbps": "ami-000045fcf62931326",
    "AdvancedWaf3000Mbps": "ami-09816abf0aef9bb80",
    "Best10000Mbps": "ami-01af590e53411be7d",
    "Best1000Mbps": "ami-0dda5f17ece92b4a1",
    "Best200Mbps": "ami-02ac3dbe8966e634f",
    "Best25Mbps": "ami-04698c7a253948104",
    "Best5000Mbps": "ami-0c1f43857ec388d09",
    "Better10000Mbps": "ami-0137415b8cc28b839",
    "Better1000Mbps": "ami-0f49c4ce10012ff36",
    "Better200Mbps": "ami-0df24127ece675fae",
    "Better25Mbps": "ami-0b79ad8a44c76d012",
    "Better5000Mbps": "ami-0b23944ed07349c43",
    "Good10000Mbps": "ami-096ff6222809a5017",
    "Good1000Mbps": "ami-04e659a2a8a12c8aa",
    "Good200Mbps": "ami-0f6115bcf0530c2e0",
    "Good25Mbps": "ami-07a75fb1d4582cff7",
    "Good5000Mbps": "ami-09e5825e7e8bd79d6",
    "PerAppVeAwaf200Mbps": "ami-0b6f806359e475596",
    "PerAppVeAwaf25Mbps": "ami-03b962c415626c3cc"
   },
   "eu-north-1": {
    "AdvancedWaf200Mbps": "ami-0c902067b5a735272",
    "AdvancedWaf25Mbps": "ami-07c8b8d7a674d0241",
    "AdvancedWaf3000Mbps": "ami-0d5dfc691b8bbec7d",
    "Best10000Mbps": "ami-05e472c07990d482a",
    "Best1000Mbps": "ami-08ff20c3d21dc452a",
    "Best200Mbps": "ami-0276a44f7c2eb392f",
    "Best25Mbps": "ami-0aa8cb773a29a33b3",
    "Best5000Mbps": "ami-0bf591636c5256209",
    "Better10000Mbps": "ami-0e5956c3bed250f2e",
    "Better1000Mbps": "ami-0e8995c08e09a270b",
    "Better200Mbps": "ami-08288f3325621a42b",
    "Better25Mbps": "ami-097a9059b38132f9e",
    "Better5000Mbps": "ami-07de43bc36d60a884",
    "Good10000Mbps": "ami-0d0273b29e129137c",
    "Good1000Mbps": "ami-0129d7db967c328b3",
    "Good200Mbps": "ami-031a50c468bcc2f88",
    "Good25Mbps": "ami-00844644664aa0fea",
    "Good5000Mbps": "ami-00bf948e4e8ef6cc7",
    "PerAppVeAwaf200Mbps": "ami-071ec187a010ce476",
    "PerAppVeAwaf25Mbps": "ami-0bc9688ca41dcbf1d"
   },
   "eu-south-1": {
    "AdvancedWaf200Mbps": "ami-0b7587a3b6933cd00",
    "AdvancedWaf25Mbps": "ami-0fb518cf9d6e5ebb4",
    "AdvancedWaf3000Mbps": "ami-07810abee0098a862",
    "Best10000Mbps": "ami-0e13f95fab0955059",
    "Best1000Mbps": "ami-0ebd2b24a8988f836",
    "Best200Mbps": "ami-0a8f33f8bcf7b7b48",
    "Best25Mbps": "ami-0c4b074531b18adeb",
    "Best5000Mbps": "ami-015ab262d6af1864e",
    "Better10000Mbps": "ami-0b99a27035cc1cb30",
    "Better1000Mbps": "ami-0b9beb5a128b3b101",
    "Better200Mbps": "ami-09ebf08dfff83c76d",
    "Better25Mbps": "ami-017598f443856b442",
    "Better5000Mbps": "ami-0008f7182db57e95d",
    "Good10000Mbps": "ami-03b7fd619e795848d",
    "Good1000Mbps": "ami-0af435099cd6f2e6f",
    "Good200Mbps": "ami-0eef0f85964beacfc",
    "Good25Mbps": "ami-00b263a36a1dc03ba",
    "Good5000Mbps": "ami-0b98cd4662d147478",
    "PerAppVeAwaf200Mbps": "ami-07fa403cd4f9c5e07",
    "PerAppVeAwaf25Mbps": "ami-0f573baeb47a00991"
   },
   "eu-west-1": {
    "AdvancedWaf200Mbps": "ami-01b91e958cfee98a6",
    "AdvancedWaf25Mbps": "ami-0658c10370ef586e9",
    "AdvancedWaf3000Mbps": "ami-0787e57b9ab409f13",
    "Best10000Mbps": "ami-03a81f58f8a62c266",
    "Best1000Mbps": "ami-0252b56b71a126656",
    "Best200Mbps": "ami-03c23b8461b6ee38c",
    "Best25Mbps": "ami-073d220b50d143e06",
    "Best5000Mbps": "ami-0a43c3f525fe7e2cf",
    "Better10000Mbps": "ami-040f0e21360629755",
    "Better1000Mbps": "ami-0880beb296627cf45",
    "Better200Mbps": "ami-0e3817c76717704b2",
    "Better25Mbps": "ami-0fc68f8d39bb2c8a0",
    "Better5000Mbps": "ami-09b438d6e1de5f148",
    "Good10000Mbps": "ami-0265c93db95b1fdfb",
    "Good1000Mbps": "ami-04caf03cbc2af27d7",
    "Good200Mbps": "ami-0bf3bbb926a5cdda2",
    "Good25Mbps": "ami-060dfbae5ab4102fb",
    "Good5000Mbps": "ami-06046669cdd2663c4",
    "PerAppVeAwaf200Mbps": "ami-076c746ebf654a436",
    "PerAppVeAwaf25Mbps": "ami-0d760d6b76829e676"
   },
   "eu-west-2": {
    "AdvancedWaf200Mbps": "ami-0424d31f40aaa7a04",
    "AdvancedWaf25Mbps": "ami-07bb07475c86722c7",
    "AdvancedWaf3000Mbps": "ami-09d18d824cd17b201",
    "Best10000Mbps": "ami-02963c179e3bd1aaf",
    "Best1000Mbps": "ami-06e46908e60c5efd2",
    "Best200Mbps": "ami-050683b10be1fc505",
    "Best25Mbps": "ami-0f529f93aad10f7d9",
    "Best5000Mbps": "ami-01e39629cdca6dd86",
    "Better10000Mbps": "ami-04de0ae49ddf2e364",
    "Better1000Mbps": "ami-074b5bca60664945a",
    "Better200Mbps": "ami-0342d067b7a6f3f8d",
    "Better25Mbps": "ami-0e6b55a3005f0181a",
    "Better5000Mbps": "ami-0b12acbd7ad5c6a3f",
    "Good10000Mbps": "ami-03c4c347dbb0cc496",
    "Good1000Mbps": "ami-0695373c6c9a53bb2",
    "Good200Mbps": "ami-0fadf82bc71b1a25f",
    "Good25Mbps": "ami-015823bfe171b976a",
    "Good5000Mbps": "ami-061c550397f734497",
    "PerAppVeAwaf200Mbps": "ami-0f846d0c93504c622",
    "PerAppVeAwaf25Mbps": "ami-0d498583476699b19"
   },
   "eu-west-3": {
    "AdvancedWaf200Mbps": "ami-08f43541532a305ed",
    "AdvancedWaf25Mbps": "ami-066ca06b7371ceda1",
    "AdvancedWaf3000Mbps": "ami-06403aa1843d1846f",
    "Best10000Mbps": "ami-0b91eb9ba0e5a2e38",
    "Best1000Mbps": "ami-00f1ff76fc1d3e3be",
    "Best200Mbps": "ami-00b3c323f4546d48c",
    "Best25Mbps": "ami-0a37ceed172a5c412",
    "Best5000Mbps": "ami-0defdae8b5ff99047",
    "Better10000Mbps": "ami-04de52624874e806c",
    "Better1000Mbps": "ami-07021e5379713f452",
    "Better200Mbps": "ami-0af93b4b0ef9e59fb",
    "Better25Mbps": "ami-039aeb21c95b2eaaa",
    "Better5000Mbps": "ami-096aecd58495261ba",
    "Good10000Mbps": "ami-05a92e128d9858d55",
    "Good1000Mbps": "ami-0c190c2fe63c3e422",
    "Good200Mbps": "ami-06fc534260d938b1e",
    "Good25Mbps": "ami-06882feea15e2cfe5",
    "Good5000Mbps": "ami-0e5bf814cf24cbb26",
    "PerAppVeAwaf200Mbps": "ami-0961d781f2cdc7569",
    "PerAppVeAwaf25Mbps": "ami-029a8d68d561986f7"
   },
   "me-south-1": {
    "AdvancedWaf200Mbps": "ami-05fa0ec2ff86e10e0",
    "AdvancedWaf25Mbps": "ami-026c95894a7243159",
    "AdvancedWaf3000Mbps": "ami-022eac6cba508cf15",
    "Best10000Mbps": "ami-0d57b11161ea5e072",
    "Best1000Mbps": "ami-05a4d3e7c5ea4b41b",
    "Best200Mbps": "ami-008df0889b4a445a3",
    "Best25Mbps": "ami-0dc5564a0e4806147",
    "Best5000Mbps": "ami-062b01bac3114066e",
    "Better10000Mbps": "ami-09aa54b5203929397",
    "Better1000Mbps": "ami-08fd6bc64a04e3141",
    "Better200Mbps": "ami-038402aa4fbdfc1fd",
    "Better25Mbps": "ami-0e190c369bb5d8b11",
    "Better5000Mbps": "ami-06e62a257fed6febd",
    "Good10000Mbps": "ami-0a25928f9414dd731",
    "Good1000Mbps": "ami-0eeaf3d8e0f95de5e",
    "Good200Mbps": "ami-0cde32d42b5de959b",
    "Good25Mbps": "ami-0dd9be766ef97b350",
    "Good5000Mbps": "ami-0ec238f58ce0e52ab",
    "PerAppVeAwaf200Mbps": "ami-0f2ea8ca784acbffc",
    "PerAppVeAwaf25Mbps": "ami-0678d414f6bc7c3df"
   },
   "sa-east-1": {
    "AdvancedWaf200Mbps": "ami-0a47bf096feb1a5e9",
    "AdvancedWaf25Mbps": "ami-0041f111d3eed828e",
    "AdvancedWaf3000Mbps": "ami-02bf27f5d32141e12",
    "Best10000Mbps": "ami-012d00b20dd4207cb",
    "Best1000Mbps": "ami-0f82a7febce33856a",
    "Best200Mbps": "ami-09d6745a3b02a24d1",
    "Best25Mbps": "ami-082a63daa67cb87a8",
    "Best5000Mbps": "ami-0e485a66e05ed76e0",
    "Better10000Mbps": "ami-08dc3a896f8255264",
    "Better1000Mbps": "ami-02582ccd2e95a7e09",
    "Better200Mbps": "ami-016a94b69ce8bb9cd",
    "Better25Mbps": "ami-07bb185801b5a5661",
    "Better5000Mbps": "ami-04e7392f7fd18d41c",
    "Good10000Mbps": "ami-0848e272c301710d0",
    "Good1000Mbps": "ami-0eb18f1c3fba3706d",
    "Good200Mbps": "ami-03b5e8f4d76b3bce4",
    "Good25Mbps": "ami-08211c6d8b3ef930c",
    "Good5000Mbps": "ami-0322aa891d15a0e54",
    "PerAppVeAwaf200Mbps": "ami-0ddab62ec92e69e27",
    "PerAppVeAwaf25Mbps": "ami-01f9a82c85195abd4"
   },
   "us-east-1": {
    "AdvancedWaf200Mbps": "ami-0c1bcf14f499c7ef8",
    "AdvancedWaf25Mbps": "ami-06d200e6a057d9714",
    "AdvancedWaf3000Mbps": "ami-0edf719cd5ac6b3ef",
    "Best10000Mbps": "ami-0f4dada47542be486",
    "Best1000Mbps": "ami-08db730aba1f4f420",
    "Best200Mbps": "ami-001900f39dd6ac291",
    "Best25Mbps": "ami-0cce958798687bceb",
    "Best5000Mbps": "ami-0898e461fb10458ea",
    "Better10000Mbps": "ami-043ee8e36c789c3e1",
    "Better1000Mbps": "ami-044ab25a5983884a3",
    "Better200Mbps": "ami-07cfd77069136c548",
    "Better25Mbps": "ami-0b58fbd038dd29914",
    "Better5000Mbps": "ami-0b2f35312ca5b45fe",
    "Good10000Mbps": "ami-0836caf26d6b28903",
    "Good1000Mbps": "ami-0f0947dff7b18c634",
    "Good200Mbps": "ami-0042142ac1fdf3363",
    "Good25Mbps": "ami-0436f8daab173514d",
    "Good5000Mbps": "ami-04c62d38a87c69d33",
    "PerAppVeAwaf200Mbps": "ami-088b0b222e563eaa8",
    "PerAppVeAwaf25Mbps": "ami-0863f21094e92e41e"
   },
   "us-east-2": {
    "AdvancedWaf200Mbps": "ami-041c3f7795998b1a3",
    "AdvancedWaf25Mbps": "ami-08ef7cba8bca4ce14",
    "AdvancedWaf3000Mbps": "ami-049ca6304734f7843",
    "Best10000Mbps": "ami-09ec01ee9c8e095a1",
    "Best1000Mbps": "ami-00f76269b46d98c06",
    "Best200Mbps": "ami-0452132792ead9fe0",
    "Best25Mbps": "ami-0c23ac51d7c553e87",
    "Best5000Mbps": "ami-0755d18e4876bc889",
    "Better10000Mbps": "ami-08cd9ac17c86bdf03",
    "Better1000Mbps": "ami-0531047aa4fe0303c",
    "Better200Mbps": "ami-03f5f21fdcc6497bb",
    "Better25Mbps": "ami-01442b5592b9376ec",
    "Better5000Mbps": "ami-03b19832f66889ed5",
    "Good10000Mbps": "ami-095e10f47812ce5e7",
    "Good1000Mbps": "ami-0a1ebbdca7183e9b2",
    "Good200Mbps": "ami-05d4e4b9d92269dad",
    "Good25Mbps": "ami-0f1e2968db501bf16",
    "Good5000Mbps": "ami-01146140d6c61edb3",
    "PerAppVeAwaf200Mbps": "ami-06349deadadb551c9",
    "PerAppVeAwaf25Mbps": "ami-0686f8303ec3d8c9a"
   },
   "us-gov-east-1": {
    "AdvancedWaf200Mbps": "ami-09345d19155e2072f",
    "AdvancedWaf25Mbps": "ami-0d72b6960006d0abf",
    "AdvancedWaf3000Mbps": "ami-02cc0d5923740bf34",
    "Best10000Mbps": "ami-02f704a84000c7233",
    "Best1000Mbps": "ami-00659c1a8b03908af",
    "Best200Mbps": "ami-0f2a718915c8af2dc",
    "Best25Mbps": "ami-0cf0af03fcd409f12",
    "Best5000Mbps": "ami-03e257e34cfb2aa24",
    "Better10000Mbps": "ami-0fc70e14efef7687a",
    "Better1000Mbps": "ami-0a7b83dc58ee44b64",
    "Better200Mbps": "ami-0285602ba72101284",
    "Better25Mbps": "ami-0b1a0f06f5f2cfb67",
    "Better5000Mbps": "ami-044ce3d64585776ae",
    "Good10000Mbps": "ami-0f1e6ed2ed0f903e1",
    "Good1000Mbps": "ami-053760b7639fa7bd4",
    "Good200Mbps": "ami-067324118f2139a91",
    "Good25Mbps": "ami-0cdfbca2e90ecec63",
    "Good5000Mbps": "ami-0e08d4509f1cce69d",
    "PerAppVeAwaf200Mbps": "ami-0835c4fcb1379527a",
    "PerAppVeAwaf25Mbps": "ami-05439ba343568f839"
   },
   "us-gov-west-1": {
    "AdvancedWaf200Mbps": "ami-059726b11bdad0073",
    "AdvancedWaf25Mbps": "ami-0f4df72a86dc5b8db",
    "AdvancedWaf3000Mbps": "ami-04dbaa62a2748adea",
    "Best10000Mbps": "ami-0050465b00df95b2d",
    "Best1000Mbps": "ami-043b0e9564ebc1f61",
    "Best200Mbps": "ami-03de744fd2f6761f4",
    "Best25Mbps": "ami-089e79f388a96e2b3",
    "Best5000Mbps": "ami-05a1467f88ed96bdb",
    "Better10000Mbps": "ami-0136ecae3b6ab4197",
    "Better1000Mbps": "ami-06661d0982170d085",
    "Better200Mbps": "ami-00986d802e32e7e7b",
    "Better25Mbps": "ami-0173e02a115d4d84a",
    "Better5000Mbps": "ami-0e268a34772e022e2",
    "Good10000Mbps": "ami-035e5f678284d1515",
    "Good1000Mbps": "ami-00a9d0fb31b7ff347",
    "Good200Mbps": "ami-00e864d2ffdb1d6ad",
    "Good25Mbps": "ami-032f0bb442b19131e",
    "Good5000Mbps": "ami-0f5a2effbe4b377a8",
    "PerAppVeAwaf200Mbps": "ami-0fda5fe9777961cc1",
    "PerAppVeAwaf25Mbps": "ami-009dbe0264b8daaf8"
   },
   "us-west-1": {
    "AdvancedWaf200Mbps": "ami-07e59ccc4964a72b9",
    "AdvancedWaf25Mbps": "ami-0969393fd6bb2ef5e",
    "AdvancedWaf3000Mbps": "ami-045a3f93be44c0cae",
    "Best10000Mbps": "ami-04cd48612b393447d",
    "Best1000Mbps": "ami-0bf24f93ad3e1fb52",
    "Best200Mbps": "ami-0f3d6729c46fab43a",
    "Best25Mbps": "ami-056b142fdbb0439e0",
    "Best5000Mbps": "ami-02bc33944230bb4c6",
    "Better10000Mbps": "ami-00dc79dbaa13644ec",
    "Better1000Mbps": "ami-074eb1c5313ac71ae",
    "Better200Mbps": "ami-07cb28d0331ba214f",
    "Better25Mbps": "ami-0b6094e26430d55d5",
    "Better5000Mbps": "ami-0ee1cb9dfb26752c2",
    "Good10000Mbps": "ami-03d918d752730699c",
    "Good1000Mbps": "ami-0aaf6d3eda4fbaae6",
    "Good200Mbps": "ami-07bf67764bb11bc52",
    "Good25Mbps": "ami-00fc3ba15f55c24ca",
    "Good5000Mbps": "ami-09d018a734ff9cd19",
    "PerAppVeAwaf200Mbps": "ami-0f5a7b2630fa12546",
    "PerAppVeAwaf25Mbps": "ami-03e1bd352eaeea6f1"
   },
   "us-west-2": {
    "AdvancedWaf200Mbps": "ami-0f79a1f45fc49778d",
    "AdvancedWaf25Mbps": "ami-0626fd6a58acaa564",
    "AdvancedWaf3000Mbps": "ami-08e42f0b497d08997",
    "Best10000Mbps": "ami-0f5033b232d3ff650",
    "Best1000Mbps": "ami-09a55ffefb8fa7824",
    "Best200Mbps": "ami-07435a6addc5658f0",
    "Best25Mbps": "ami-09e9ec64fb0e02f5c",
    "Best5000Mbps": "ami-09da1cbc1fe18e35b",
    "Better10000Mbps": "ami-0bec4a24a5d8759c4",
    "Better1000Mbps": "ami-0040252e1b0189ebd",
    "Better200Mbps": "ami-04f9591b77e12f5dc",
    "Better25Mbps": "ami-02d032d75622ffa56",
    "Better5000Mbps": "ami-0d1017603ee77c743",
    "Good10000Mbps": "ami-0f19a219fadf6a15d",
    "Good1000Mbps": "ami-0fc972346a48a2c38",
    "Good200Mbps": "ami-03550e6ef8d68669b",
    "Good25Mbps": "ami-004efe6f52dc61ab5",
    "Good5000Mbps": "ami-04ba59015f96912f7",
    "PerAppVeAwaf200Mbps": "ami-0c0b1be2a2d16c57a",
    "PerAppVeAwaf25Mbps": "ami-0718047a84add93e1"
   }
  },
  "Transformations": {
   "Boolean": {
    "No": "false",
    "Yes": "true"
   }
  }
 },
 "Metadata": {
  "AWS::CloudFormation::Interface": {
   "ParameterGroups": [
    {
     "Label": {
      "default": "DEPLOYMENT"
     },
     "Parameters": [
      "deploymentName"
     ]
    },
    {
     "Label": {
      "default": "NETWORKING CONFIGURATION"
     },
     "Parameters": [
      "Vpc",
      "availabilityZones",
      "subnets",
      "restrictedSrcAddress",
      "restrictedSrcAddressApp",
      "dnsMemberIpType",
      "dnsMemberPort",
      "dnsProviderHost",
      "dnsProviderPort",
      "dnsProviderUser",
      "dnsPasswordS3Arn",
      "dnsProviderPool",
      "dnsProviderDataCenter",
      "provisionPublicIP"
     ]
    },
    {
     "Label": {
      "default": "INSTANCE CONFIGURATION"
     },
     "Parameters": [
      "sshKey",
      "instanceType",
      "throughput",
      "imageName",
      "customImageId",
      "adminUsername",
      "managementGuiPort",
      "timezone",
      "ntpServer",
      "bigIpModules"
     ]
    },
    {
     "Label": {
      "default": "AUTO SCALING CONFIGURATION"
     },
     "Parameters": [
      "scalingMinSize",
      "scalingMaxSize",
      "scaleDownBytesThreshold",
      "scaleUpBytesThreshold",
      "lowCpuThreshold",
      "highCpuThreshold",
      "notificationEmail"
     ]
    },
    {
     "Label": {
      "default": "VIRTUAL SERVICE CONFIGURATION"
     },
     "Parameters": [
      "virtualServicePort",
      "applicationPort",
      "appInternalDnsName",
      "applicationPoolTagKey",
      "applicationPoolTagValue",
      "declarationUrl",
      "policyLevel"
     ]
    },
    {
     "Label": {
      "default": "TAGS"
     },
     "Parameters": [
      "application",
      "environment",
      "group",
      "owner",
      "costcenter"
     ]
    },
    {},
    {
     "Label": {
      "default": "TEMPLATE ANALYTICS"
     },
     "Parameters": [
      "allowUsageAnalytics",
      "allowPhoneHome"
     ]
    }
   ],
   "ParameterLabels": {
    "Vpc": {
     "default": "VPC ID"
    },
    "adminUsername": {
     "default": "BIG-IP Admin User for clustering"
    },
    "allowPhoneHome": {
     "default": "Send Anonymous Device Statistics to F5"
    },
    "allowUsageAnalytics": {
     "default": "Send Anonymous Template Statistics to F5"
    },
    "appInternalDnsName": {
     "default": "Application Pool DNS"
    },
    "application": {
     "default": "Application"
    },
    "applicationPoolTagKey": {
     "default": "Application Pool Tag Key"
    },
    "applicationPoolTagValue": {
     "default": "Application Pool Tag Value"
    },
    "applicationPort": {
     "default": "Application Pool Member Port"
    },
    "availabilityZones": {
     "default": "Availability Zone(s)"
    },
    "bigIpModules": {
     "default": "BIG-IP Modules"
    },
    "costcenter": {
     "default": "Cost Center"
    },
    "customImageId": {
     "default": "Custom Image Id"
    },
    "declarationUrl": {
     "default": "AS3 Declaration URL"
    },
    "deploymentName": {
     "default": "Deployment Name"
    },
    "dnsMemberIpType": {
     "default": "DNS Member IP Type (public | private)"
    },
    "dnsMemberPort": {
     "default": "DNS Member Port"
    },
    "dnsPasswordS3Arn": {
     "default": "S3 ARN of the BIG-IP DNS Password File"
    },
    "dnsProviderDataCenter": {
     "default": "GSLB Datacenter on BIG-IP DNS"
    },
    "dnsProviderHost": {
     "default": "BIG-IP DNS Management IP address (or hostname)"
    },
    "dnsProviderPool": {
     "default": "GSLB Pool on BIG-IP DNS"
    },
    "dnsProviderPort": {
     "default": "BIG-IP DNS Management Port"
    },
    "dnsProviderUser": {
     "default": "BIG-IP DNS user for updating DNS"
    },
    "environment": {
     "default": "Environment"
    },
    "group": {
     "default": "Group"
    },
    "highCpuThreshold": {
     "default": "High CPU Percentage Threshold"
    },
    "imageName": {
     "default": "F5 Image Name"
    },
    "instanceType": {
     "default": "AWS Instance Size"
    },
    "lowCpuThreshold": {
     "default": "Low CPU Percentage Threshold"
    },
    "managementGuiPort": {
     "default": "Management Port"
    },
    "notificationEmail": {
     "default": "Notification Email"
    },
    "ntpServer": {
     "default": "NTP Server"
    },
    "owner": {
     "default": "Owner"
    },
    "policyLevel": {
     "default": "Web Application Firewall Policy Level"
    },
    "provisionPublicIP": {
     "default": "Provision Public IP addresses for the BIG-IP interfaces"
    },
    "restrictedSrcAddress": {
     "default": "Restricted Source Address to BIG-IP"
    },
    "restrictedSrcAddressApp": {
     "default": "Restricted Source Address to Application"
    },
    "scaleDownBytesThreshold": {
     "default": "Scale Down Bytes Threshold"
    },
    "scaleUpBytesThreshold": {
     "default": "Scale Up Bytes Threshold"
    },
    "scalingMaxSize": {
     "default": "Maximum Instances"
    },
    "scalingMinSize": {
     "default": "Minimum Instances"
    },
    "sshKey": {
     "default": "SSH Key Name"
    },
    "subnets": {
     "default": "Subnet ID(s)"
    },
    "throughput": {
     "default": "Maximum Throughput"
    },
    "timezone": {
     "default": "Timezone (Olson)"
    },
    "virtualServicePort": {
     "default": "Virtual Service Port"
    }
   }
  },
  "Version": "5.18.0"
 },
 "Outputs": {
  "bigipAutoscaleGroup": {
   "Description": "BIG-IP Autoscale Group",
   "Value": {
    "Ref": "BigipAutoscaleGroup"
   }
  },
  "bigipExternalSecurityGroup": {
   "Description": "BIG-IP Security Group (External or Public)",
   "Value": {
    "Ref": "bigipExternalSecurityGroup"
   }
  },
  "s3Bucket": {
   "Description": "BIG-IP S3 Bucket",
   "Value": {
    "Ref": "S3Bucket"
   }
  }
 },
 "Parameters": {
  "Vpc": {
   "ConstraintDescription": "This must be an existing VPC within the working region.",
   "Type": "AWS::EC2::VPC::Id"
  },
  "adminUsername": {
   "AllowedPattern": "[a-zA-Z0-9._-]+",
   "ConstraintDescription": "Verify your BIG-IP admin username. Note that the user name can contain only alphanumeric characters, periods ( . ), underscores ( _ ), or hyphens ( - ). The user name cannot be any of the following: adm, apache, bin, daemon, guest, lp, mail, manager, mysql, named, nobody, ntp, operator, partition, password, pcap, postfix, radvd, root, rpc, rpm, sshd, syscheck, tomcat, uucp, or vcsa.",
   "Default": "cluster-admin",
   "Description": "BIG-IP Admin User for clustering",
   "MaxLength": 255,
   "MinLength": 1,
   "Type": "String"
  },
  "allowPhoneHome": {
   "AllowedValues": [
    "Yes",
    "No"
   ],
   "Default": "Yes",
   "Description": "This deployment can send anonymous device statistics to F5 to help us determine how to improve our solutions. If you select **No** statistics are not sent.",
   "Type": "String"
  },
  "allowUsageAnalytics": {
   "AllowedValues": [
    "Yes",
    "No"
   ],
   "Default": "Yes",
   "Description": "This deployment can send anonymous template statistics to F5 to help us determine how to improve our solutions. If you select **No** statistics are not sent.",
   "Type": "String"
  },
  "appInternalDnsName": {
   "Default": "www.example.com",
   "Description": "DNS name poolapp.example.com for the application pool.  This is not required if you are using the Service Discovery feature.",
   "Type": "String"
  },
  "application": {
   "Default": "f5app",
   "Description": "Name of the Application Tag",
   "Type": "String"
  },
  "applicationPoolTagKey": {
   "Default": "default",
   "Description": "This is used for the Service Discovery feature. If you specify a non-default value here, the template automatically discovers the pool members you have tagged with this key and the value you specify next.",
   "Type": "String"
  },
  "applicationPoolTagValue": {
   "Default": "default",
   "Description": "This is used for the Service Discovery feature. If you specify a non-default value here, the template automatically discovers the pool members you have tagged with the key you specified and this value.",
   "Type": "String"
  },
  "applicationPort": {
   "ConstraintDescription": "Must be a valid port number (1-65535).",
   "Default": 80,
   "Description": "Port for the application pool member on BIG-IP VE",
   "MaxValue": 65535,
   "MinValue": 1,
   "Type": "Number"
  },
  "availabilityZones": {
   "Description": "Availability Zones where you want to deploy BIG-IP VEs (we recommend at least 2)",
   "Type": "List<AWS::EC2::AvailabilityZone::Name>"
  },
  "bigIpModules": {
   "Default": "ltm:nominal,asm:nominal",
   "Description": "Comma separated list of modules and levels to provision, for example: ltm:nominal,asm:nominal",
   "Type": "String"
  },
  "costcenter": {
   "Default": "f5costcenter",
   "Description": "Name of the Cost Center Tag",
   "Type": "String"
  },
  "customImageId": {
   "ConstraintDescription": "Must be a valid AMI Id",
   "Default": "OPTIONAL",
   "Description": "If you would like to deploy using a custom BIG-IP image, provide the AMI Id.  **Note**: Unless specifically required, leave the default of **OPTIONAL**",
   "MaxLength": 255,
   "MinLength": 1,
   "Type": "String"
  },
  "declarationUrl": {
   "AllowedPattern": "^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$|^none$|^default$",
   "Default": "default",
   "Description": "URL for the AS3 declaration JSON file to be deployed. If left at **default**, the recommended F5 application service configuration will be applied. Enter **none** to deploy without a service configuration.",
   "Type": "String"
  },
  "deploymentName": {
   "Default": "example",
   "Description": "Name the template uses to create object names",
   "MaxLength": 25,
   "Type": "String"
  },
  "dnsMemberIpType": {
   "Description": "The IP type (public | private) to add as the record when updating the DNS provider.",
   "Type": "String"
  },
  "dnsMemberPort": {
   "Description": "The port for the DNS member to use for monitoring the members status.",
   "Type": "Number"
  },
  "dnsPasswordS3Arn": {
   "ConstraintDescription": "Verify the S3 ARN of BIG-IP DNS management password file",
   "Description": "S3 ARN of the BIG-IP DNS management password file. e.g. arn:aws:s3:::bucket_name/full_path_to_file for public regions. For GovCloud (US) region, start with arn:aws-us-gov:s3. For China region, start with arn:aws-cn:s3.",
   "MaxLength": "255",
   "MinLength": "1",
   "Type": "String"
  },
  "dnsProviderDataCenter": {
   "Description": "The GSLB datacenter on the BIG-IP DNS system to use when creating GSLB server(s). Note: If the datacenter provided does not exist the template will create one with the value given.",
   "Type": "String"
  },
  "dnsProviderHost": {
   "Description": "The management IP address (or hostname) for the DNS provider to use when updating DNS.",
   "Type": "String"
  },
  "dnsProviderPool": {
   "Description": "The GSLB pool on the BIG-IP DNS system to populate.",
   "Type": "String"
  },
  "dnsProviderPort": {
   "Description": "The management port for the DNS provider to use when updating DNS.",
   "Type": "Number"
  },
  "dnsProviderUser": {
   "Description": "The management username for the DNS provider to use when updating DNS.",
   "Type": "String"
  },
  "environment": {
   "Default": "f5env",
   "Description": "Name of the Environment Tag",
   "Type": "String"
  },
  "group": {
   "Default": "f5group",
   "Description": "Name of the Group Tag",
   "Type": "String"
  },
  "highCpuThreshold": {
   "ConstraintDescription": "Select a value between 0 to 100",
   "Default": 80,
   "Description": "High CPU Percentage threshold to begin scaling up BIG-IP VE instances",
   "MaxValue": 100,
   "MinValue": 0,
   "Type": "Number"
  },
  "imageName": {
   "AllowedValues": [
    "Best",
    "AdvancedWaf",
    "PerAppVeAwaf"
   ],
   "ConstraintDescription": "Must be a valid F5 BIG-IP VE image type",
   "Default": "Best",
   "Description": "F5 BIG-IP Performance Type",
   "Type": "String"
  },
  "instanceType": {
   "AllowedValues": [
    "m3.2xlarge",
    "m4.xlarge",
    "m4.2xlarge",
    "m4.4xlarge",
    "m4.10xlarge",
    "m5.large",
    "t3.large",
    "m5.xlarge",
    "m5.2xlarge",
    "m5.4xlarge",
    "c3.4xlarge",
    "c3.8xlarge",
    "c4.4xlarge",
    "c4.8xlarge",
    "c5.large",
    "c5.xlarge",
    "c5.2xlarge",
    "c5.4xlarge",
    "cc2.8xlarge",
    "c5n.2xlarge",
    "c5n.4xlarge"
   ],
   "ConstraintDescription": "Must be a valid EC2 instance type for BIG-IP",
   "Default": "m3.2xlarge",
   "Description": "AWS instance type",
   "Type": "String"
  },
  "lowCpuThreshold": {
   "ConstraintDescription": "Select a value between 0 to 100",
   "Default": 0,
   "Description": "Low CPU Percentage threshold to begin scaling down BIG-IP VE instances",
   "MaxValue": 100,
   "MinValue": 0,
   "Type": "Number"
  },
  "managementGuiPort": {
   "ConstraintDescription": "Must be a valid, unused port on the BIG-IP.",
   "Default": "8443",
   "Description": "Port for the BIG-IP management Configuration utility",
   "Type": "Number"
  },
  "notificationEmail": {
   "AllowedPattern": ".+@.+",
   "ConstraintDescription": "Must be a valid email address.",
   "Description": "Valid email address to send Auto Scaling event notifications",
   "Type": "String"
  },
  "ntpServer": {
   "Default": "0.pool.ntp.org",
   "Description": "NTP server for this implementation",
   "Type": "String"
  },
  "owner": {
   "Default": "f5owner",
   "Description": "Name of the Owner Tag",
   "Type": "String"
  },
  "policyLevel": {
   "AllowedValues": [
    "low",
    "medium",
    "high"
   ],
   "ConstraintDescription": "Select the WAF Policy Level you want to use",
   "Default": "high",
   "Description": "WAF Policy Level you want to use to protect the applications",
   "Type": "String"
  },
  "provisionPublicIP": {
   "AllowedValues": [
    "Yes",
    "No"
   ],
   "Default": "Yes",
   "Description": "Whether or not to provision Public IP Addresses for the BIG-IP Network Interfaces. By Default no Public IP addresses are provisioned.",
   "Type": "String"
  },
  "restrictedSrcAddress": {
   "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
   "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x.",
   "Description": " The IP address range used to SSH and access managment GUI on the EC2 instances",
   "MaxLength": "18",
   "MinLength": "9",
   "Type": "String"
  },
  "restrictedSrcAddressApp": {
   "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
   "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x.",
   "Description": " The IP address range that can be used to access web traffic (80/443) to the EC2 instances",
   "MaxLength": "18",
   "MinLength": "9",
   "Type": "String"
  },
  "scaleDownBytesThreshold": {
   "Default": 10000,
   "Description": "Incoming bytes threshold to begin scaling down BIG-IP VE instances",
   "Type": "Number"
  },
  "scaleUpBytesThreshold": {
   "Default": 35000,
   "Description": "Incoming bytes threshold to begin scaling up BIG-IP VE instances",
   "Type": "Number"
  },
  "scalingMaxSize": {
   "ConstraintDescription": "Must be a number between 2-8",
   "Default": 3,
   "Description": "Maximum number of BIG-IP instances (2-8) that can be created in the Auto Scale Group",
   "MaxValue": 8,
   "MinValue": 2,
   "Type": "Number"
  },
  "scalingMinSize": {
   "ConstraintDescription": "Must be a number between 1-8",
   "Default": 1,
   "Description": "Minimum number of BIG-IP instances (1-8) you want available in the Auto Scale Group",
   "MaxValue": 8,
   "MinValue": 1,
   "Type": "Number"
  },
  "sshKey": {
   "Description": "EC2 KeyPair to enable SSH access to the BIG-IP instance",
   "Type": "AWS::EC2::KeyPair::KeyName"
  },
  "subnets": {
   "ConstraintDescription": "The subnet IDs must be within an existing VPC",
   "Description": "Public or external subnets for the availability zones",
   "Type": "List<AWS::EC2::Subnet::Id>"
  },
  "throughput": {
   "AllowedValues": [
    "25Mbps",
    "200Mbps",
    "1000Mbps",
    "5000Mbps"
   ],
   "ConstraintDescription": "Select the BIG-IP throughput you want to use",
   "Default": "1000Mbps",
   "Description": "Maximum amount of throughput for BIG-IP VE",
   "Type": "String"
  },
  "timezone": {
   "Default": "UTC",
   "Description": "Enter the Olson timezone string from /usr/share/zoneinfo. The default is 'UTC'. See the TZ column here (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) for legal values. For example, 'US/Eastern'.",
   "Type": "String"
  },
  "virtualServicePort": {
   "ConstraintDescription": "Must be a valid port number (1-65535).",
   "Default": 80,
   "Description": "Port for the virtual service on BIG-IP VE",
   "MaxValue": 65535,
   "MinValue": 1,
   "Type": "Number"
  }
 },
 "Resources": {
  "BigipAutoScalingAccessRole": {
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "ec2.amazonaws.com"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Path": "/",
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "s3:ListBucket"
         ],
         "Effect": "Allow",
         "Resource": {
          "Fn::Join": [
           "",
           [
            "arn:*:s3:::",
            {
             "Ref": "S3Bucket"
            }
           ]
          ]
         }
        },
        {
         "Action": [
          "s3:PutObject",
          "s3:GetObject",
          "s3:DeleteObject"
         ],
         "Effect": "Allow",
         "Resource": {
          "Fn::Join": [
           "",
           [
            "arn:*:s3:::",
            {
             "Ref": "S3Bucket"
            },
            "/*"
           ]
          ]
         }
        },
        {
         "Action": [
          "sqs:SendMessage",
          "sqs:ReceiveMessage",
          "sqs:DeleteMessage"
         ],
         "Effect": "Allow",
         "Resource": {
          "Fn::GetAtt": [
           "SQSQueue",
           "Arn"
          ]
         }
        },
        {
         "Action": [
          "autoscaling:DescribeAutoScalingGroups",
          "autoscaling:DescribeAutoScalingInstances",
          "autoscaling:SetInstanceProtection",
          "ec2:DescribeInstances",
          "ec2:DescribeInstanceStatus",
          "ec2:DescribeAddresses",
          "ec2:AssociateAddress",
          "ec2:DisassociateAddress",
          "ec2:DescribeSubnets",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeNetworkInterfaceAttribute",
          "ec2:DescribeRouteTables",
          "ec2:AssignPrivateIpAddresses",
          "ec2:DescribeTags",
          "ec2:CreateTags",
          "ec2:DeleteTags",
          "cloudwatch:PutMetricData",
          "cloudformation:ListStackResources",
          "cloudformation:SignalResource"
         ],
         "Effect": "Allow",
         "Resource": [
          "*"
         ]
        },
        {
         "Action": [
          "s3:GetObject"
         ],
         "Effect": "Allow",
         "Resource": {
          "Ref": "dnsPasswordS3Arn"
         }
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "BigipAutoScalingAcccessPolicy"
     }
    ]
   },
   "Type": "AWS::IAM::Role"
  },
  "BigipAutoScalingInstanceProfile": {
   "Properties": {
    "Path": "/",
    "Roles": [
     {
      "Ref": "BigipAutoScalingAccessRole"
     }
    ]
   },
   "Type": "AWS::IAM::InstanceProfile"
  },
  "BigipAutoscaleGroup": {
   "CreationPolicy": {
    "ResourceSignal": {
     "Count": {
      "Ref": "scalingMinSize"
     },
     "Timeout": "PT30M"
    }
   },
   "Properties": {
    "Cooldown": "1500",
    "DesiredCapacity": {
     "Ref": "scalingMinSize"
    },
    "HealthCheckGracePeriod": 1500,
    "HealthCheckType": "EC2",
    "LaunchConfigurationName": {
     "Ref": "BigipLaunchConfig"
    },
    "MaxSize": {
     "Ref": "scalingMaxSize"
    },
    "MetricsCollection": [
     {
      "Granularity": "1Minute"
     }
    ],
    "MinSize": {
     "Ref": "scalingMinSize"
    },
    "NotificationConfigurations": [
     {
      "NotificationTypes": [
       "autoscaling:EC2_INSTANCE_LAUNCH",
       "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
       "autoscaling:EC2_INSTANCE_TERMINATE",
       "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
      ],
      "TopicARN": {
       "Ref": "SNSTopic"
      }
     }
    ],
    "Tags": [
     {
      "Key": "Application",
      "PropagateAtLaunch": true,
      "Value": {
       "Ref": "application"
      }
     },
     {
      "Key": "Costcenter",
      "PropagateAtLaunch": true,
      "Value": {
       "Ref": "costcenter"
      }
     },
     {
      "Key": "Environment",
      "PropagateAtLaunch": true,
      "Value": {
       "Ref": "environment"
      }
     },
     {
      "Key": "Group",
      "PropagateAtLaunch": true,
      "Value": {
       "Ref": "group"
      }
     },
     {
      "Key": "Name",
      "PropagateAtLaunch": true,
      "Value": {
       "Fn::Join": [
        "",
        [
         "BIG-IP Autoscale Instance: ",
         {
          "Ref": "deploymentName"
         }
        ]
       ]
      }
     },
     {
      "Key": "Owner",
      "PropagateAtLaunch": true,
      "Value": {
       "Ref": "owner"
      }
     }
    ],
    "VPCZoneIdentifier": {
     "Ref": "subnets"
    }
   },
   "Type": "AWS::AutoScaling::AutoScalingGroup",
   "UpdatePolicy": {
    "AutoScalingRollingUpdate": {
     "MaxBatchSize": 1,
     "MinInstancesInService": 1,
     "PauseTime": "PT30M"
    }
   }
  },
  "BigipHighCpuAlarm": {
   "DependsOn": "BigipAutoscaleGroup",
   "Properties": {
    "ActionsEnabled": true,
    "AlarmActions": [
     {
      "Ref": "BigipScaleUpPolicy"
     }
    ],
    "AlarmDescription": "CPU usage percentage exceeds average threshold after 1 successive interval of 1 minute",
    "ComparisonOperator": "GreaterThanThreshold",
    "EvaluationPeriods": 1,
    "MetricName": "tmm-stat",
    "Namespace": {
     "Ref": "BigipAutoscaleGroup"
    },
    "Period": 60,
    "Statistic": "Average",
    "Threshold": {
     "Ref": "highCpuThreshold"
    }
   },
   "Type": "AWS::CloudWatch::Alarm"
  },
  "BigipHighbytesAlarm": {
   "DependsOn": "BigipAutoscaleGroup",
   "Properties": {
    "ActionsEnabled": true,
    "AlarmActions": [
     {
      "Ref": "BigipScaleUpPolicy"
     }
    ],
    "AlarmDescription": "Throughput exceeds average threshold after 1 successive interval of 1 minute",
    "ComparisonOperator": "GreaterThanThreshold",
    "EvaluationPeriods": 1,
    "MetricName": "throughput-per-sec",
    "Namespace": {
     "Ref": "BigipAutoscaleGroup"
    },
    "Period": 60,
    "Statistic": "Average",
    "Threshold": {
     "Ref": "scaleUpBytesThreshold"
    }
   },
   "Type": "AWS::CloudWatch::Alarm"
  },
  "BigipLaunchConfig": {
   "Metadata": {
    "AWS::CloudFormation::Init": {
     "config": {
      "commands": {
       "000-disable-1nicautoconfig": {
        "command": "/usr/bin/setdb provision.1nicautoconfig disable"
       },
       "001-rest-provision-extramb": {
        "command": "/usr/bin/setdb provision.extramb 1000"
       },
       "002-rest-use-extramb": {
        "command": "/usr/bin/setdb restjavad.useextramb true"
       },
       "003-rest-post": {
        "command": "/usr/bin/curl -s -f -u admin: -H \"Content-Type: application/json\" -d '{\"maxMessageBodySize\":134217728}' -X POST http://localhost:8100/mgmt/shared/server/messaging/settings/8100 | jq ."
       },
       "004-rest-restart": {
        "command": "bigstart restart restjavad restnoded"
       },
       "010-install-libs": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "mkdir -p /var/log/cloud/aws;",
           "nohup /config/installCloudLibs.sh",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "015-network-config": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           "--file /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/aws/1nicSetup.sh",
           "--cwd /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/aws",
           "--log-level silly",
           "-o /var/log/cloud/aws/1nicSetup.log",
           "--signal NETWORK_CONFIG_DONE",
           "&>> /var/log/cloud/aws/install.log < /dev/null",
           "&"
          ]
         ]
        }
       },
       "017-set-master-key": {
        "command": {
         "Fn::Join": [
          "",
          [
           "nohup /config/waitThenRun.sh",
           " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           " --signal MASTER_KEY_CONFIGURED",
           " --wait-for NETWORK_CONFIG_DONE",
           " --file f5-rest-node",
           " --cl-args '/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/setMasterKey --log-level silly --cloud aws --provider-options s3Bucket:",
           {
            "Ref": "S3Bucket"
           },
           ",mgmtPort:",
           {
            "Ref": "managementGuiPort"
           },
           "' --log-level silly",
           " -o /var/log/cloud/aws/setMasterKey.log",
           " &>> /var/log/cloud/aws/install.log < /dev/null",
           " &"
          ]
         ]
        }
       },
       "020-generate-password": {
        "command": {
         "Fn::Join": [
          "",
          [
           "nohup /config/waitThenRun.sh",
           " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           " --signal PASSWORD_CREATED",
           " --wait-for MASTER_KEY_CONFIGURED",
           " --file f5-rest-node",
           " --cl-args '/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/generatePassword --file /config/cloud/aws/.adminPassword --encrypt --include-special-characters'",
           " --log-level silly",
           " -o /var/log/cloud/aws/generatePassword.log",
           " &>> /var/log/cloud/aws/install.log < /dev/null",
           " &"
          ]
         ]
        }
       },
       "030-create-admin-user": {
        "command": {
         "Fn::Join": [
          "",
          [
           "nohup /config/waitThenRun.sh",
           " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           " --wait-for PASSWORD_CREATED",
           " --signal ADMIN_CREATED",
           " --file /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/createUser.sh",
           " --cl-args '--user ",
           {
            "Ref": "adminUsername"
           },
           " --password-file /config/cloud/aws/.adminPassword",
           " --password-encrypted",
           "'",
           " --log-level silly",
           " -o /var/log/cloud/aws/createUser.log",
           " &>> /var/log/cloud/aws/install.log < /dev/null",
           " &"
          ]
         ]
        }
       },
       "050-onboard-BIG-IP": {
        "command": {
         "Fn::If": [
          "optin",
          {
           "Fn::Join": [
            " ",
            [
             "DEPLOYMENTID=`echo \"",
             {
              "Ref": "AWS::StackId"
             },
             "\"|sha512sum|cut -d \" \" -f 1`;",
             "CUSTOMERID=`echo \"",
             {
              "Ref": "AWS::AccountId"
             },
             "\"|sha512sum|cut -d \" \" -f 1`;",
             "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth0`;",
             "nohup /config/waitThenRun.sh",
             "TOKEN=`/usr/bin/curl -sS --retry 20 -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 120'`;",
             "HOSTNAME=`/usr/bin/curl -sS --retry 20 -H 'X-aws-ec2-metadata-token: '$TOKEN'' http://169.254.169.254/latest/meta-data/hostname`;",
             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
             "--log-level silly",
             "--wait-for ADMIN_CREATED",
             "--signal ONBOARD_DONE",
             "-o /var/log/cloud/aws/onboard.log",
             "--host localhost",
             "--user",
             {
              "Ref": "adminUsername"
             },
             "--password-url file:///config/cloud/aws/.adminPassword",
             "--password-encrypted",
             "--hostname ${HOSTNAME}",
             "--ntp ",
             {
              "Ref": "ntpServer"
             },
             "--tz ",
             {
              "Ref": "timezone"
             },
             "--dns ${NAME_SERVER}",
             "--port 8443",
             "--ssl-port ",
             {
              "Ref": "managementGuiPort"
             },
             "--modules ",
             {
              "Ref": "bigIpModules"
             },
             "--metrics \"cloudName:aws,region:${REGION},bigipVersion:16.1.2.2-0.0.28,customerId:${CUSTOMERID},deploymentId:${DEPLOYMENTID},templateName:f5-payg-autoscale-bigip-waf-dns.template,templateVersion:5.18.0,licenseType:hourly\"",
             "-d tm.tcpudptxchecksum:software-only ",
             "--ping",
             "&>> /var/log/cloud/aws/install.log < /dev/null",
             "&"
            ]
           ]
          },
          {
           "Fn::Join": [
            " ",
            [
             "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth0`;",
             "nohup /config/waitThenRun.sh",
             "TOKEN=`/usr/bin/curl -sS --retry 20 -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 120'`;",
             "HOSTNAME=`/usr/bin/curl -sS --retry 20 -H 'X-aws-ec2-metadata-token: '$TOKEN'' http://169.254.169.254/latest/meta-data/hostname`;",
             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
             "--log-level silly",
             "--wait-for ADMIN_CREATED",
             "--signal ONBOARD_DONE",
             "-o /var/log/cloud/aws/onboard.log",
             "--host localhost",
             "--port 8443",
             "--user",
             {
              "Ref": "adminUsername"
             },
             "--password-url file:///config/cloud/aws/.adminPassword",
             "--password-encrypted",
             "--hostname ${HOSTNAME}",
             "--ntp ",
             {
              "Ref": "ntpServer"
             },
             "--tz ",
             {
              "Ref": "timezone"
             },
             "--dns ${NAME_SERVER}",
             "--ssl-port ",
             {
              "Ref": "managementGuiPort"
             },
             "--modules ",
             {
              "Ref": "bigIpModules"
             },
             "-d tm.tcpudptxchecksum:software-only ",
             "--ping",
             "&>> /var/log/cloud/aws/install.log < /dev/null",
             "&"
            ]
           ]
          }
         ]
        }
       },
       "060-custom-config": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           "--log-level silly",
           "--file /config/cloud/aws/custom-config.sh",
           "--cwd /config/cloud/aws",
           "-o /var/log/cloud/aws/custom-config.log",
           "--wait-for ONBOARD_DONE",
           "--signal CUSTOM_CONFIG_DONE",
           "&>> /var/log/cloud/aws/install.log < /dev/null",
           "&"
          ]
         ]
        }
       },
       "070-verify-deployment": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           " --wait-for CUSTOM_CONFIG_DONE",
           " --signal DEPLOYMENT_VERIFIED",
           " --file /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs-aws/scripts/verifyDeploymentCompletion.js",
           " --cl-args '--user ",
           {
            "Ref": "adminUsername"
           },
           " --password-url file:///config/cloud/aws/.adminPassword",
           " --password-encrypted true",
           " --host localhost",
           " --port ",
           {
            "Ref": "managementGuiPort"
           },
           " --solution autoscale",
           " --log-level silly",
           " --instances-count ",
           {
            "Ref": "scalingMinSize"
           },
           "'",
           " --log-level silly",
           " -o /var/log/cloud/aws/verifyDeploymentCompletion.log",
           " &>> /var/log/cloud/aws/install.log < /dev/null",
           " &"
          ]
         ]
        }
       }
      },
      "files": {
       "/config/cloud/asm-policy-linux.tar.gz": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "http://cdn.f5.com/product/cloudsolutions/solution-scripts/asm-policy-linux.tar.gz"
       },
       "/config/cloud/aws/custom-config.sh": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "# Generated from 5.18.0\n",
           "date\n",
           ". /config/cloud/aws/onboard_config_vars\n",
           "if [[ $allowPhoneHome == \"No\" ]]; then\n",
           "    tmsh modify sys software update auto-phonehome disabled\n",
           "fi\n",
           "tmsh create sys icall script uploadMetrics definition { exec /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs-aws/scripts/reportMetrics.sh }\n",
           "tmsh create sys icall handler periodic /Common/metricUploadHandler { first-occurrence now interval 60 script /Common/uploadMetrics }\n",
           "tmsh save /sys config\n",
           "echo 'Attempting to Join or Initiate Autoscale Cluster' \n",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/autoscale.js --cloud aws --provider-options s3Bucket:${s3Bucket},sqsUrl:${sqsUrl},mgmtPort:${managementGuiPort} --host localhost --port ${managementGuiPort} --user ${adminUsername} --password-url file:///config/cloud/aws/.adminPassword --password-encrypted --device-group autoscale-group --block-sync -c join --log-level silly --output /var/log/cloud/aws/autoscale.log --dns gtm --dns-ip-type ${dnsMemberIpType} --dns-app-port ${dnsMemberPort} --dns-provider-options host:${dnsProviderHost},port:${dnsProviderPort},user:${dnsProviderUser},passwordUrl:${dnsPasswordS3Arn},serverName:${deploymentName},poolName:${dnsProviderPool},datacenter:${dnsProviderDataCenter} \n",
           "if [ -f /config/cloud/master ]; then \n",
           "  if `jq '.ucsLoaded' < /config/cloud/master`; then \n",
           "    echo \"UCS backup loaded from backup folder in S3 bucket ${s3Bucket}.\"\n",
           "  else\n",
           "    echo 'SELF-SELECTED as Master ... Initiated Autoscale Cluster ... Loading default config'\n",
           "    tmsh modify cm device-group autoscale-group asm-sync enabled\n",
           "    source /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/waitForBigip.sh;wait-for-bigip\n",
           "    ### START CUSTOM CONFIGURATION\n",
           "    deployed=\"no\"\n",
           "    url_regex=\"(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$\"\n",
           "    file_loc=\"/config/cloud/custom_config\"\n",
           "    if [[ $declarationUrl =~ $url_regex ]]; then\n",
           "       response_code=$(/usr/bin/curl -sk -w \"%{http_code}\" $declarationUrl -o $file_loc)\n",
           "       if [[ $response_code == 200 ]]; then\n",
           "           echo \"Custom config download complete; checking for valid JSON.\"\n",
           "           cat $file_loc | jq .class\n",
           "           if [[ $? == 0 ]]; then\n",
           "               response_code=$(/usr/bin/curl -svvu admin: -w \"%{http_code}\" -X POST -H \"Content-Type: application/json\" -H \"Expect:\" http://localhost:8100/mgmt/shared/appsvcs/declare -d @$file_loc -o /dev/null)\n",
           "           if [[ $response_code == 200 || $response_code == 502 ]]; then\n",
           "               echo \"Deployment of custom application succeeded.\"\n",
           "               deployed=\"yes\"\n",
           "           else\n",
           "               echo \"Failed to deploy custom application; continuing...\"\n",
           "           fi\n",
           "       else\n",
           "           echo \"Custom config was not valid JSON, continuing...\"\n",
           "       fi\n",
           "       else\n",
           "           echo \"Failed to download custom config; continuing...\"\n",
           "       fi\n",
           "   else\n",
           "      echo \"Custom config was not a URL, continuing...\"\n",
           "   fi\n",
           "   if [[ $deployed == \"no\" && $declarationUrl == \"default\" ]]; then\n",
           "        asm_policy=\"/config/cloud/asm-policy-linux-${policyLevel}.xml\"\n",
           "        payload=$(echo $payload | jq -c --arg asm_policy $asm_policy --arg pool_http_port $applicationPort --arg vs_http_port $virtualServicePort '.waf.Shared.policyWAF.file = $asm_policy | .waf.http.pool.members[0].servicePort = ($pool_http_port | tonumber) | .waf.http.serviceMain.virtualPort = ($vs_http_port | tonumber)')\n",
           "    payload=$(echo $payload | jq -c 'del(.waf.http.serviceMain.serverTLS)')\n",
           "        if [ \"${applicationPoolTagKey}\" != \"default\" ]\n",
           "        then\n",
           "            payload=$(echo $payload | jq -c 'del(.waf.http.pool.members[0].autoPopulate) | del(.waf.http.pool.members[0].hostname)')\n",
           "            payload=$(echo $payload | jq -c --arg tagKey $applicationPoolTagKey --arg tagValue $applicationPoolTagValue --arg region $region '.waf.http.pool.members[0].tagKey = $tagKey | .waf.http.pool.members[0].tagValue = $tagValue | .waf.http.pool.members[0].region = $region')\n",
           "        else\n",
           "            payload=$(echo $payload | jq -c 'del(.waf.http.pool.members[0].updateInterval) | del(.waf.http.pool.members[0].tagKey) | del(.waf.http.pool.members[0].tagValue) | del(.waf.http.pool.members[0].addressRealm) | del(.waf.http.pool.members[0].region)')\n",
           "            payload=$(echo $payload | jq -c --arg pool_member $appInternalDnsName '.waf.http.pool.members[0].hostname = $pool_member | .waf.http.pool.members[0].addressDiscovery = \"fqdn\"')\n",
           "        fi\n",
           "        response_code=$(/usr/bin/curl -svvu admin: -w \"%{http_code}\" -X POST -H \"Content-Type: application/json\" -H \"Expect:\" http://localhost:8100/mgmt/shared/appsvcs/declare -d \"$payload\" -o /dev/null)\n",
           "        if [[ $response_code == 200 || $response_code == 502  ]]; then\n",
           "            echo 'Deployment of recommended application succeeded.'\n",
           "        else\n",
           "            echo 'Failed to deploy recommended application'\n",
           "            exit 1\n",
           "        fi\n",
           "    fi\n",
           "    ### END CUSTOM CONFIGURATION\n",
           "    tmsh save /sys config\n",
           "    f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/autoscale.js --cloud aws --provider-options s3Bucket:${s3Bucket},sqsUrl:${sqsUrl},mgmtPort:${managementGuiPort}",
           "      --host localhost --port ${managementGuiPort} --user ${adminUsername} --password-url file:///config/cloud/aws/.adminPassword --password-encrypted -c unblock-sync --log-level silly --output /var/log/cloud/aws/autoscale.log \n",
           "  fi\n",
           "fi\n",
           "(crontab -l 2>/dev/null; echo '*/1 * * * * /config/cloud/aws/run_autoscale_update.sh') | crontab -\n",
           "(crontab -l 2>/dev/null; echo '59 23 * * * /config/cloud/aws/run_autoscale_backup.sh') | crontab -\n",
           "tmsh save /sys config\n",
           "systemctl restart crond\n",
           "date\n",
           "echo 'custom-config.sh complete'\n"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/getNameServer.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "INTERFACE=$1",
           "INTERFACE_MAC=`ifconfig ${INTERFACE} | egrep ether | awk '{print tolower($2)}'`",
           "TOKEN=`/usr/bin/curl -sS --retry 20 -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 120'`",
           "VPC_CIDR_BLOCK=`/usr/bin/curl -s -f --retry 20 -H 'X-aws-ec2-metadata-token: '$TOKEN'' http://169.254.169.254/latest/meta-data/network/interfaces/macs/${INTERFACE_MAC}/vpc-ipv4-cidr-block`",
           "VPC_NET=${VPC_CIDR_BLOCK%/*}",
           "NAME_SERVER=`echo ${VPC_NET} | awk -F. '{ printf \"%d.%d.%d.%d\", $1, $2, $3, $4+2 }'`",
           "echo $NAME_SERVER"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/onboard_config_vars": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "# Generated from 5.18.0\n",
           "TOKEN=`/usr/bin/curl -sS --retry 20 -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 120'`\n",
           "HOSTNAME=`/usr/bin/curl -sS --retry 20 -H 'X-aws-ec2-metadata-token: '$TOKEN'' http://169.254.169.254/latest/meta-data/hostname`\n",
           "region='",
           {
            "Ref": "AWS::Region"
           },
           "'\n",
           "deploymentName='",
           {
            "Ref": "deploymentName"
           },
           "'\n",
           "adminUsername='",
           {
            "Ref": "adminUsername"
           },
           "'\n",
           "managementGuiPort='",
           {
            "Ref": "managementGuiPort"
           },
           "'\n",
           "timezone='",
           {
            "Ref": "timezone"
           },
           "'\n",
           "ntpServer='",
           {
            "Ref": "ntpServer"
           },
           "'\n",
           "virtualServicePort='",
           {
            "Ref": "virtualServicePort"
           },
           "'\n",
           "applicationPort='",
           {
            "Ref": "applicationPort"
           },
           "'\n",
           "appInternalDnsName='",
           {
            "Ref": "appInternalDnsName"
           },
           "'\n",
           "applicationPoolTagKey='",
           {
            "Ref": "applicationPoolTagKey"
           },
           "'\n",
           "applicationPoolTagValue='",
           {
            "Ref": "applicationPoolTagValue"
           },
           "'\n",
           "s3Bucket='",
           {
            "Ref": "S3Bucket"
           },
           "'\n",
           "sqsUrl='",
           {
            "Ref": "SQSQueue"
           },
           "'\n",
           "declarationUrl='",
           {
            "Ref": "declarationUrl"
           },
           "'\n",
           "allowPhoneHome='",
           {
            "Ref": "allowPhoneHome"
           },
           "'\n",
           "policyLevel='",
           {
            "Ref": "policyLevel"
           },
           "'\n",
           "passwd=$(f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/decryptDataFromFile.js --data-file /config/cloud/aws/.adminPassword)\n",
           "payload='{\"class\":\"ADC\",\"schemaVersion\":\"3.0.0\",\"label\":\"autoscale_waf\",\"id\":\"AUTOSCALE_WAF\",\"remark\":\"Autoscale WAF\",\"waf\":{\"class\":\"Tenant\",\"Shared\":{\"class\":\"Application\",\"template\":\"shared\",\"serviceAddress\":{\"class\":\"Service_Address\",\"virtualAddress\":\"0.0.0.0\"},\"policyWAF\":{\"class\":\"WAF_Policy\",\"file\":\"/tmp/as30-linux-medium.xml\"}},\"http\":{\"class\":\"Application\",\"template\":\"http\",\"serviceMain\":{\"class\":\"Service_HTTP\",\"virtualAddresses\":[{\"use\":\"/waf/Shared/serviceAddress\"}],\"serverTLS\":{\"bigip\":\"/Common/example-clientssl-profile\"},\"snat\":\"auto\",\"securityLogProfiles\":[{\"bigip\":\"/Common/Log illegal requests\"}],\"pool\":\"pool\",\"policyWAF\":{\"use\":\"/waf/Shared/policyWAF\"}},\"pool\":{\"class\":\"Pool\",\"monitors\":[\"http\"],\"members\":[{\"autoPopulate\":true,\"hostname\":\"demo.example.com\",\"servicePort\":80,\"addressDiscovery\":\"aws\",\"updateInterval\":15,\"tagKey\":\"applicationPoolTagKey\",\"tagValue\":\"applicationPoolTagValue\",\"addressRealm\":\"private\",\"region\":\"us-west-2\"}]}}}}'\n",
           "dnsMemberIpType='",
           {
            "Fn::If": [
             "usePublicIP",
             {
              "Ref": "dnsMemberIpType"
             },
             "private"
            ]
           },
           "'\n",
           "dnsMemberPort='",
           {
            "Ref": "dnsMemberPort"
           },
           "'\n",
           "dnsProviderHost='",
           {
            "Ref": "dnsProviderHost"
           },
           "'\n",
           "dnsProviderPort='",
           {
            "Ref": "dnsProviderPort"
           },
           "'\n",
           "dnsProviderUser='",
           {
            "Ref": "dnsProviderUser"
           },
           "'\n",
           "dnsPasswordS3Arn='",
           {
            "Ref": "dnsPasswordS3Arn"
           },
           "'\n",
           "dnsProviderPool='",
           {
            "Ref": "dnsProviderPool"
           },
           "'\n",
           "dnsProviderDataCenter='",
           {
            "Ref": "dnsProviderDataCenter"
           },
           "'\n"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/run_autoscale_backup.sh": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "source /config/cloud/aws/onboard_config_vars\n",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/autoscale.js",
           " --cloud aws --provider-options '",
           "s3Bucket:",
           {
            "Ref": "S3Bucket"
           },
           ",sqsUrl:",
           {
            "Ref": "SQSQueue"
           },
           ",mgmtPort:",
           {
            "Ref": "managementGuiPort"
           },
           "'",
           " --host localhost",
           " --port ",
           {
            "Ref": "managementGuiPort"
           },
           " --user ",
           {
            "Ref": "adminUsername"
           },
           " --password-url file:///config/cloud/aws/.adminPassword",
           " --password-encrypted",
           " --device-group autoscale-group",
           " --cluster-action backup-ucs",
           " --log-level silly --output /var/log/cloud/aws/autoscale.log"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/run_autoscale_update.sh": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/autoscale.js",
           " --cloud aws --provider-options '",
           "s3Bucket:",
           {
            "Ref": "S3Bucket"
           },
           ",sqsUrl:",
           {
            "Ref": "SQSQueue"
           },
           ",mgmtPort:",
           {
            "Ref": "managementGuiPort"
           },
           "'",
           " --host localhost",
           " --port ",
           {
            "Ref": "managementGuiPort"
           },
           " --user ",
           {
            "Ref": "adminUsername"
           },
           " --password-url file:///config/cloud/aws/.adminPassword",
           " --password-encrypted",
           " --device-group autoscale-group",
           " --cluster-action update",
           " --log-level silly --output /var/log/cloud/aws/autoscale.log ",
           " --dns gtm",
           " --dns-ip-type ",
           {
            "Ref": "dnsMemberIpType"
           },
           " --dns-app-port ",
           {
            "Ref": "dnsMemberPort"
           },
           " --dns-provider-options host:",
           {
            "Ref": "dnsProviderHost"
           },
           ",port:",
           {
            "Ref": "dnsProviderPort"
           },
           ",user:",
           {
            "Ref": "dnsProviderUser"
           },
           ",passwordUrl:",
           {
            "Ref": "dnsPasswordS3Arn"
           },
           ",serverName:",
           {
            "Ref": "deploymentName"
           },
           ",poolName:",
           {
            "Ref": "dnsProviderPool"
           },
           ",datacenter:",
           {
            "Ref": "dnsProviderDataCenter"
           }
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/f5-cloud-libs-aws.tar.gz": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "http://cdn.f5.com/product/cloudsolutions/f5-cloud-libs-aws/v2.10.1/f5-cloud-libs-aws.tar.gz"
       },
       "/config/cloud/f5-cloud-libs.tar.gz": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "http://cdn.f5.com/product/cloudsolutions/f5-cloud-libs/v4.27.1/f5-cloud-libs.tar.gz"
       },
       "/config/installCloudLibs.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "#!/bin/bash",
           "echo about to execute",
           "checks=0",
           "while [ $checks -lt 120 ]; do echo checking mcpd",
           "    tmsh -a show sys mcp-state field-fmt | grep -q running",
           "    if [ $? == 0 ]; then",
           "        echo mcpd ready",
           "        break",
           "    fi",
           "    echo mcpd not ready yet",
           "    let checks=checks+1",
           "    sleep 10",
           "done",
           "echo loading verifyHash script",
           "if ! tmsh load sys config merge file /config/verifyHash; then",
           "    echo cannot validate signature of /config/verifyHash",
           "    exit",
           "fi",
           "echo loaded verifyHash",
           "declare -a filesToVerify=(\"/config/cloud/f5-cloud-libs.tar.gz\" \"/config/cloud/f5-cloud-libs-aws.tar.gz\")",
           "for fileToVerify in \"${filesToVerify[@]}\"",
           "do",
           "    echo verifying \"$fileToVerify\"",
           "    if ! tmsh run cli script verifyHash \"$fileToVerify\"; then",
           "        echo \"$fileToVerify\" is not valid",
           "        exit 1",
           "    fi",
           "    echo verified \"$fileToVerify\"",
           "done",
           "mkdir -p /config/cloud/aws/node_modules/@f5devcentral",
           "echo expanding f5-cloud-libs.tar.gz",
           "tar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
           "echo installing dependencies",
           "tar xvfz /config/cloud/f5-cloud-libs-aws.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
           "tar xvfz /config/cloud/asm-policy-linux.tar.gz -C /config/cloud",
           "echo cloud libs install complete",
           "touch /config/cloud/cloudLibsReady"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/verifyHash": {
        "content": {
         "Fn::Join": [
          "",
          [
           "cli script /Common/verifyHash {\nproc script::run {} {\n        if {[catch {\n            set hashes(f5-cloud-libs.tar.gz) 32dbb0e602b8a9dc8b492e52dcd61b47ba62f4f70cdb2c6162694b8b6bdde6f2684d0747878a89e966dff78dbec02d98b682aa108cba5b024195561189c61c06\n            set hashes(f5-cloud-libs-aws.tar.gz) c2eadf04a910e28a52c21e1b9af9015b5a4e5a50501bc0dfbd354d03d08d5a82fe8c0326dd4138b835ff88fc17232e957b8f2d3fb031ed1809fd3d0b973afe09\n            set hashes(f5-cloud-libs-azure.tar.gz) 703bae0e774114b16528ca71bb2109db5f36623f8b8698588348677862ffa48559ba9698001d2f245860059a4fec588a15ee924317b967bf338cca66b0de6936\n            set hashes(f5-cloud-libs-gce.tar.gz) fd16ab827b3089e76d5c77c713a2eabe685707dba7207cfdf2778db2e96281fc8e3e4424fb20f584c44cb9722b4fbf352e7c364de5fed61a74bd138f974705b2\n            set hashes(f5-cloud-libs-openstack.tar.gz) 5c83fe6a93a6fceb5a2e8437b5ed8cc9faf4c1621bfc9e6a0779f6c2137b45eab8ae0e7ed745c8cf821b9371245ca29749ca0b7e5663949d77496b8728f4b0f9\n            set hashes(f5-cloud-libs-consul.tar.gz) a32aab397073df92cbbba5067e5823e9b5fafca862a258b60b6b40aa0975c3989d1e110f706177b2ffbe4dde65305a260a5856594ce7ad4ef0c47b694ae4a513\n            set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0\n            set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034\n            set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe\n            set hashes(f5.http.v1.2.0rc7.tmpl) 21f413342e9a7a281a0f0e1301e745aa86af21a697d2e6fdc21dd279734936631e92f34bf1c2d2504c201f56ccd75c5c13baa2fe7653213689ec3c9e27dff77d\n            set hashes(f5.aws_advanced_ha.v1.3.0rc1.tmpl) 9e55149c010c1d395abdae3c3d2cb83ec13d31ed39424695e88680cf3ed5a013d626b326711d3d40ef2df46b72d414b4cb8e4f445ea0738dcbd25c4c843ac39d\n            set hashes(f5.aws_advanced_ha.v1.4.0rc1.tmpl) de068455257412a949f1eadccaee8506347e04fd69bfb645001b76f200127668e4a06be2bbb94e10fefc215cfc3665b07945e6d733cbe1a4fa1b88e881590396\n            set hashes(f5.aws_advanced_ha.v1.4.0rc2.tmpl) 6ab0bffc426df7d31913f9a474b1a07860435e366b07d77b32064acfb2952c1f207beaed77013a15e44d80d74f3253e7cf9fbbe12a90ec7128de6facd097d68f\n            set hashes(f5.aws_advanced_ha.v1.4.0rc3.tmpl) 2f2339b4bc3a23c9cfd42aae2a6de39ba0658366f25985de2ea53410a745f0f18eedc491b20f4a8dba8db48970096e2efdca7b8efffa1a83a78e5aadf218b134\n            set hashes(f5.aws_advanced_ha.v1.4.0rc4.tmpl) 2418ac8b1f1884c5c096cbac6a94d4059aaaf05927a6a4508fd1f25b8cc6077498839fbdda8176d2cf2d274a27e6a1dae2a1e3a0a9991bc65fc74fc0d02ce963\n            set hashes(f5.aws_advanced_ha.v1.4.0rc5.tmpl) 5e582187ae1a6323e095d41eddd41151d6bd38eb83c634410d4527a3d0e246a8fc62685ab0849de2ade62b0275f51264d2deaccbc16b773417f847a4a1ea9bc4\n            set hashes(asm-policy.tar.gz) 2d39ec60d006d05d8a1567a1d8aae722419e8b062ad77d6d9a31652971e5e67bc4043d81671ba2a8b12dd229ea46d205144f75374ed4cae58cefa8f9ab6533e6\n            set hashes(deploy_waf.sh) 1a3a3c6274ab08a7dc2cb73aedc8d2b2a23cd9e0eb06a2e1534b3632f250f1d897056f219d5b35d3eed1207026e89989f754840fd92969c515ae4d829214fb74\n            set hashes(f5.policy_creator.tmpl) 06539e08d115efafe55aa507ecb4e443e83bdb1f5825a9514954ef6ca56d240ed00c7b5d67bd8f67b815ee9dd46451984701d058c89dae2434c89715d375a620\n            set hashes(f5.service_discovery.tmpl) 4811a95372d1dbdbb4f62f8bcc48d4bc919fa492cda012c81e3a2fe63d7966cc36ba8677ed049a814a930473234f300d3f8bced2b0db63176d52ac99640ce81b\n            set hashes(f5.cloud_logger.v1.0.0.tmpl) 64a0ed3b5e32a037ba4e71d460385fe8b5e1aecc27dc0e8514b511863952e419a89f4a2a43326abb543bba9bc34376afa114ceda950d2c3bd08dab735ff5ad20\n            set hashes(f5-appsvcs-3.5.1-5.noarch.rpm) ba71c6e1c52d0c7077cdb25a58709b8fb7c37b34418a8338bbf67668339676d208c1a4fef4e5470c152aac84020b4ccb8074ce387de24be339711256c0fa78c8\n            set hashes(f5-appsvcs-3.18.0-4.noarch.rpm) e72ee8005a27070ac399ab097e8aa507a72aae4721d7491589cfeb821db3ef86cbc979e796ab319ec727bb51400ccda813c4b9eb4a6b3d1220a396b582f8f400\n            set hashes(f5-appsvcs-3.20.0-3.noarch.rpm) d4bba8892a2068bb53f88c6090dc65f17707abca35a7ed2fff39980057fe7f7a2ebf710ab2284a1d83d70b7746beabad9df603017c0fd8728f7457661c95ac8d\n            set hashes(f5-appsvcs-3.25.0-3.noarch.rpm) 26f19bdaaa81cbe0421b3e08c09987f9dd0c54b05a626d6a21a836b34248d2d9d83095f0daad8e7a4a068e9ef99b89fbcd246ae8b617ac2b2456599157d0e8b3\n            set hashes(f5-appsvcs-3.26.1-1.noarch.rpm) b460e11679d38a96549b5041def27b419f1a41c8f788f9f8c7a034aa5cb5a8c9fd151c7c439bebd093fcd85cd8657f1c064551d9337566f9fc7e9506c55dc02c\n            set hashes(f5-appsvcs-3.31.0-6.noarch.rpm) 6506fde5d1c2e067662b513387dccda0281d3bbc604fc6dcf8e5740ae563748899f7f335e349006fe3f0e751cd70d4ef8be3701ae45dca305de649f259f090a9\n            set hashes(f5-cloud-failover-1.1.0-0.noarch.rpm) 15a440c299f9e4af86a3d0f5b0d75b0054385b95e47c3ef116d2e0bfb0041a26dcbf549028e2a26d2c718ec61446bd657be38fbbcd9db781efe5414c174ac68c\n            set hashes(f5-cloud-failover-1.3.0-0.noarch.rpm) 19681eb33d9f910c913f8180199485eb653b4b5ebeaae0b90a6ce8341d7a22fed8d21815b5ba148c468852d20cc26fad4c4242e50ecc184f1f8770dacced6f6a\n            set hashes(f5-cloud-failover-1.4.0-0.noarch.rpm) 49e9108a070e0c8713aeb7b330662358542e61b7c53a9d45108d37a9bf5246f9e4aaae10cc61064801dcccd20bfd5108347b0f694510e7ece07f96c45ba683b0\n            set hashes(f5-cloud-failover-1.5.0-0.noarch.rpm) 33a7e2d047106bcce681757a65240bfacedd48e13567e05fdb23a4b269d266aa5001f81158c3964dc297f0428db31c9df428002898d190285b349c59422a573b\n            set hashes(f5-cloud-failover-1.6.1-1.noarch.rpm) c1b842da21b8d1ba21b6eb63c8598a9ea9986d5daddc21e4d280e1d6b09d3db1de8ac7de5c84edf07b43e4af03daf8fe747a4048f6573d955206352cde2cec65\n            set hashes(f5-cloud-failover-1.7.1-1.noarch.rpm) 14ff0cd2bb49780cc0ae3021c4fc8fcc096e3fce2258096a4aa026d6d37de728ca7345bfe3a79031e336e74d25a2b40ff28324c2c752bf0ee71b7fc89b6fc8fe\n            set hashes(f5-cloud-failover-1.8.0-0.noarch.rpm) 23086d1cbf3cb24eac7eba2305156c600fa21f1b896321a2fa5225d331d7e41471edb3f5368144d86848a4520b1e005c014485ff451e7da6429053f58bfe8ce4\n            set hashes(f5-cloud-failover-1.9.0-0.noarch.rpm) 09c15377389ac18313370635fb99f9aff05970807cc60bff074f80f664023cfc0d9f5b7f2ed7a8f879deb2da84a034bb9fa9f4e95f9806d644af518db32f1425\n\n            set file_path [lindex $tmsh::argv 1]\n            set file_name [file tail $file_path]\n\n            if {![info exists hashes($file_name)]} {\n                tmsh::log err \"No hash found for $file_name\"\n                exit 1\n            }\n\n            set expected_hash $hashes($file_name)\n            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]\n            if { $expected_hash eq $computed_hash } {\n                exit 0\n            }\n            tmsh::log err \"Hash does not match for $file_path\"\n            exit 1\n        }]} {\n            tmsh::log err {Unexpected error in verifyHash}\n            exit 1\n        }\n    }\n    script-signature X7djuj51rcPDqOQfTUMmV6Qg8gSjD4UnhrHAMkP0oFDTSDigD+s49RMbK05inVzbq+wqjWC2Rlsz1bfreGy35DzIBQo0k8hCOr2JNXAOXOp45LfVgqq+c1NgjsHo54ogvHRixLxo2wo3QBX9SJzktr3zgj6BTHoU95R76497hmaeJ96EYz+3d78tO64ORbtzizlMV9xfBFYzgW0SPT644Rer65DstCMbQcDNqHv71BnKfshfu5Ta2qXUmn8ZNBOdcdSOng+E05/rURDEFU7NJ0j7mkn3UbY8F9WNKkyL+098FitD/l+gD3VpFaFwFKIOvorz8fWfWT+u4GQF3MvRdg==\n    signing-key /Common/f5-irule\n}"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/waitThenRun.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "#!/bin/bash",
           "while true; do echo \"waiting for cloud libs install to complete\"",
           "    if [ -f /config/cloud/cloudLibsReady ]; then",
           "        break",
           "    else",
           "        sleep 10",
           "    fi",
           "done",
           "\"$@\""
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       }
      }
     }
    }
   },
   "Properties": {
    "AssociatePublicIpAddress": {
     "Fn::FindInMap": [
      "Transformations",
      "Boolean",
      {
       "Ref": "provisionPublicIP"
      }
     ]
    },
    "BlockDeviceMappings": [
     {
      "DeviceName": "/dev/xvda",
      "Ebs": {
       "DeleteOnTermination": true,
       "VolumeType": "gp2"
      }
     },
     {
      "DeviceName": "/dev/xvdb",
      "NoDevice": true
     }
    ],
    "IamInstanceProfile": {
     "Ref": "BigipAutoScalingInstanceProfile"
    },
    "ImageId": {
     "Fn::If": [
      "noCustomImageId",
      {
       "Fn::FindInMap": [
        "BigipRegionMap",
        {
         "Ref": "AWS::Region"
        },
        {
         "Fn::FindInMap": [
          "AWSBigipThrougput",
          {
           "Ref": "throughput"
          },
          "Best"
         ]
        }
       ]
      },
      {
       "Ref": "customImageId"
      }
     ]
    },
    "InstanceMonitoring": false,
    "InstanceType": {
     "Ref": "instanceType"
    },
    "KeyName": {
     "Ref": "sshKey"
    },
    "SecurityGroups": [
     {
      "Ref": "bigipExternalSecurityGroup"
     }
    ],
    "UserData": {
     "Fn::Base64": {
      "Fn::Join": [
       "",
       [
        "#!/bin/bash -x\n",
        "mkdir -p /var/log/cloud /config/cloud /var/config/rest/downloads\n",
        "/usr/bin/setdb provision.extramb 1000\n",
        "/usr/bin/setdb restjavad.useextramb true\n",
        "cat << EOF >> /config/cloud/runtime-init-config.yaml\n",
        "controls:\n",
        "  logLevel: info\n",
        "  logFilename: /var/log/cloud/bigIpRuntimeInit.log\n",
        "extension_packages:\n",
        "  install_operations:\n",
        "    - extensionType: as3\n",
        "      extensionVersion: 3.36.1\n",
        "      extensionHash: 48876a92d3d8fe7da70310882dc9fd1499d209579d798394715e18c12138daf3\n",
        "EOF\n",
        "/usr/bin/curl -fv --retry 1 --connect-timeout 5 -L http://cdn.f5.com/product/cloudsolutions/f5-bigip-runtime-init/v1.5.0/dist/f5-bigip-runtime-init-1.5.0-1.gz.run -o /var/config/rest/downloads/f5-bigip-runtime-init-1.5.0-1.gz.run\n",
        "bash /var/config/rest/downloads/f5-bigip-runtime-init-1.5.0-1.gz.run -- '--cloud aws'\n",
        "f5-bigip-runtime-init --config-file /config/cloud/runtime-init-config.yaml --skip-telemetry\n",
        "/opt/aws/apitools/cfn-init/bin/cfn-init -v -s ",
        {
         "Ref": "AWS::StackId"
        },
        " -r BigipLaunchConfig",
        " --region ",
        {
         "Ref": "AWS::Region"
        },
        "\n"
       ]
      ]
     }
    }
   },
   "Type": "AWS::AutoScaling::LaunchConfiguration"
  },
  "BigipLowCpuAlarm": {
   "DependsOn": "BigipAutoscaleGroup",
   "Properties": {
    "ActionsEnabled": true,
    "AlarmActions": [
     {
      "Ref": "BigipScaleDownPolicy"
     }
    ],
    "AlarmDescription": "CPU usage percentage below average threshold after 10 successive interval of 5 minutes",
    "ComparisonOperator": "LessThanThreshold",
    "EvaluationPeriods": 10,
    "MetricName": "tmm-stat",
    "Namespace": {
     "Ref": "BigipAutoscaleGroup"
    },
    "Period": 300,
    "Statistic": "Average",
    "Threshold": {
     "Ref": "lowCpuThreshold"
    }
   },
   "Type": "AWS::CloudWatch::Alarm"
  },
  "BigipLowbytesAlarm": {
   "DependsOn": "BigipAutoscaleGroup",
   "Properties": {
    "ActionsEnabled": true,
    "AlarmActions": [
     {
      "Ref": "BigipScaleDownPolicy"
     }
    ],
    "AlarmDescription": "Throughput below average threshold for 10 successive intervals of 5 minutes",
    "ComparisonOperator": "LessThanThreshold",
    "EvaluationPeriods": 10,
    "MetricName": "throughput-per-sec",
    "Namespace": {
     "Ref": "BigipAutoscaleGroup"
    },
    "Period": 300,
    "Statistic": "Average",
    "Threshold": {
     "Ref": "scaleDownBytesThreshold"
    }
   },
   "Type": "AWS::CloudWatch::Alarm"
  },
  "BigipScaleDownPolicy": {
   "Properties": {
    "AdjustmentType": "ChangeInCapacity",
    "AutoScalingGroupName": {
     "Ref": "BigipAutoscaleGroup"
    },
    "Cooldown": "1500",
    "ScalingAdjustment": -1
   },
   "Type": "AWS::AutoScaling::ScalingPolicy"
  },
  "BigipScaleUpPolicy": {
   "Properties": {
    "AdjustmentType": "ChangeInCapacity",
    "AutoScalingGroupName": {
     "Ref": "BigipAutoscaleGroup"
    },
    "Cooldown": "1500",
    "ScalingAdjustment": 1
   },
   "Type": "AWS::AutoScaling::ScalingPolicy"
  },
  "S3Bucket": {
   "Properties": {
    "AccessControl": "BucketOwnerFullControl"
   },
   "Type": "AWS::S3::Bucket"
  },
  "SNSTopic": {
   "Properties": {
    "Subscription": [
     {
      "Endpoint": {
       "Ref": "notificationEmail"
      },
      "Protocol": "email"
     }
    ]
   },
   "Type": "AWS::SNS::Topic"
  },
  "SQSQueue": {
   "Properties": {
    "MessageRetentionPeriod": 3600
   },
   "Type": "AWS::SQS::Queue"
  },
  "bigipExternalSecurityGroup": {
   "Properties": {
    "GroupDescription": "Public or External interface rules, including BIG-IP management",
    "SecurityGroupIngress": [
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddress"
      },
      "FromPort": 22,
      "IpProtocol": "tcp",
      "ToPort": 22
     },
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddress"
      },
      "FromPort": {
       "Ref": "managementGuiPort"
      },
      "IpProtocol": "tcp",
      "ToPort": {
       "Ref": "managementGuiPort"
      }
     },
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddressApp"
      },
      "FromPort": 80,
      "IpProtocol": "tcp",
      "ToPort": 80
     },
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddressApp"
      },
      "FromPort": 443,
      "IpProtocol": "tcp",
      "ToPort": 443
     }
    ],
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "application"
      }
     },
     {
      "Key": "Costcenter",
      "Value": {
       "Ref": "costcenter"
      }
     },
     {
      "Key": "Environment",
      "Value": {
       "Ref": "environment"
      }
     },
     {
      "Key": "Group",
      "Value": {
       "Ref": "group"
      }
     },
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "Bigip Security Group: ",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     },
     {
      "Key": "Owner",
      "Value": {
       "Ref": "owner"
      }
     }
    ],
    "VpcId": {
     "Ref": "Vpc"
    }
   },
   "Type": "AWS::EC2::SecurityGroup"
  },
  "bigipSecurityGroupIngressAsmPolicySync": {
   "Properties": {
    "FromPort": 6123,
    "GroupId": {
     "Ref": "bigipExternalSecurityGroup"
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Ref": "bigipExternalSecurityGroup"
    },
    "ToPort": 6128
   },
   "Type": "AWS::EC2::SecurityGroupIngress"
  },
  "bigipSecurityGroupIngressConfigSync": {
   "Properties": {
    "FromPort": 4353,
    "GroupId": {
     "Ref": "bigipExternalSecurityGroup"
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Ref": "bigipExternalSecurityGroup"
    },
    "ToPort": 4353
   },
   "Type": "AWS::EC2::SecurityGroupIngress"
  },
  "bigipSecurityGroupIngressManagementGuiPort": {
   "Properties": {
    "FromPort": {
     "Ref": "managementGuiPort"
    },
    "GroupId": {
     "Ref": "bigipExternalSecurityGroup"
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Ref": "bigipExternalSecurityGroup"
    },
    "ToPort": {
     "Ref": "managementGuiPort"
    }
   },
   "Type": "AWS::EC2::SecurityGroupIngress"
  }
 },
 "Rules": {
  "ValidateDnsMemberIPType": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Equals": [
       {
        "Ref": "dnsMemberIpType"
       },
       "private"
      ]
     },
     "AssertDescription": "The type cannot be public when public IP is not provision (provisionPublicIP is required)"
    }
   ],
   "RuleCondition": {
    "Fn::Equals": [
     "No",
     {
      "Ref": "provisionPublicIP"
     }
    ]
   }
  }
 }
}
