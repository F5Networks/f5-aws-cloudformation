{
 "AWSTemplateFormatVersion": "2010-09-09",
 "Conditions": {
  "noCustomImageId": {
   "Fn::Equals": [
    "OPTIONAL",
    {
     "Ref": "customImageId"
    }
   ]
  },
  "optin": {
   "Fn::Equals": [
    "Yes",
    {
     "Ref": "allowUsageAnalytics"
    }
   ]
  },
  "usePublicIP": {
   "Fn::Equals": [
    "Yes",
    {
     "Ref": "provisionPublicIP"
    }
   ]
  }
 },
 "Description": "Template v6.4.0: AWS CloudFormation Template for creating a Same-AZ cluster of 2NIC BIG-IPs in an existing VPC **WARNING** This template creates Amazon EC2 Instances. You will be billed for the AWS resources used if you create a stack from this template.",
 "Mappings": {
  "BigipRegionMap": {
   "af-south-1": {
    "AdvancedWaf200Mbps": "ami-070f1a1fea1b9777d",
    "AdvancedWaf25Mbps": "ami-06db47e500e495705",
    "AdvancedWaf3000Mbps": "ami-0477aa8717a278c8e",
    "Best10000Mbps": "ami-0d10a5bb4de5a43e7",
    "Best1000Mbps": "ami-04d6c340d5a47b5f2",
    "Best200Mbps": "ami-03332898156d6d3b0",
    "Best25Mbps": "ami-05439b4f901538378",
    "Best5000Mbps": "ami-0c52dcc16b5c22660",
    "Better10000Mbps": "ami-0f932e5d26a82412b",
    "Better1000Mbps": "ami-0ecc6ea655d0791e2",
    "Better200Mbps": "ami-04b2469c84587a62f",
    "Better25Mbps": "ami-0c762d7c456f95f47",
    "Better5000Mbps": "ami-037bc7675bf358905",
    "Good10000Mbps": "ami-0d8be22f9620ced55",
    "Good1000Mbps": "ami-0be146eee953da52a",
    "Good200Mbps": "ami-079c8d4cc4ba3788a",
    "Good25Mbps": "ami-06855496b0746b584",
    "Good5000Mbps": "ami-01550878c234ed844",
    "PerAppVeAwaf200Mbps": "ami-05de70931be2a3cdf",
    "PerAppVeAwaf25Mbps": "ami-0fc856c9be9cda2f5"
   },
   "ap-east-1": {
    "AdvancedWaf200Mbps": "ami-0d4cc05bba9442811",
    "AdvancedWaf25Mbps": "ami-0b312d2819df85a34",
    "AdvancedWaf3000Mbps": "ami-01b818c49f9d77718",
    "Best10000Mbps": "ami-086a73a18a9c27ba8",
    "Best1000Mbps": "ami-0b0e119f85a21c08a",
    "Best200Mbps": "ami-03d3a875f6a6033dd",
    "Best25Mbps": "ami-0edf345aa33e6ed99",
    "Best5000Mbps": "ami-02515a02ea2fe623a",
    "Better10000Mbps": "ami-0f8b3a6487ca80641",
    "Better1000Mbps": "ami-00c8d6521b1763231",
    "Better200Mbps": "ami-0d547b7f66ed7fb6f",
    "Better25Mbps": "ami-03a3a6a930f7fe718",
    "Better5000Mbps": "ami-0ee444dc3619f6cc6",
    "Good10000Mbps": "ami-03b0192d21301224d",
    "Good1000Mbps": "ami-0e78355a8a094fd18",
    "Good200Mbps": "ami-0969c756d26eff985",
    "Good25Mbps": "ami-095d96d5cecf0221e",
    "Good5000Mbps": "ami-00df7f8da8299ce87",
    "PerAppVeAwaf200Mbps": "ami-0a3bda03048f67da2",
    "PerAppVeAwaf25Mbps": "ami-09c95ecf2850f9754"
   },
   "ap-northeast-1": {
    "AdvancedWaf200Mbps": "ami-0712dc07e69253d2e",
    "AdvancedWaf25Mbps": "ami-003710c8f57fadc37",
    "AdvancedWaf3000Mbps": "ami-0d22d4b8d570e48fd",
    "Best10000Mbps": "ami-06abd15e279ded339",
    "Best1000Mbps": "ami-043c399b6eaf097c2",
    "Best200Mbps": "ami-0d418e2f7b1f5451c",
    "Best25Mbps": "ami-0a513498a5f6c72eb",
    "Best5000Mbps": "ami-001715861ae73c66a",
    "Better10000Mbps": "ami-0d2a52ceb785f22b4",
    "Better1000Mbps": "ami-07edcbfc977ffe748",
    "Better200Mbps": "ami-09dca254fef56eef2",
    "Better25Mbps": "ami-058f2caef19b33897",
    "Better5000Mbps": "ami-0a6c2626bbffc12b0",
    "Good10000Mbps": "ami-088cef74fccf685b1",
    "Good1000Mbps": "ami-07c9da69a5ed95558",
    "Good200Mbps": "ami-0381a6ffc7b573dff",
    "Good25Mbps": "ami-0982c975f416addb6",
    "Good5000Mbps": "ami-0f5383689153191de",
    "PerAppVeAwaf200Mbps": "ami-04165876726668187",
    "PerAppVeAwaf25Mbps": "ami-03af29f4fbe1ffa77"
   },
   "ap-northeast-2": {
    "AdvancedWaf200Mbps": "ami-0f360d6ca24186b9c",
    "AdvancedWaf25Mbps": "ami-005d1524f1a5ebba9",
    "AdvancedWaf3000Mbps": "ami-0f2149f8a50b30857",
    "Best10000Mbps": "ami-0167d6d016db04113",
    "Best1000Mbps": "ami-08e2e8f114115a5bd",
    "Best200Mbps": "ami-0ba826fb20912afdd",
    "Best25Mbps": "ami-0caf11b8de1714a82",
    "Best5000Mbps": "ami-0c1f6bdaa98a70c93",
    "Better10000Mbps": "ami-032c4c11f47d2fef4",
    "Better1000Mbps": "ami-006e0c0fd03916130",
    "Better200Mbps": "ami-07fc863e7d5f93a9a",
    "Better25Mbps": "ami-0606405328a2936ca",
    "Better5000Mbps": "ami-0f4a69c19d6f3d9a1",
    "Good10000Mbps": "ami-075528a85e2fe3404",
    "Good1000Mbps": "ami-0990a159a81f754d0",
    "Good200Mbps": "ami-0d48d9f5c5dd818f0",
    "Good25Mbps": "ami-0763ac0031349f1d0",
    "Good5000Mbps": "ami-0aa9ad7220bc24906",
    "PerAppVeAwaf200Mbps": "ami-0ad3a9f6be64155d1",
    "PerAppVeAwaf25Mbps": "ami-04aea452b18fbf52e"
   },
   "ap-northeast-3": {
    "AdvancedWaf200Mbps": "ami-0a5c692e5907abfb8",
    "AdvancedWaf25Mbps": "ami-0757fbb73c2c33e08",
    "AdvancedWaf3000Mbps": "ami-00b107369a4779b9e",
    "Best10000Mbps": "ami-0408abd05304dd653",
    "Best1000Mbps": "ami-0474f74857aeb7855",
    "Best200Mbps": "ami-012b91cea669a50fa",
    "Best25Mbps": "ami-0c3064dc5281efd26",
    "Best5000Mbps": "ami-03a15e50ff42d68c9",
    "Better10000Mbps": "ami-0203d94b39de55152",
    "Better1000Mbps": "ami-0c413d68b1503a86e",
    "Better200Mbps": "ami-077e9556ad9c0aa66",
    "Better25Mbps": "ami-0d49f4ec489683b2f",
    "Better5000Mbps": "ami-0dcef785b89bce5a4",
    "Good10000Mbps": "ami-0aaf6a949e9aae537",
    "Good1000Mbps": "ami-0581c22589c373ce8",
    "Good200Mbps": "ami-06127f668e5c94a12",
    "Good25Mbps": "ami-02546c548a87ad93d",
    "Good5000Mbps": "ami-01ad7c4001874ea39",
    "PerAppVeAwaf200Mbps": "ami-0f76ea37678affb8a",
    "PerAppVeAwaf25Mbps": "ami-061fcd465ff2742b9"
   },
   "ap-south-1": {
    "AdvancedWaf200Mbps": "ami-062b3427aefa71537",
    "AdvancedWaf25Mbps": "ami-090966dde9d503364",
    "AdvancedWaf3000Mbps": "ami-024a88912c25b5106",
    "Best10000Mbps": "ami-002d7788f657b4b5f",
    "Best1000Mbps": "ami-007087828280a3a54",
    "Best200Mbps": "ami-04518dcc924e9fe39",
    "Best25Mbps": "ami-065113dfe943167a6",
    "Best5000Mbps": "ami-0f44975030b5ce1fd",
    "Better10000Mbps": "ami-03ed637b888f02810",
    "Better1000Mbps": "ami-0b656e4f6364593aa",
    "Better200Mbps": "ami-0cc9ed1468208e494",
    "Better25Mbps": "ami-0e48449a3d93ad0c5",
    "Better5000Mbps": "ami-0261adca7a5f8f2a8",
    "Good10000Mbps": "ami-07f5a9abc514a8c9b",
    "Good1000Mbps": "ami-0d238558ca24a02ad",
    "Good200Mbps": "ami-0a9ea66c600d3dec3",
    "Good25Mbps": "ami-0cd6e676fd946b7e7",
    "Good5000Mbps": "ami-0857cf8e040869d5d",
    "PerAppVeAwaf200Mbps": "ami-089b4040c78931d2f",
    "PerAppVeAwaf25Mbps": "ami-03dabaae2b2f1a2a8"
   },
   "ap-southeast-1": {
    "AdvancedWaf200Mbps": "ami-02126b28fc7bcc913",
    "AdvancedWaf25Mbps": "ami-0b6e730f82b00e771",
    "AdvancedWaf3000Mbps": "ami-0aed05a5843deaa05",
    "Best10000Mbps": "ami-0547ae308bf7400a8",
    "Best1000Mbps": "ami-05568981ab4127f23",
    "Best200Mbps": "ami-0032844743e8d5f79",
    "Best25Mbps": "ami-07163e9a56596e00b",
    "Best5000Mbps": "ami-0b334e70308af892c",
    "Better10000Mbps": "ami-01e7ef9d47eb9ba82",
    "Better1000Mbps": "ami-0d67018e3774faf86",
    "Better200Mbps": "ami-00e7a09d514da54d3",
    "Better25Mbps": "ami-0b6c0c351626c2d79",
    "Better5000Mbps": "ami-0737db00840e34846",
    "Good10000Mbps": "ami-0879ce446f7fcb7a3",
    "Good1000Mbps": "ami-0ef56a9cdb57acb69",
    "Good200Mbps": "ami-09c6de8f8a07dec2c",
    "Good25Mbps": "ami-03b3f21e9cdd04c1b",
    "Good5000Mbps": "ami-07c623dfe3a65ced7",
    "PerAppVeAwaf200Mbps": "ami-03c0e83e8cacc6848",
    "PerAppVeAwaf25Mbps": "ami-09d00766f502e1569"
   },
   "ap-southeast-2": {
    "AdvancedWaf200Mbps": "ami-0f6e30ee1c3f38b8b",
    "AdvancedWaf25Mbps": "ami-011957d5192f37e72",
    "AdvancedWaf3000Mbps": "ami-0142b7cff0f15b1aa",
    "Best10000Mbps": "ami-078bd0a228e421cb7",
    "Best1000Mbps": "ami-04ed02f9a3e3d15ee",
    "Best200Mbps": "ami-0e41ae3a973ad9304",
    "Best25Mbps": "ami-02b2292710355a406",
    "Best5000Mbps": "ami-09456381e33139543",
    "Better10000Mbps": "ami-066f6893fa31b0414",
    "Better1000Mbps": "ami-0019a138988ced9f0",
    "Better200Mbps": "ami-021b0999d6c44598d",
    "Better25Mbps": "ami-0d81811c9f44bfb68",
    "Better5000Mbps": "ami-03ea72a01871b9eb5",
    "Good10000Mbps": "ami-0bcecf952ce67f25e",
    "Good1000Mbps": "ami-0a95d43890391880e",
    "Good200Mbps": "ami-0ae5ab374c0c24b3c",
    "Good25Mbps": "ami-0f2fdc8c110c4904f",
    "Good5000Mbps": "ami-0177af8d89bbcc004",
    "PerAppVeAwaf200Mbps": "ami-0d93e2f13ff7b7061",
    "PerAppVeAwaf25Mbps": "ami-07ae4ee047a28d36b"
   },
   "ca-central-1": {
    "AdvancedWaf200Mbps": "ami-05196bdf946cbaef2",
    "AdvancedWaf25Mbps": "ami-0556b8fc7d51a810d",
    "AdvancedWaf3000Mbps": "ami-0e44410938d52363f",
    "Best10000Mbps": "ami-00dcfb4a064be93c0",
    "Best1000Mbps": "ami-04ec646f8c1b8ea86",
    "Best200Mbps": "ami-0761572a77193af7f",
    "Best25Mbps": "ami-0038e22360a0c5832",
    "Best5000Mbps": "ami-04fe500206eeca546",
    "Better10000Mbps": "ami-0fda2d48646486e8d",
    "Better1000Mbps": "ami-0e496497e43c7fd1b",
    "Better200Mbps": "ami-0d8d9a61a77dbd090",
    "Better25Mbps": "ami-08f11a903718ce9ef",
    "Better5000Mbps": "ami-0e1365e8fc44c0fd9",
    "Good10000Mbps": "ami-010b361ce935878f2",
    "Good1000Mbps": "ami-0c8f3eec42f153d2d",
    "Good200Mbps": "ami-0557502e7feebadbc",
    "Good25Mbps": "ami-09308df829e4f1277",
    "Good5000Mbps": "ami-01b202ada37825b4b",
    "PerAppVeAwaf200Mbps": "ami-09e51b7b03c3aae43",
    "PerAppVeAwaf25Mbps": "ami-05cd641c0192c1a80"
   },
   "eu-central-1": {
    "AdvancedWaf200Mbps": "ami-02abcb1e6317c72af",
    "AdvancedWaf25Mbps": "ami-0171cd5b6e3e8792d",
    "AdvancedWaf3000Mbps": "ami-0bab1074127df65ea",
    "Best10000Mbps": "ami-0b4e5302513521043",
    "Best1000Mbps": "ami-098bacae7d7f40f96",
    "Best200Mbps": "ami-00d987a8b4df5ea6e",
    "Best25Mbps": "ami-08aa3b6b2fa2acdad",
    "Best5000Mbps": "ami-0f9eaa8fa28f80361",
    "Better10000Mbps": "ami-0e895464879c182cb",
    "Better1000Mbps": "ami-014d91e15b5c1ac24",
    "Better200Mbps": "ami-033534b941c55a1c4",
    "Better25Mbps": "ami-0d432233a0afeb963",
    "Better5000Mbps": "ami-00f3b432cce17cd2c",
    "Good10000Mbps": "ami-091b00d3ba79543ce",
    "Good1000Mbps": "ami-07147190290c637da",
    "Good200Mbps": "ami-0f9148590b60fb1db",
    "Good25Mbps": "ami-011787801c1a191c0",
    "Good5000Mbps": "ami-007b87b97352808ca",
    "PerAppVeAwaf200Mbps": "ami-051a80478e4842fcb",
    "PerAppVeAwaf25Mbps": "ami-04e1f3e1f4e296da3"
   },
   "eu-north-1": {
    "AdvancedWaf200Mbps": "ami-0bb351dbe87b2c177",
    "AdvancedWaf25Mbps": "ami-033eeb51a1c37b769",
    "AdvancedWaf3000Mbps": "ami-0e430cc4bbf0b295e",
    "Best10000Mbps": "ami-0ceeeccc3b48ae01c",
    "Best1000Mbps": "ami-06ab37fff48ba8d82",
    "Best200Mbps": "ami-06606b4741ce83093",
    "Best25Mbps": "ami-0036801cdc2aae460",
    "Best5000Mbps": "ami-04bdec371ebbbd17a",
    "Better10000Mbps": "ami-043a3ad93ac14ca15",
    "Better1000Mbps": "ami-09c229bff440c93df",
    "Better200Mbps": "ami-0a8b8111782105bc0",
    "Better25Mbps": "ami-0a9abfdcc95c6f4dd",
    "Better5000Mbps": "ami-084275ec6ab2b145a",
    "Good10000Mbps": "ami-0f1b9cfc291324241",
    "Good1000Mbps": "ami-0d1668491cb752aa8",
    "Good200Mbps": "ami-02c60359d3fe5bebf",
    "Good25Mbps": "ami-063eb7b23b8d19384",
    "Good5000Mbps": "ami-0987b23756696bf0a",
    "PerAppVeAwaf200Mbps": "ami-0bf1773bb32b6d9d0",
    "PerAppVeAwaf25Mbps": "ami-00574e48712d061cb"
   },
   "eu-south-1": {
    "AdvancedWaf200Mbps": "ami-019bd56ffda3ce2f0",
    "AdvancedWaf25Mbps": "ami-004f712702aa9d840",
    "AdvancedWaf3000Mbps": "ami-03139909602c7e579",
    "Best10000Mbps": "ami-0fd7b3f9e0a8a8a52",
    "Best1000Mbps": "ami-0718b95e5def151c0",
    "Best200Mbps": "ami-06240dddce6464063",
    "Best25Mbps": "ami-055463560f7f6b4dd",
    "Best5000Mbps": "ami-09746094e65cbfe26",
    "Better10000Mbps": "ami-07487a363a5339ca8",
    "Better1000Mbps": "ami-08ced25e6f6026ec9",
    "Better200Mbps": "ami-03f15e2b5fffda9fa",
    "Better25Mbps": "ami-0e6ff227c524c836d",
    "Better5000Mbps": "ami-01a3dab6ff35e4f5a",
    "Good10000Mbps": "ami-03790739d099ca2d7",
    "Good1000Mbps": "ami-0f8af02673f8ebf57",
    "Good200Mbps": "ami-0658eb99ff2d6980c",
    "Good25Mbps": "ami-0c8ba44d1fa0e5b40",
    "Good5000Mbps": "ami-0ef62f6f4cc628a51",
    "PerAppVeAwaf200Mbps": "ami-02f6b05caea93420d",
    "PerAppVeAwaf25Mbps": "ami-053ac369f2d74b190"
   },
   "eu-west-1": {
    "AdvancedWaf200Mbps": "ami-06fdd253072726e0b",
    "AdvancedWaf25Mbps": "ami-01c12bc2c9e2c2df4",
    "AdvancedWaf3000Mbps": "ami-0a533e90eb6e07753",
    "Best10000Mbps": "ami-058b7289b92246841",
    "Best1000Mbps": "ami-0b9924287f5813815",
    "Best200Mbps": "ami-0875f7ae53ff8c7c8",
    "Best25Mbps": "ami-05fe9d55e3eddfe4d",
    "Best5000Mbps": "ami-0fad6cee1e7259dd9",
    "Better10000Mbps": "ami-09f5759ae13db2859",
    "Better1000Mbps": "ami-0d0bf50a7bfcf509b",
    "Better200Mbps": "ami-0ae72863196d5c4e9",
    "Better25Mbps": "ami-02ccf8f1ed5232870",
    "Better5000Mbps": "ami-0b597f5564d7c5a8c",
    "Good10000Mbps": "ami-025acf461ca9032f0",
    "Good1000Mbps": "ami-0866baf65420b8861",
    "Good200Mbps": "ami-03f02e15b5ff59db5",
    "Good25Mbps": "ami-06278763e38c53670",
    "Good5000Mbps": "ami-07a024ad48da73239",
    "PerAppVeAwaf200Mbps": "ami-0d3454421f10100bb",
    "PerAppVeAwaf25Mbps": "ami-0dafe3cf406524580"
   },
   "eu-west-2": {
    "AdvancedWaf200Mbps": "ami-0a92ac240a396d391",
    "AdvancedWaf25Mbps": "ami-05e60d09985c6558f",
    "AdvancedWaf3000Mbps": "ami-029b312d7725a71d9",
    "Best10000Mbps": "ami-091fb528b9f577d52",
    "Best1000Mbps": "ami-07b0a9b74703cd0bd",
    "Best200Mbps": "ami-0c8b4a3be60a088db",
    "Best25Mbps": "ami-09aaf20bf41c4406c",
    "Best5000Mbps": "ami-0b59ec60ff6c4c68a",
    "Better10000Mbps": "ami-0cf0c5ef9fa42675d",
    "Better1000Mbps": "ami-081e83e48e638f38a",
    "Better200Mbps": "ami-0f6f496ce2642f390",
    "Better25Mbps": "ami-0831f0dc372fb4702",
    "Better5000Mbps": "ami-0d081b7e15c73ab7b",
    "Good10000Mbps": "ami-055421c068442c67c",
    "Good1000Mbps": "ami-036945c57a3a0101f",
    "Good200Mbps": "ami-04446ee752468c455",
    "Good25Mbps": "ami-024628fa6a20223dc",
    "Good5000Mbps": "ami-08650d409baf8cef5",
    "PerAppVeAwaf200Mbps": "ami-0394c373e4d545a9c",
    "PerAppVeAwaf25Mbps": "ami-0f584e55c3e62d31c"
   },
   "eu-west-3": {
    "AdvancedWaf200Mbps": "ami-06f8b48fe6737578a",
    "AdvancedWaf25Mbps": "ami-0d4f249f34034e9f9",
    "AdvancedWaf3000Mbps": "ami-09ff8a33418d21a63",
    "Best10000Mbps": "ami-09fc6139bfc135cda",
    "Best1000Mbps": "ami-0ca06a78d08941f32",
    "Best200Mbps": "ami-0ad95a3570b17995a",
    "Best25Mbps": "ami-06046941961bf2064",
    "Best5000Mbps": "ami-0396b4e8cbdaa325b",
    "Better10000Mbps": "ami-074cdca8e5663ccd9",
    "Better1000Mbps": "ami-0a6bf3de03980661a",
    "Better200Mbps": "ami-0e67902fe26eeaab1",
    "Better25Mbps": "ami-0b77de4fb6c01a810",
    "Better5000Mbps": "ami-084f55942d0f0acda",
    "Good10000Mbps": "ami-0220d08d33e003d4c",
    "Good1000Mbps": "ami-07369ea42aaf217e8",
    "Good200Mbps": "ami-0ef034a4d2e0c5273",
    "Good25Mbps": "ami-0a14903d7415ddc13",
    "Good5000Mbps": "ami-0fa3c98b614a58f60",
    "PerAppVeAwaf200Mbps": "ami-0b6a2d94e57c50465",
    "PerAppVeAwaf25Mbps": "ami-0e32c65a79a8996ae"
   },
   "me-south-1": {
    "AdvancedWaf200Mbps": "ami-0aedf53d5332a8b91",
    "AdvancedWaf25Mbps": "ami-0cbf8867bf8199c22",
    "AdvancedWaf3000Mbps": "ami-03bea04d72197d392",
    "Best10000Mbps": "ami-08bf5d28c40403a15",
    "Best1000Mbps": "ami-08259c0e102f1c106",
    "Best200Mbps": "ami-0a983104d6a649856",
    "Best25Mbps": "ami-09b16dff7299868af",
    "Best5000Mbps": "ami-0d6033cea15edffe7",
    "Better10000Mbps": "ami-00488f22555260ba2",
    "Better1000Mbps": "ami-0e08f45048892f6f1",
    "Better200Mbps": "ami-0511eb19bbfabd608",
    "Better25Mbps": "ami-0882521d7b755dc3f",
    "Better5000Mbps": "ami-0c5bb30a43c60d348",
    "Good10000Mbps": "ami-0e045a5ad77f8dad6",
    "Good1000Mbps": "ami-097d001d4b4c40d99",
    "Good200Mbps": "ami-0e4ecda9d2b83fc67",
    "Good25Mbps": "ami-0b54969067dbdf413",
    "Good5000Mbps": "ami-0ce0826b125201c34",
    "PerAppVeAwaf200Mbps": "ami-02c669a3b830d7a24",
    "PerAppVeAwaf25Mbps": "ami-0ecf49fe321e41c25"
   },
   "sa-east-1": {
    "AdvancedWaf200Mbps": "ami-09a84ec7a00894773",
    "AdvancedWaf25Mbps": "ami-042c884ab9371628e",
    "AdvancedWaf3000Mbps": "ami-045ec55c4a7c62355",
    "Best10000Mbps": "ami-0dd998fc1e17b0817",
    "Best1000Mbps": "ami-0551322023a1720df",
    "Best200Mbps": "ami-0b14c073bfa34f7e6",
    "Best25Mbps": "ami-0cb1a94adfdad321f",
    "Best5000Mbps": "ami-0e20339cc98cb71a8",
    "Better10000Mbps": "ami-0ef026b396dd757d2",
    "Better1000Mbps": "ami-03dc34fa22330ca20",
    "Better200Mbps": "ami-06ce0ed3518bb4522",
    "Better25Mbps": "ami-057c8ad9adff8923f",
    "Better5000Mbps": "ami-0b1d051d4e8824ec9",
    "Good10000Mbps": "ami-04ca7f519f731c653",
    "Good1000Mbps": "ami-0a74349228970e54a",
    "Good200Mbps": "ami-0c4e4a43f2b18bd2e",
    "Good25Mbps": "ami-08cc48052116fe341",
    "Good5000Mbps": "ami-068ede7eb10706f7c",
    "PerAppVeAwaf200Mbps": "ami-095865af3ab8102da",
    "PerAppVeAwaf25Mbps": "ami-0ef55b01912489cd4"
   },
   "us-east-1": {
    "AdvancedWaf200Mbps": "ami-005bc7b8a626a77c0",
    "AdvancedWaf25Mbps": "ami-0be5f6d3cd2af8ffe",
    "AdvancedWaf3000Mbps": "ami-0f3c4dbe787dc61cd",
    "Best10000Mbps": "ami-0b106df253be770d6",
    "Best1000Mbps": "ami-0c9fbe5643df17e44",
    "Best200Mbps": "ami-05e88b5e0fe482d30",
    "Best25Mbps": "ami-041ae549e4ada56b1",
    "Best5000Mbps": "ami-0d1d3f05e8d1f0cff",
    "Better10000Mbps": "ami-0fbf931d0308f20ad",
    "Better1000Mbps": "ami-0345f5498123b1b20",
    "Better200Mbps": "ami-05a2ccd40cdac7c43",
    "Better25Mbps": "ami-0b5b677407a854481",
    "Better5000Mbps": "ami-0e91d94c356e83098",
    "Good10000Mbps": "ami-0a30167a422ed030c",
    "Good1000Mbps": "ami-0e5008025b76b7689",
    "Good200Mbps": "ami-091c8b69965c4d584",
    "Good25Mbps": "ami-0d0de72603f23bf8f",
    "Good5000Mbps": "ami-071b5f73ea8266439",
    "PerAppVeAwaf200Mbps": "ami-0810b7615648b0e34",
    "PerAppVeAwaf25Mbps": "ami-0e0dda909cc273da7"
   },
   "us-east-2": {
    "AdvancedWaf200Mbps": "ami-01a50399dcc2ea03e",
    "AdvancedWaf25Mbps": "ami-022027c63b7e67eba",
    "AdvancedWaf3000Mbps": "ami-06edaaf65ff3d4c38",
    "Best10000Mbps": "ami-0ec05d14e00e27ef0",
    "Best1000Mbps": "ami-05cb065f22f1372ba",
    "Best200Mbps": "ami-0abea1f8c456d2836",
    "Best25Mbps": "ami-0d97ddbbbfcc2400a",
    "Best5000Mbps": "ami-0911c9998c0cca9a0",
    "Better10000Mbps": "ami-0245582c55d53dfad",
    "Better1000Mbps": "ami-039bc543ef8ec171b",
    "Better200Mbps": "ami-0a60eda48fe0230cc",
    "Better25Mbps": "ami-008d792671ec75267",
    "Better5000Mbps": "ami-06fa606d36a68a388",
    "Good10000Mbps": "ami-08eb88b26e82de9e6",
    "Good1000Mbps": "ami-0a6f38cbc31db4a1a",
    "Good200Mbps": "ami-0c121c99e6e9639e7",
    "Good25Mbps": "ami-01b7fe0f1bfdadaed",
    "Good5000Mbps": "ami-06d5adf175e8d4d21",
    "PerAppVeAwaf200Mbps": "ami-03b0e43fba21eb282",
    "PerAppVeAwaf25Mbps": "ami-0ee2a296b9f4aea98"
   },
   "us-gov-east-1": {
    "AdvancedWaf200Mbps": "ami-0222a5e756d69ca90",
    "AdvancedWaf25Mbps": "ami-0abb0d1d350157d31",
    "AdvancedWaf3000Mbps": "ami-0feb6128c5e40fe91",
    "Best10000Mbps": "ami-035ce4d2aea9c68af",
    "Best1000Mbps": "ami-0bf47a3c614457a07",
    "Best200Mbps": "ami-04008199bda311434",
    "Best25Mbps": "ami-0afd61aecc9c7ec4a",
    "Best5000Mbps": "ami-037809a9a41297f4c",
    "Better10000Mbps": "ami-06544d22fdfcee37a",
    "Better1000Mbps": "ami-08ff39f6780d1686f",
    "Better200Mbps": "ami-0481a59d441608271",
    "Better25Mbps": "ami-0e45175f3103fd581",
    "Better5000Mbps": "ami-060cb44556cf5786b",
    "Good10000Mbps": "ami-0f93e4bcf3e781e39",
    "Good1000Mbps": "ami-06d93d1022698f76e",
    "Good200Mbps": "ami-0e5684803897b7b4e",
    "Good25Mbps": "ami-00b618cfaa91a36ab",
    "Good5000Mbps": "ami-03c7bfeafe18faf38",
    "PerAppVeAwaf200Mbps": "ami-06b88953812d40166",
    "PerAppVeAwaf25Mbps": "ami-0abc1c60812acab55"
   },
   "us-gov-west-1": {
    "AdvancedWaf200Mbps": "ami-03b81ab076fec7d67",
    "AdvancedWaf25Mbps": "ami-0cb8404383786a549",
    "AdvancedWaf3000Mbps": "ami-0dd0e753d3cc35369",
    "Best10000Mbps": "ami-090c25f464bb6d23a",
    "Best1000Mbps": "ami-0fca55cfe7e1ed032",
    "Best200Mbps": "ami-0ff1e25fee9c8191e",
    "Best25Mbps": "ami-071c6317ab2631d73",
    "Best5000Mbps": "ami-0835ef6aa4f4a9b8e",
    "Better10000Mbps": "ami-0c8029201f529444b",
    "Better1000Mbps": "ami-0d381f34ac5cfa5c8",
    "Better200Mbps": "ami-0ee3bafe75bf3e3ec",
    "Better25Mbps": "ami-03217010d6f486f43",
    "Better5000Mbps": "ami-096008e5a88869108",
    "Good10000Mbps": "ami-0f6a1dc8903229e4e",
    "Good1000Mbps": "ami-063a42dd0389fc919",
    "Good200Mbps": "ami-0725cab979d7ac97c",
    "Good25Mbps": "ami-01180ce8a579eb3f5",
    "Good5000Mbps": "ami-0b6b12a1cfbf6d8f4",
    "PerAppVeAwaf200Mbps": "ami-001c2a013517f1d2b",
    "PerAppVeAwaf25Mbps": "ami-038994ce04a388cb1"
   },
   "us-west-1": {
    "AdvancedWaf200Mbps": "ami-020c2cf0635c2da2e",
    "AdvancedWaf25Mbps": "ami-079e4151fff2a688f",
    "AdvancedWaf3000Mbps": "ami-047d0245b0c061ec8",
    "Best10000Mbps": "ami-00da91f2e7c0fa317",
    "Best1000Mbps": "ami-0929b63fb95378721",
    "Best200Mbps": "ami-0f311998221ffb570",
    "Best25Mbps": "ami-0ca078ae217ecb1ef",
    "Best5000Mbps": "ami-0138c0d7c86e9dbef",
    "Better10000Mbps": "ami-0f5311c5cad5e5ef4",
    "Better1000Mbps": "ami-0e6f999b668803335",
    "Better200Mbps": "ami-069b267500f56cb43",
    "Better25Mbps": "ami-00d99854b752e2771",
    "Better5000Mbps": "ami-049263b7a3062c300",
    "Good10000Mbps": "ami-0b304af2654477ea0",
    "Good1000Mbps": "ami-0e1a1c5397d89c1d6",
    "Good200Mbps": "ami-04f8e4c160b146d10",
    "Good25Mbps": "ami-01e5ec53c6de3b5aa",
    "Good5000Mbps": "ami-0f94528c63d7203f3",
    "PerAppVeAwaf200Mbps": "ami-08b68c9896e12fed6",
    "PerAppVeAwaf25Mbps": "ami-00446ab23382aa808"
   },
   "us-west-2": {
    "AdvancedWaf200Mbps": "ami-0ad4a9823b5db8d1e",
    "AdvancedWaf25Mbps": "ami-0e7588ac353b61db9",
    "AdvancedWaf3000Mbps": "ami-0f31f19dc2a186b88",
    "Best10000Mbps": "ami-0bab30ab1428aa069",
    "Best1000Mbps": "ami-07f3f2ce6a7525bf3",
    "Best200Mbps": "ami-051c2ed71aef463f3",
    "Best25Mbps": "ami-0bd5efbcfbfabc942",
    "Best5000Mbps": "ami-0102d124b40d9bd23",
    "Better10000Mbps": "ami-025d8e98b86f93b83",
    "Better1000Mbps": "ami-0fc297f55c9692f17",
    "Better200Mbps": "ami-04882913c8efad5ab",
    "Better25Mbps": "ami-0d351335235e93fd2",
    "Better5000Mbps": "ami-0b8f50737a168421c",
    "Good10000Mbps": "ami-0d643c19479c61b2f",
    "Good1000Mbps": "ami-01912b1383640f757",
    "Good200Mbps": "ami-08952e4b9d551ca97",
    "Good25Mbps": "ami-07c2d3508544d218e",
    "Good5000Mbps": "ami-0a93fada048ce1095",
    "PerAppVeAwaf200Mbps": "ami-083b6173c63b67a9b",
    "PerAppVeAwaf25Mbps": "ami-00eaf5b2aac63c5fb"
   }
  }
 },
 "Metadata": {
  "AWS::CloudFormation::Interface": {
   "ParameterGroups": [
    {
     "Label": {
      "default": "NETWORKING CONFIGURATION"
     },
     "Parameters": [
      "Vpc",
      "managementSubnetAz1",
      "managementSubnetAz2",
      "subnet1Az1",
      "subnet1Az2",
      "subnet2Az1",
      "subnet2Az2",
      "availabilityZone1",
      "availabilityZone2",
      "numberOfAdditionalNics",
      "additionalNicLocation",
      "provisionPublicIP"
     ]
    },
    {
     "Label": {
      "default": "INSTANCE CONFIGURATION"
     },
     "Parameters": [
      "imageName",
      "customImageId",
      "instanceType",
      "applicationInstanceType",
      "licenseKey1",
      "licenseKey2",
      "managementGuiPort",
      "sshKey",
      "restrictedSrcAddress",
      "restrictedSrcAddressApp",
      "ntpServer",
      "timezone",
      "bigIpModules"
     ]
    },
    {
     "Label": {
      "default": "TAGS"
     },
     "Parameters": [
      "application",
      "environment",
      "group",
      "owner",
      "costcenter"
     ]
    },
    {},
    {
     "Label": {
      "default": "TEMPLATE ANALYTICS"
     },
     "Parameters": [
      "allowUsageAnalytics",
      "allowPhoneHome"
     ]
    },
    {
     "Label": {
      "default": "VIRTUAL SERVICE CONFIGURATION"
     },
     "Parameters": [
      "declarationUrl"
     ]
    }
   ],
   "ParameterLabels": {
    "Vpc": {
     "default": "VPC"
    },
    "additionalNicLocation": {
     "default": "Additional NIC Location"
    },
    "allowPhoneHome": {
     "default": "Send Anonymous Device Statistics to F5"
    },
    "allowUsageAnalytics": {
     "default": "Send Anonymous Template Statistics to F5"
    },
    "application": {
     "default": "Application"
    },
    "applicationInstanceType": {
     "default": "Application Instance Type"
    },
    "availabilityZone1": {
     "default": "Availability Zone 1"
    },
    "availabilityZone2": {
     "default": "Availability Zone 2"
    },
    "bigIpModules": {
     "default": "BIG-IP Modules"
    },
    "costcenter": {
     "default": "Cost Center"
    },
    "customImageId": {
     "default": "Custom Image Id"
    },
    "declarationUrl": {
     "default": "AS3 Declaration URL"
    },
    "environment": {
     "default": "Environment"
    },
    "group": {
     "default": "Group"
    },
    "imageName": {
     "default": "BIG-IP Image Name"
    },
    "instanceType": {
     "default": "AWS Instance Size"
    },
    "licenseKey1": {
     "default": "License Key 1"
    },
    "licenseKey2": {
     "default": "License Key 2"
    },
    "managementGuiPort": {
     "default": "BIG-IP Management Port"
    },
    "managementSubnetAz1": {
     "default": "Management Subnet AZ1"
    },
    "managementSubnetAz2": {
     "default": "Management Subnet AZ2"
    },
    "ntpServer": {
     "default": "NTP Server"
    },
    "numberOfAdditionalNics": {
     "default": "Number Of Additional NICs"
    },
    "owner": {
     "default": "Owner"
    },
    "provisionPublicIP": {
     "default": "Provision Public IP addresses for the BIG-IP interfaces"
    },
    "restrictedSrcAddress": {
     "default": "Source Address(es) for Management Access"
    },
    "restrictedSrcAddressApp": {
     "default": "Source Address(es) for Web Application Access (80/443)"
    },
    "sshKey": {
     "default": "SSH Key"
    },
    "subnet1Az1": {
     "default": "Subnet1 in AZ1"
    },
    "subnet1Az2": {
     "default": "Subnet1 in AZ2"
    },
    "subnet2Az1": {
     "default": "Subnet2 in AZ1"
    },
    "subnet2Az2": {
     "default": "Subnet2 in AZ2"
    },
    "timezone": {
     "default": "Timezone (Olson)"
    }
   }
  },
  "Version": "6.4.0"
 },
 "Outputs": {
  "Bigip1ExternalInterfacePrivateIp": {
   "Description": "Internally routable IP of the public interface on BIG-IP",
   "Value": {
    "Fn::GetAtt": [
     "Bigip1subnet1Az1Interface",
     "PrimaryPrivateIpAddress"
    ]
   }
  },
  "Bigip1InstanceId": {
   "Description": "Instance Id of BIG-IP in Amazon",
   "Value": {
    "Ref": "Bigip1Instance"
   }
  },
  "Bigip1ManagementEipAddress": {
   "Condition": "usePublicIP",
   "Description": "IP address of the management port on BIG-IP",
   "Value": {
    "Ref": "Bigip1ManagementEipAddress"
   }
  },
  "Bigip1ManagementInterface": {
   "Description": "Management interface ID on BIG-IP",
   "Value": {
    "Ref": "Bigip1ManagementInterface"
   }
  },
  "Bigip1ManagementInterfacePrivateIp": {
   "Description": "Internally routable IP of the management interface on BIG-IP",
   "Value": {
    "Fn::GetAtt": [
     "Bigip1ManagementInterface",
     "PrimaryPrivateIpAddress"
    ]
   }
  },
  "Bigip1Url": {
   "Condition": "usePublicIP",
   "Description": "BIG-IP Management GUI",
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Fn::GetAtt": [
        "Bigip1Instance",
        "PublicIp"
       ]
      }
     ]
    ]
   }
  },
  "Bigip1VipEipAddress": {
   "Condition": "usePublicIP",
   "Description": "EIP address for VIP",
   "Value": {
    "Fn::Join": [
     "",
     [
      "http://",
      {
       "Ref": "Bigip1VipEipAddress"
      },
      ":80"
     ]
    ]
   }
  },
  "Bigip1VipPrivateIp": {
   "Description": "Secondary IP 1 on BIG-IP1's External Interface.",
   "Value": {
    "Fn::Select": [
     "0",
     {
      "Fn::GetAtt": [
       "Bigip1subnet1Az1Interface",
       "SecondaryPrivateIpAddresses"
      ]
     }
    ]
   }
  },
  "Bigip1subnet1Az1Interface": {
   "Description": "External interface Id on BIG-IP",
   "Value": {
    "Ref": "Bigip1subnet1Az1Interface"
   }
  },
  "Bigip1subnet1Az1SelfEipAddress": {
   "Condition": "usePublicIP",
   "Description": "IP Address of the External interface attached to BIG-IP",
   "Value": {
    "Ref": "Bigip1subnet1Az1SelfEipAddress"
   }
  },
  "Bigip2ExternalInterfacePrivateIp": {
   "Description": "Internally routable IP of the public interface on BIG-IP",
   "Value": {
    "Fn::GetAtt": [
     "Bigip2subnet1Az1Interface",
     "PrimaryPrivateIpAddress"
    ]
   }
  },
  "Bigip2InstanceId": {
   "Description": "Instance Id of BIG-IP in Amazon",
   "Value": {
    "Ref": "Bigip2Instance"
   }
  },
  "Bigip2ManagementEipAddress": {
   "Condition": "usePublicIP",
   "Description": "IP address of the management port on BIG-IP",
   "Value": {
    "Ref": "Bigip2ManagementEipAddress"
   }
  },
  "Bigip2ManagementInterface": {
   "Description": "Management interface ID on BIG-IP",
   "Value": {
    "Ref": "Bigip2ManagementInterface"
   }
  },
  "Bigip2ManagementInterfacePrivateIp": {
   "Description": "Internally routable IP of the management interface on BIG-IP",
   "Value": {
    "Fn::GetAtt": [
     "Bigip2ManagementInterface",
     "PrimaryPrivateIpAddress"
    ]
   }
  },
  "Bigip2Url": {
   "Condition": "usePublicIP",
   "Description": "BIG-IP Management GUI",
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Fn::GetAtt": [
        "Bigip2Instance",
        "PublicIp"
       ]
      }
     ]
    ]
   }
  },
  "Bigip2VipPrivateIp": {
   "Description": "Secondary IP 1 on BIG-IP2's External Interface.",
   "Value": {
    "Fn::Select": [
     "0",
     {
      "Fn::GetAtt": [
       "Bigip2subnet1Az1Interface",
       "SecondaryPrivateIpAddresses"
      ]
     }
    ]
   }
  },
  "Bigip2subnet1Az1Interface": {
   "Description": "External interface Id on BIG-IP",
   "Value": {
    "Ref": "Bigip2subnet1Az1Interface"
   }
  },
  "Bigip2subnet1Az1SelfEipAddress": {
   "Condition": "usePublicIP",
   "Description": "IP Address of the External interface attached to BIG-IP",
   "Value": {
    "Ref": "Bigip2subnet1Az1SelfEipAddress"
   }
  },
  "availabilityZone1": {
   "Description": "Availability Zone",
   "Value": {
    "Fn::GetAtt": [
     "Bigip1Instance",
     "AvailabilityZone"
    ]
   }
  },
  "availabilityZone2": {
   "Description": "Availability Zone",
   "Value": {
    "Fn::GetAtt": [
     "Bigip2Instance",
     "AvailabilityZone"
    ]
   }
  },
  "bigipExternalSecurityGroup": {
   "Description": "Public or External Security Group",
   "Value": {
    "Ref": "bigipExternalSecurityGroup"
   }
  },
  "bigipManagementSecurityGroup": {
   "Description": "Management Security Group",
   "Value": {
    "Ref": "bigipManagementSecurityGroup"
   }
  }
 },
 "Parameters": {
  "Vpc": {
   "ConstraintDescription": "This must be an existing VPC within the working region.",
   "Type": "AWS::EC2::VPC::Id"
  },
  "allowPhoneHome": {
   "AllowedValues": [
    "Yes",
    "No"
   ],
   "Default": "Yes",
   "Description": "This deployment can send anonymous device statistics to F5 to help us determine how to improve our solutions. If you select **No** statistics are not sent.",
   "Type": "String"
  },
  "allowUsageAnalytics": {
   "AllowedValues": [
    "Yes",
    "No"
   ],
   "Default": "Yes",
   "Description": "This deployment can send anonymous template statistics to F5 to help us determine how to improve our solutions. If you select **No** statistics are not sent.",
   "Type": "String"
  },
  "application": {
   "Default": "f5app",
   "Description": "Name of the Application Tag",
   "Type": "String"
  },
  "bigIpModules": {
   "Default": "ltm:nominal",
   "Description": "Comma separated list of modules and levels to provision, for example: ltm:nominal,asm:nominal",
   "Type": "String"
  },
  "costcenter": {
   "Default": "f5costcenter",
   "Description": "Name of the Cost Center Tag",
   "Type": "String"
  },
  "customImageId": {
   "ConstraintDescription": "Must be a valid AMI Id",
   "Default": "OPTIONAL",
   "Description": "If you would like to deploy using a custom BIG-IP image, provide the AMI Id.  **Note**: Unless specifically required, leave the default of **OPTIONAL**",
   "MaxLength": 255,
   "MinLength": 1,
   "Type": "String"
  },
  "declarationUrl": {
   "AllowedPattern": "^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$|^none$",
   "Default": "none",
   "Description": "URL for the AS3 declaration JSON file to be deployed. Leave as **none** to deploy without a service configuration.",
   "Type": "String"
  },
  "environment": {
   "Default": "f5env",
   "Description": "Name of the Environment Tag",
   "Type": "String"
  },
  "group": {
   "Default": "f5group",
   "Description": "Name of the Group Tag",
   "Type": "String"
  },
  "imageName": {
   "AllowedValues": [
    "Good25Mbps",
    "Good200Mbps",
    "Good1000Mbps",
    "Good5000Mbps",
    "Good10000Mbps",
    "Good16vCPU",
    "Better25Mbps",
    "Better200Mbps",
    "Better1000Mbps",
    "Better5000Mbps",
    "Better10000Mbps",
    "Best25Mbps",
    "Best200Mbps",
    "Best1000Mbps",
    "Best5000Mbps",
    "Best10000Mbps",
    "AdvancedWaf25Mbps",
    "AdvancedWaf200Mbps"
   ],
   "ConstraintDescription": "Must be a valid F5 BIG-IP VE image type",
   "Default": "Best1000Mbps",
   "Description": "F5 BIG-IP Performance Type",
   "Type": "String"
  },
  "instanceType": {
   "AllowedValues": [
    "m5.xlarge",
    "m5.4xlarge",
    "m5.large",
    "m5.12xlarge",
    "m4.xlarge",
    "m4.large",
    "m4.4xlarge",
    "m4.2xlarge",
    "m4.16xlarge",
    "m4.10xlarge",
    "m3.xlarge",
    "m3.medium",
    "m3.large",
    "t3.large",
    "m3.2xlarge",
    "cc2.8xlarge",
    "c5.xlarge",
    "c5.large",
    "c5.4xlarge",
    "c5.9xlarge",
    "c4.xlarge",
    "c4.8xlarge",
    "c4.4xlarge",
    "c4.2xlarge",
    "c3.xlarge",
    "c3.8xlarge",
    "c3.4xlarge",
    "c3.2xlarge",
    "c5n.2xlarge",
    "c5n.4xlarge"
   ],
   "ConstraintDescription": "Must be a valid EC2 instance type for BIG-IP",
   "Default": "m5.xlarge",
   "Description": "Size of the F5 BIG-IP Virtual Instance",
   "Type": "String"
  },
  "managementSubnetAz1": {
   "ConstraintDescription": "The subnet ID must be within an existing VPC",
   "Description": "Management Subnet ID",
   "Type": "AWS::EC2::Subnet::Id"
  },
  "ntpServer": {
   "Default": "0.pool.ntp.org",
   "Description": "NTP server for this implementation",
   "Type": "String"
  },
  "owner": {
   "Default": "f5owner",
   "Description": "Name of the Owner Tag",
   "Type": "String"
  },
  "provisionPublicIP": {
   "AllowedValues": [
    "Yes",
    "No"
   ],
   "Default": "Yes",
   "Description": "Whether or not to provision Public IP Addresses for the BIG-IP Network Interfaces. By Default no Public IP addresses are provisioned.",
   "Type": "String"
  },
  "restrictedSrcAddress": {
   "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
   "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x.",
   "Description": " The IP address range used to SSH and access managment GUI on the EC2 instances",
   "MaxLength": "18",
   "MinLength": "9",
   "Type": "String"
  },
  "restrictedSrcAddressApp": {
   "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
   "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x.",
   "Description": " The IP address range that can be used to access web traffic (80/443) to the EC2 instances",
   "MaxLength": "18",
   "MinLength": "9",
   "Type": "String"
  },
  "sshKey": {
   "Description": "EC2 KeyPair to enable SSH access to the BIG-IP instance",
   "Type": "AWS::EC2::KeyPair::KeyName"
  },
  "subnet1Az1": {
   "ConstraintDescription": "The subnet ID must be within an existing VPC",
   "Description": "Public or External subnet",
   "Type": "AWS::EC2::Subnet::Id"
  },
  "timezone": {
   "Default": "UTC",
   "Description": "Enter the Olson timezone string from /usr/share/zoneinfo. The default is 'UTC'. See the TZ column here (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) for legal values. For example, 'US/Eastern'.",
   "Type": "String"
  }
 },
 "Resources": {
  "Bigip1Instance": {
   "Metadata": {
    "AWS::CloudFormation::Init": {
     "config": {
      "commands": {
       "000-disable-1nicautoconfig": {
        "command": "/usr/bin/setdb provision.1nicautoconfig disable"
       },
       "001-rest-extend-rpm-timeout": {
        "command": "/usr/bin/setdb iapplxrpm.timeout 300 || exit 0"
       },
       "002-rest-extend-icrd-timeout": {
        "command": "/usr/bin/setdb icrd.timeout 180 || exit 0"
       },
       "003-rest-extend-restjavad-timeout": {
        "command": "/usr/bin/setdb restjavad.timeout 180 || exit 0"
       },
       "004-rest-extend-restnoded-timeout": {
        "command": "/usr/bin/setdb restnoded.timeout 180 || exit 0"
       },
       "005-rest-provision-extramb": {
        "command": "/usr/bin/setdb provision.extramb 1000"
       },
       "006-rest-use-extramb": {
        "command": "/usr/bin/setdb restjavad.useextramb true"
       },
       "007-rest-post": {
        "command": "/usr/bin/curl -s -f -u admin: -H \"Content-Type: application/json\" -d '{\"maxMessageBodySize\":134217728}' -X POST http://localhost:8100/mgmt/shared/server/messaging/settings/8100 | jq ."
       },
       "008-rest-restart": {
        "command": "bigstart restart restjavad restnoded"
       },
       "010-install-libs": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "mkdir -p /var/log/cloud/aws;",
           "nohup /config/installCloudLibs.sh",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "020-generate-password": {
        "command": {
         "Fn::Join": [
          "",
          [
           "nohup /config/waitThenRun.sh",
           " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           " --signal PASSWORD_CREATED",
           " --file f5-rest-node",
           " --cl-args '/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/generatePassword --file /config/cloud/aws/.adminPassword --encrypt'",
           " --log-level silly",
           " -o /var/log/cloud/aws/generatePassword.log",
           " &>> /var/log/cloud/aws/install.log < /dev/null",
           " &"
          ]
         ]
        }
       },
       "030-create-admin-user": {
        "command": {
         "Fn::Join": [
          "",
          [
           "nohup /config/waitThenRun.sh",
           " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           " --wait-for PASSWORD_CREATED",
           " --signal ADMIN_CREATED",
           " --file /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/createUser.sh",
           " --cl-args '--user srv_user",
           " --password-file /config/cloud/aws/.adminPassword",
           " --password-encrypted",
           "'",
           " --log-level silly",
           " -o /var/log/cloud/aws/createUser.log",
           " &>> /var/log/cloud/aws/install.log < /dev/null",
           " &"
          ]
         ]
        }
       },
       "040-network-config": {
        "command": {
         "Fn::Join": [
          "",
          [
           "GATEWAY_MAC=`cat /config/cloud/net1_mac | awk '{print tolower($2)}'`\n",
           "sleep 30 && TOKEN=`/usr/bin/curl -sS --retry 20 -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 120'`\n",
           "GATEWAY_CIDR_BLOCK=`/usr/bin/curl -s -f --retry 20 -H 'X-aws-ec2-metadata-token: '$TOKEN'' http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC}/subnet-ipv4-cidr-block`; ",
           "GATEWAY_NET=${GATEWAY_CIDR_BLOCK%/*}; ",
           "GATEWAY_PREFIX=${GATEWAY_CIDR_BLOCK#*/}; ",
           "GATEWAY=`echo ${GATEWAY_NET} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`; ",
           "nohup /config/waitThenRun.sh ",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/network.js ",
           "--host localhost ",
           "-o /var/log/cloud/aws/network.log ",
           "--log-level silly ",
           "--wait-for ADMIN_CREATED ",
           "--signal NETWORK_CONFIG_DONE ",
           "--vlan name:external,nic:1.1 ",
           "--default-gw ${GATEWAY} ",
           "--self-ip 'name:external-self,address:",
           {
            "Fn::GetAtt": [
             "Bigip1subnet1Az1Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "/'${GATEWAY_PREFIX}',vlan:external,allow:tcp:4353 udp:1026' ",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "050-onboard-BIG-IP": {
        "command": {
         "Fn::If": [
          "optin",
          {
           "Fn::Join": [
            " ",
            [
             "REGION=\"",
             {
              "Ref": "AWS::Region"
             },
             "\";",
             "DEPLOYMENTID=`echo \"",
             {
              "Ref": "AWS::StackId"
             },
             "\"|sha512sum|cut -d \" \" -f 1`;",
             "CUSTOMERID=`echo \"",
             {
              "Ref": "AWS::AccountId"
             },
             "\"|sha512sum|cut -d \" \" -f 1`;",
             "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth0`;",
             "nohup /config/waitThenRun.sh",
             "TOKEN=`/usr/bin/curl -sS --retry 20 -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 120'`;",
             "HOSTNAME=`/usr/bin/curl -sS --retry 20 -H 'X-aws-ec2-metadata-token: '$TOKEN'' http://169.254.169.254/latest/meta-data/hostname`;",
             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
             "--wait-for NETWORK_CONFIG_DONE",
             "--signal ONBOARD_DONE",
             "-o /var/log/cloud/aws/onboard.log",
             "--log-level silly",
             "--no-reboot",
             "--host localhost",
             "--hostname ${HOSTNAME}",
             "--ntp ",
             {
              "Ref": "ntpServer"
             },
             "--tz ",
             {
              "Ref": "timezone"
             },
             "--dns ${NAME_SERVER}",
             "--modules ",
             {
              "Ref": "bigIpModules"
             },
             "--metrics \"cloudName:aws,region:${REGION},bigIpVersion:16.1.3.3-0.0.3,customerId:${CUSTOMERID},deploymentId:${DEPLOYMENTID},templateName:f5-existing-stack-same-az-cluster-payg-2nic-bigip.template,templateVersion:6.4.0,licenseType:hourly\"",
             "-d tm.tcpudptxchecksum:software-only ",
             "--ping",
             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          },
          {
           "Fn::Join": [
            " ",
            [
             "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth0`;",
             "nohup /config/waitThenRun.sh",
             "TOKEN=`/usr/bin/curl -sS --retry 20 -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 120'`;",
             "HOSTNAME=`/usr/bin/curl -sS --retry 20 -H 'X-aws-ec2-metadata-token: '$TOKEN'' http://169.254.169.254/latest/meta-data/hostname`;",
             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
             "--wait-for NETWORK_CONFIG_DONE",
             "--signal ONBOARD_DONE",
             "-o /var/log/cloud/aws/onboard.log",
             "--log-level silly",
             "--no-reboot",
             "--host localhost",
             "--hostname ${HOSTNAME}",
             "--ntp ",
             {
              "Ref": "ntpServer"
             },
             "--tz ",
             {
              "Ref": "timezone"
             },
             "--dns ${NAME_SERVER}",
             "--modules ",
             {
              "Ref": "bigIpModules"
             },
             "-d tm.tcpudptxchecksum:software-only ",
             "--ping",
             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          }
         ]
        }
       },
       "055-custom-config": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           "--file /config/cloud/aws/custom-config.sh",
           "--cwd /config/cloud/aws",
           "-o /var/log/cloud/aws/custom-config.log",
           "--log-level silly",
           "--wait-for ONBOARD_DONE",
           "--signal CUSTOM_CONFIG_DONE",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "060-cluster": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "TOKEN=`/usr/bin/curl -sS --retry 20 -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 120'`;",
           "HOSTNAME=`/usr/bin/curl -sS -f --retry 20 -H 'X-aws-ec2-metadata-token: '$TOKEN'' http://169.254.169.254/latest/meta-data/hostname`;",
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/cluster.js",
           "--wait-for CUSTOM_CONFIG_DONE",
           "--signal CLUSTER_DONE",
           "-o /var/log/cloud/aws/cluster.log",
           "--log-level silly",
           "--host localhost",
           "--delete-remote-primary-creds",
           "--user srv_user",
           "--delete-local-creds",
           "--password-url file:///config/cloud/aws/.adminPassword",
           "--password-encrypted",
           "--cloud aws",
           "--provider-options 's3Bucket:",
           {
            "Ref": "S3Bucket"
           },
           "'",
           "--primary",
           "--config-sync-ip",
           {
            "Fn::GetAtt": [
             "Bigip1subnet1Az1Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "--create-group",
           "--device-group same_az_failover_group",
           "--sync-type sync-failover",
           "--network-failover",
           "--device ${HOSTNAME}",
           "--auto-sync",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "065-cfe": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           "--file /config/cloud/aws/cfe-config.sh",
           "--cwd /config/cloud/aws",
           "-o /var/log/cloud/aws/cfe-config.log",
           "--log-level silly",
           "--wait-for CLUSTER_DONE",
           "--signal CFE_CONFIG_DONE",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "070-rm-password": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           "--file /config/cloud/aws/rm-srv-user.sh",
           "-o /var/log/cloud/aws/rm-srv-user.log",
           "--log-level silly",
           "--wait-for CFE_CONFIG_DONE",
           "--signal SRV_USER_REMOVED",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       }
      },
      "files": {
       "/config/cloud/aws/cfe-config.sh": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "source /config/cloud/aws/onboard_config_vars\n",
           "cfe_file_loc=\"/config/cloud/cfe_config.json\"\n",
           "cfe_response_code=$(/usr/bin/curl -svvu admin: -w \"%{http_code}\" -X POST -H \"Content-Type: application/json\" http://localhost:8100/mgmt/shared/cloud-failover/declare -d @$cfe_file_loc -o /dev/null)\n",
           "if [[ $cfe_response_code == 200 || $cfe_response_code == 502 ]]; then\n",
           "    echo \"Deployment of CFE application succeeded.\"\n",
           "    cfe_deployed=\"yes\"\n",
           "else\n",
           "    echo \"Failed to deploy CFE application; continuing...\"\n",
           "fi\n",
           "#Disable built-in script\nmount -o remount,rw /usr\n",
           "mv /usr/libexec/aws/aws-failover-tgactive.sh /usr/libexec/aws/aws-failover-tgactive.sh.disabled\n",
           "mv /usr/libexec/aws/aws-failover-tgrefresh.sh /usr/libexec/aws/aws-failover-tgrefresh.sh.disabled\n",
           "mount -o remount,ro /usr\n"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/custom-config.sh": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "TOKEN=`/usr/bin/curl -sS --retry 20 -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 120'`\n",
           "EXTIP='",
           {
            "Fn::GetAtt": [
             "Bigip1subnet1Az1Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "'\n",
           "EXTPRIVIP='",
           {
            "Fn::Select": [
             "0",
             {
              "Fn::GetAtt": [
               "Bigip1subnet1Az1Interface",
               "SecondaryPrivateIpAddresses"
              ]
             }
            ]
           },
           "'\n",
           "HOSTNAME=`/usr/bin/curl -sS -f --retry 20 -H 'X-aws-ec2-metadata-token: '$TOKEN http://169.254.169.254/latest/meta-data/hostname`\n",
           "PEER_EXTPRIVIP='",
           {
            "Fn::Select": [
             "0",
             {
              "Fn::GetAtt": [
               "Bigip2subnet1Az1Interface",
               "SecondaryPrivateIpAddresses"
              ]
             }
            ]
           },
           "'\n",
           "PROGNAME=$(basename $0)\n",
           "function error_exit {\n",
           "echo \"${PROGNAME}: ${1:-\\\"Unknown Error\\\"}\" 1>&2\n",
           "exit 1\n",
           "}\n",
           "declare -a tmsh=()\n",
           "echo 'starting custom-config.sh'\n",
           "source /config/cloud/aws/onboard_config_vars\n",
           "if [[ $allowPhoneHome == \"No\" ]]; then\n",
           "    tmsh+=(\n",
           "    \"tmsh modify sys software update auto-phonehome disabled\")\n",
           "fi\n",
           "tmsh+=(\n",
           "\"tmsh modify sys db dhclient.mgmt { value disable }\"\n",
           "\"tmsh modify cm device ${HOSTNAME} unicast-address { { effective-ip ${EXTIP} effective-port 1026 ip ${EXTIP} } }\"\n",
           "\"tmsh save /sys config\")\n",
           "for CMD in \"${tmsh[@]}\"\n",
           "do\n",
           "  \"/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/waitForMcp.sh\"\n",
           "    if $CMD;then\n",
           "        echo \"command $CMD successfully executed.\"\n",
           "    else\n",
           "        error_exit \"$LINENO: An error has occurred while executing $CMD. Aborting!\"\n",
           "    fi\n",
           "done\n",
           "date\n",
           "### START CUSTOM CONFIGURATION\n",
           "deployed=\"no\"\n",
           "url_regex=\"(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$\"\n",
           "file_loc=\"/config/cloud/custom_config\"\n",
           "if [[ $declarationUrl =~ $url_regex ]]; then\n",
           "  response_code=$(/usr/bin/curl -sk -w \"%{http_code}\" $declarationUrl -o $file_loc)\n",
           "  if [[ $response_code == 200 ]]; then\n",
           "    echo \"Custom config download complete; checking for valid JSON.\"\n",
           "    cat $file_loc | jq .class\n",
           "    if [[ $? == 0 ]]; then\n",
           "      response_code=$(/usr/bin/curl -svvu admin: -w \"%{http_code}\" -X POST -H \"Content-Type: application/json\" -H \"Expect:\" http://localhost:8100/mgmt/shared/appsvcs/declare -d @$file_loc -o /dev/null)\n",
           "      if [[ $response_code == 200 || $response_code == 502 ]]; then\n",
           "        echo \"Deployment of custom application succeeded.\"\n",
           "        deployed=\"yes\"\n",
           "      else\n",
           "         echo \"Failed to deploy custom application; continuing...\"\n",
           "      fi\n",
           "    else\n",
           "      echo \"Custom config was not valid JSON, continuing...\"\n",
           "    fi\n",
           "  else\n",
           "    echo \"Failed to download custom config; continuing...\"\n",
           "  fi\n",
           "else\n",
           "  echo \"Custom config was not a URL, continuing...\"\n",
           "fi\n",
           "### END CUSTOM CONFIGURATION"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/getNameServer.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "INTERFACE=$1",
           "INTERFACE_MAC=`ifconfig ${INTERFACE} | egrep ether | awk '{print tolower($2)}'`",
           "TOKEN=`/usr/bin/curl -sS --retry 20 -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 120'`",
           "VPC_CIDR_BLOCK=`/usr/bin/curl -s -f --retry 20 -H 'X-aws-ec2-metadata-token: '$TOKEN'' http://169.254.169.254/latest/meta-data/network/interfaces/macs/${INTERFACE_MAC}/vpc-ipv4-cidr-block`",
           "VPC_NET=${VPC_CIDR_BLOCK%/*}",
           "NAME_SERVER=`echo ${VPC_NET} | awk -F. '{ printf \"%d.%d.%d.%d\", $1, $2, $3, $4+2 }'`",
           "echo $NAME_SERVER"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/onboard_config_vars": {
        "content": {
         "Fn::Join": [
          "",
          [
           "",
           "#!/bin/bash\n",
           "# Generated from 6.4.0\n",
           "TOKEN=`/usr/bin/curl -sS --retry 20 -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 120'`\n",
           "HOSTNAME=`/usr/bin/curl -sS --retry 20 -H 'X-aws-ec2-metadata-token: '$TOKEN'' http://169.254.169.254/latest/meta-data/hostname`\n",
           "region='",
           {
            "Ref": "AWS::Region"
           },
           "'\n",
           "adminUsername='srv_user'\n",
           "managementGuiPort='443'\n",
           "timezone='",
           {
            "Ref": "timezone"
           },
           "'\n",
           "ntpServer='",
           {
            "Ref": "ntpServer"
           },
           "'\n",
           "declarationUrl='",
           {
            "Ref": "declarationUrl"
           },
           "'\n",
           "allowPhoneHome='",
           {
            "Ref": "allowPhoneHome"
           },
           "'\n",
           "passwd=$(f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/decryptDataFromFile.js --data-file /config/cloud/aws/.adminPassword)\n"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/rm-srv-user.sh": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "PROGNAME=$(basename $0)\n",
           "function error_exit {\n",
           "echo \"${PROGNAME}: ${1:-\"Unknown Error\"}\" 1>&2\n",
           "exit 1\n",
           "}\n",
           "date\n",
           "echo 'starting rm-srv-user.sh'\n",
           "declare -a tmsh=()\n",
           "tmsh+=(\"rm /config/cloud/aws/.adminPassword\")\n",
           "for CMD in \"${tmsh[@]}\"\n",
           "do\n",
           "  if $CMD;then\n",
           "      echo \"command $CMD successfully executed.\"\n",
           "  else\n",
           "      error_exit \"$LINENO: An error has occurred while executing $CMD. Aborting!\"\n",
           "  fi\n",
           "done\n",
           "date\n",
           "flag=true\n",
           "while $flag\n",
           "do\n",
           "response=$(tmsh show cm sync-status)\n",
           "if echo $response | grep 'All devices in the device group are in sync' ; then\n",
           "flag=false\n",
           "tmsh delete auth user srv_user\n",
           "fi\n",
           "done\n"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/cfe_config.json": {
        "content": {
         "Fn::Join": [
          "",
          [
           "{\n",
           "    \"class\":\"Cloud_Failover\",\n",
           "    \"controls\":{\n",
           "      \"class\":\"Controls\",\n",
           "      \"logLevel\":\"silly\"\n",
           "    },\n",
           "    \"environment\":\"aws\",\n",
           "    \"externalStorage\":{\n",
           "      \"scopingTags\":{\n",
           "      \"f5_cloud_failover_label\":\"",
           {
            "Ref": "AWS::StackName"
           },
           "\"\n",
           "      }\n",
           "    },\n",
           "    \"failoverAddresses\":{\n",
           "      \"scopingTags\":{\n",
           "      \"f5_cloud_failover_label\":\"",
           {
            "Ref": "AWS::StackName"
           },
           "\"\n",
           "      }\n",
           "    },\n",
           "    \"failoverRoutes\":{\n",
           "      \"scopingTags\":{\n",
           "      \"f5_cloud_failover_label\":\"",
           {
            "Ref": "AWS::StackName"
           },
           "\"\n",
           "      },\n",
           "      \"scopingAddressRanges\":[\n",
           "           {\n",
           "             \"range\":\"192.0.2.0\\/24\"\n",
           "           }\n",
           "       ],\n",
           "      \"defaultNextHopAddresses\":{\n",
           "        \"discoveryType\":\"static\",\n",
           "        \"items\":[\n",
           "              \"",
           {
            "Fn::GetAtt": [
             "Bigip1subnet1Az1Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "\",\n",
           "              \"",
           {
            "Fn::GetAtt": [
             "Bigip2subnet1Az1Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "\"\n",
           "         ]\n",
           "       }\n",
           "     }\n",
           "}"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/f5-cloud-libs-aws.tar.gz": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "http://cdn.f5.com/product/cloudsolutions/f5-cloud-libs-aws/v2.10.1/f5-cloud-libs-aws.tar.gz"
       },
       "/config/cloud/f5-cloud-libs.tar.gz": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "http://cdn.f5.com/product/cloudsolutions/f5-cloud-libs/v4.28.1/f5-cloud-libs.tar.gz"
       },
       "/config/installCloudLibs.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "#!/bin/bash",
           "echo about to execute",
           "checks=0",
           "while [ $checks -lt 120 ]; do echo checking mcpd",
           "    tmsh -a show sys mcp-state field-fmt | grep -q running",
           "    if [ $? == 0 ]; then",
           "        echo mcpd ready",
           "        break",
           "    fi",
           "    echo mcpd not ready yet",
           "    let checks=checks+1",
           "    sleep 10",
           "done",
           "echo loading verifyHash script",
           "if ! tmsh load sys config merge file /config/verifyHash; then",
           "    echo cannot validate signature of /config/verifyHash",
           "    exit",
           "fi",
           "echo loaded verifyHash",
           "declare -a filesToVerify=(\"/config/cloud/f5-cloud-libs.tar.gz\" \"/config/cloud/f5-cloud-libs-aws.tar.gz\")",
           "for fileToVerify in \"${filesToVerify[@]}\"",
           "do",
           "    echo verifying \"$fileToVerify\"",
           "    if ! tmsh run cli script verifyHash \"$fileToVerify\"; then",
           "        echo \"$fileToVerify\" is not valid",
           "        exit 1",
           "    fi",
           "    echo verified \"$fileToVerify\"",
           "done",
           "mkdir -p /config/cloud/aws/node_modules/@f5devcentral",
           "echo expanding f5-cloud-libs.tar.gz",
           "tar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
           "echo installing dependencies",
           "tar xvfz /config/cloud/f5-cloud-libs-aws.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
           "echo cloud libs install complete",
           "touch /config/cloud/cloudLibsReady"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/verifyHash": {
        "content": "cli script /Common/verifyHash {\nproc script::run {} {\n        if {[catch {\n            set hashes(f5-cloud-libs.tar.gz) 3cb16d5d65e0213fdce46d503b6849d30e5d796e08284d2412655f2dde93f0050631274e67eae56a839331cae49527bf6493c0dd3ec2c925e6301f879449c2c6\n            set hashes(f5-cloud-libs-aws.tar.gz) c2eadf04a910e28a52c21e1b9af9015b5a4e5a50501bc0dfbd354d03d08d5a82fe8c0326dd4138b835ff88fc17232e957b8f2d3fb031ed1809fd3d0b973afe09\n            set hashes(f5-cloud-libs-azure.tar.gz) 703bae0e774114b16528ca71bb2109db5f36623f8b8698588348677862ffa48559ba9698001d2f245860059a4fec588a15ee924317b967bf338cca66b0de6936\n            set hashes(f5-cloud-libs-gce.tar.gz) fd16ab827b3089e76d5c77c713a2eabe685707dba7207cfdf2778db2e96281fc8e3e4424fb20f584c44cb9722b4fbf352e7c364de5fed61a74bd138f974705b2\n            set hashes(f5-cloud-libs-openstack.tar.gz) 5c83fe6a93a6fceb5a2e8437b5ed8cc9faf4c1621bfc9e6a0779f6c2137b45eab8ae0e7ed745c8cf821b9371245ca29749ca0b7e5663949d77496b8728f4b0f9\n            set hashes(f5-cloud-libs-consul.tar.gz) a32aab397073df92cbbba5067e5823e9b5fafca862a258b60b6b40aa0975c3989d1e110f706177b2ffbe4dde65305a260a5856594ce7ad4ef0c47b694ae4a513\n            set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0\n            set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034\n            set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe\n            set hashes(f5.http.v1.2.0rc7.tmpl) 21f413342e9a7a281a0f0e1301e745aa86af21a697d2e6fdc21dd279734936631e92f34bf1c2d2504c201f56ccd75c5c13baa2fe7653213689ec3c9e27dff77d\n            set hashes(f5.aws_advanced_ha.v1.3.0rc1.tmpl) 9e55149c010c1d395abdae3c3d2cb83ec13d31ed39424695e88680cf3ed5a013d626b326711d3d40ef2df46b72d414b4cb8e4f445ea0738dcbd25c4c843ac39d\n            set hashes(f5.aws_advanced_ha.v1.4.0rc1.tmpl) de068455257412a949f1eadccaee8506347e04fd69bfb645001b76f200127668e4a06be2bbb94e10fefc215cfc3665b07945e6d733cbe1a4fa1b88e881590396\n            set hashes(f5.aws_advanced_ha.v1.4.0rc2.tmpl) 6ab0bffc426df7d31913f9a474b1a07860435e366b07d77b32064acfb2952c1f207beaed77013a15e44d80d74f3253e7cf9fbbe12a90ec7128de6facd097d68f\n            set hashes(f5.aws_advanced_ha.v1.4.0rc3.tmpl) 2f2339b4bc3a23c9cfd42aae2a6de39ba0658366f25985de2ea53410a745f0f18eedc491b20f4a8dba8db48970096e2efdca7b8efffa1a83a78e5aadf218b134\n            set hashes(f5.aws_advanced_ha.v1.4.0rc4.tmpl) 2418ac8b1f1884c5c096cbac6a94d4059aaaf05927a6a4508fd1f25b8cc6077498839fbdda8176d2cf2d274a27e6a1dae2a1e3a0a9991bc65fc74fc0d02ce963\n            set hashes(f5.aws_advanced_ha.v1.4.0rc5.tmpl) 5e582187ae1a6323e095d41eddd41151d6bd38eb83c634410d4527a3d0e246a8fc62685ab0849de2ade62b0275f51264d2deaccbc16b773417f847a4a1ea9bc4\n            set hashes(asm-policy.tar.gz) 2d39ec60d006d05d8a1567a1d8aae722419e8b062ad77d6d9a31652971e5e67bc4043d81671ba2a8b12dd229ea46d205144f75374ed4cae58cefa8f9ab6533e6\n            set hashes(deploy_waf.sh) 1a3a3c6274ab08a7dc2cb73aedc8d2b2a23cd9e0eb06a2e1534b3632f250f1d897056f219d5b35d3eed1207026e89989f754840fd92969c515ae4d829214fb74\n            set hashes(f5.policy_creator.tmpl) 06539e08d115efafe55aa507ecb4e443e83bdb1f5825a9514954ef6ca56d240ed00c7b5d67bd8f67b815ee9dd46451984701d058c89dae2434c89715d375a620\n            set hashes(f5.service_discovery.tmpl) 4811a95372d1dbdbb4f62f8bcc48d4bc919fa492cda012c81e3a2fe63d7966cc36ba8677ed049a814a930473234f300d3f8bced2b0db63176d52ac99640ce81b\n            set hashes(f5.cloud_logger.v1.0.0.tmpl) 64a0ed3b5e32a037ba4e71d460385fe8b5e1aecc27dc0e8514b511863952e419a89f4a2a43326abb543bba9bc34376afa114ceda950d2c3bd08dab735ff5ad20\n            set hashes(f5-appsvcs-3.5.1-5.noarch.rpm) ba71c6e1c52d0c7077cdb25a58709b8fb7c37b34418a8338bbf67668339676d208c1a4fef4e5470c152aac84020b4ccb8074ce387de24be339711256c0fa78c8\n            set hashes(f5-appsvcs-3.18.0-4.noarch.rpm) e72ee8005a27070ac399ab097e8aa507a72aae4721d7491589cfeb821db3ef86cbc979e796ab319ec727bb51400ccda813c4b9eb4a6b3d1220a396b582f8f400\n            set hashes(f5-appsvcs-3.20.0-3.noarch.rpm) d4bba8892a2068bb53f88c6090dc65f17707abca35a7ed2fff39980057fe7f7a2ebf710ab2284a1d83d70b7746beabad9df603017c0fd8728f7457661c95ac8d\n            set hashes(f5-appsvcs-3.25.0-3.noarch.rpm) 26f19bdaaa81cbe0421b3e08c09987f9dd0c54b05a626d6a21a836b34248d2d9d83095f0daad8e7a4a068e9ef99b89fbcd246ae8b617ac2b2456599157d0e8b3\n            set hashes(f5-appsvcs-3.26.1-1.noarch.rpm) b460e11679d38a96549b5041def27b419f1a41c8f788f9f8c7a034aa5cb5a8c9fd151c7c439bebd093fcd85cd8657f1c064551d9337566f9fc7e9506c55dc02c\n            set hashes(f5-appsvcs-3.31.0-6.noarch.rpm) 6506fde5d1c2e067662b513387dccda0281d3bbc604fc6dcf8e5740ae563748899f7f335e349006fe3f0e751cd70d4ef8be3701ae45dca305de649f259f090a9\n            set hashes(f5-cloud-failover-1.1.0-0.noarch.rpm) 15a440c299f9e4af86a3d0f5b0d75b0054385b95e47c3ef116d2e0bfb0041a26dcbf549028e2a26d2c718ec61446bd657be38fbbcd9db781efe5414c174ac68c\n            set hashes(f5-cloud-failover-1.3.0-0.noarch.rpm) 19681eb33d9f910c913f8180199485eb653b4b5ebeaae0b90a6ce8341d7a22fed8d21815b5ba148c468852d20cc26fad4c4242e50ecc184f1f8770dacced6f6a\n            set hashes(f5-cloud-failover-1.4.0-0.noarch.rpm) 49e9108a070e0c8713aeb7b330662358542e61b7c53a9d45108d37a9bf5246f9e4aaae10cc61064801dcccd20bfd5108347b0f694510e7ece07f96c45ba683b0\n            set hashes(f5-cloud-failover-1.5.0-0.noarch.rpm) 33a7e2d047106bcce681757a65240bfacedd48e13567e05fdb23a4b269d266aa5001f81158c3964dc297f0428db31c9df428002898d190285b349c59422a573b\n            set hashes(f5-cloud-failover-1.6.1-1.noarch.rpm) c1b842da21b8d1ba21b6eb63c8598a9ea9986d5daddc21e4d280e1d6b09d3db1de8ac7de5c84edf07b43e4af03daf8fe747a4048f6573d955206352cde2cec65\n            set hashes(f5-cloud-failover-1.7.1-1.noarch.rpm) 14ff0cd2bb49780cc0ae3021c4fc8fcc096e3fce2258096a4aa026d6d37de728ca7345bfe3a79031e336e74d25a2b40ff28324c2c752bf0ee71b7fc89b6fc8fe\n            set hashes(f5-cloud-failover-1.8.0-0.noarch.rpm) 23086d1cbf3cb24eac7eba2305156c600fa21f1b896321a2fa5225d331d7e41471edb3f5368144d86848a4520b1e005c014485ff451e7da6429053f58bfe8ce4\n            set hashes(f5-cloud-failover-1.9.0-0.noarch.rpm) 09c15377389ac18313370635fb99f9aff05970807cc60bff074f80f664023cfc0d9f5b7f2ed7a8f879deb2da84a034bb9fa9f4e95f9806d644af518db32f1425\n\n            set file_path [lindex $tmsh::argv 1]\n            set file_name [file tail $file_path]\n\n            if {![info exists hashes($file_name)]} {\n                tmsh::log err \"No hash found for $file_name\"\n                exit 1\n            }\n\n            set expected_hash $hashes($file_name)\n            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]\n            if { $expected_hash eq $computed_hash } {\n                exit 0\n            }\n            tmsh::log err \"Hash does not match for $file_path\"\n            exit 1\n        }]} {\n            tmsh::log err {Unexpected error in verifyHash}\n            exit 1\n        }\n    }\n    script-signature GsVIYeMGD0BTbQRz8EcaAKOU/17mi4gft8YyE/Zi7m7MqMT9RkU6gabG6sI8xc1+W0qZo4AT6ykv/GXgAbJcbBAZtk58QFcX3Lm9W8s12b27wAWjvHh8E4JIH8iuyFvdfhxBTmRRvR3egL79+RVqbMP0m4kAzJrp0DJlv0soNhu0fMGAo9tE/anEl0EnsboY5rzt+zuaNAM9dZeP7yEaUuqOAyt5qLVSucM7Sb/ZCshq9f8U1QSMHY8AtgX9DHm78JWAFEI+GXh0v+zLszezEGg0kF0WprLUe06kLnWqdRXFcwChzdHrdRhuwthgrTAzDtwWJYQcaDM20kdDXDkr0A==\n    signing-key /Common/f5-irule\n}",
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/waitThenRun.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "#!/bin/bash",
           "while true; do echo \"waiting for cloud libs install to complete\"",
           "    if [ -f /config/cloud/cloudLibsReady ]; then",
           "        break",
           "    else",
           "        sleep 10",
           "    fi",
           "done",
           "\"$@\""
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       }
      }
     }
    }
   },
   "Properties": {
    "BlockDeviceMappings": [
     {
      "DeviceName": "/dev/xvda",
      "Ebs": {
       "DeleteOnTermination": true,
       "VolumeSize": 100,
       "VolumeType": "gp2"
      }
     },
     {
      "DeviceName": "/dev/xvdb",
      "NoDevice": {}
     }
    ],
    "IamInstanceProfile": {
     "Ref": "bigipServiceDiscoveryProfile"
    },
    "ImageId": {
     "Fn::If": [
      "noCustomImageId",
      {
       "Fn::FindInMap": [
        "BigipRegionMap",
        {
         "Ref": "AWS::Region"
        },
        {
         "Ref": "imageName"
        }
       ]
      },
      {
       "Ref": "customImageId"
      }
     ]
    },
    "InstanceType": {
     "Ref": "instanceType"
    },
    "KeyName": {
     "Ref": "sshKey"
    },
    "NetworkInterfaces": [
     {
      "Description": "Management Interface",
      "DeviceIndex": "0",
      "NetworkInterfaceId": {
       "Ref": "Bigip1ManagementInterface"
      }
     },
     {
      "Description": "Public or External Interface",
      "DeviceIndex": "1",
      "NetworkInterfaceId": {
       "Ref": "Bigip1subnet1Az1Interface"
      }
     }
    ],
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "application"
      }
     },
     {
      "Key": "Costcenter",
      "Value": {
       "Ref": "costcenter"
      }
     },
     {
      "Key": "Environment",
      "Value": {
       "Ref": "environment"
      }
     },
     {
      "Key": "Group",
      "Value": {
       "Ref": "group"
      }
     },
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "Big-IP1: ",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     },
     {
      "Key": "Owner",
      "Value": {
       "Ref": "owner"
      }
     }
    ],
    "UserData": {
     "Fn::Base64": {
      "Fn::Join": [
       "",
       [
        "#!/bin/bash\n",
        "mkdir -p /var/log/cloud /config/cloud /var/config/rest/downloads\n",
        "/usr/bin/setdb provision.extramb 1000\n",
        "/usr/bin/setdb restjavad.useextramb true\n",
        "cat << EOF >> /config/cloud/runtime-init-config.yaml\n",
        "controls:\n",
        "  logLevel: info\n",
        "  logFilename: /var/log/cloud/bigIpRuntimeInit.log\n",
        "pre_onboard_enabled:\n",
        "  - name: get_ifconfig\n",
        "    type: inline\n",
        "    commands:\n",
        "      - ifconfig eth1 | grep ether > /config/cloud/net1_mac || exit 0\n",
        "      - ifconfig eth2 | grep ether > /config/cloud/net2_mac || exit 0\n",
        "extension_packages:\n",
        "  install_operations:\n",
        "    - extensionType: as3\n",
        "      extensionVersion: 3.43.0\n",
        "      extensionHash: 6e50f828292c3e9417136693b7fba232ca4c004187ae1499e83e39210b500e7a\n",
        "    - extensionType: cf\n",
        "      extensionVersion: 1.14.0\n",
        "      extensionHash: 22b262f3f354a1a29ff6aa3e706708e2d0b0abf5585c1db62a04682a9bcfe9bd\n",
        "EOF\n",
        "/usr/bin/curl -fv --retry 1 --connect-timeout 5 -L http://cdn.f5.com/product/cloudsolutions/f5-bigip-runtime-init/v1.6.0/dist/f5-bigip-runtime-init-1.6.0-1.gz.run -o /var/config/rest/downloads/f5-bigip-runtime-init-1.6.0-1.gz.run\n",
        "bash /var/config/rest/downloads/f5-bigip-runtime-init-1.6.0-1.gz.run -- '--cloud aws'\n",
        "f5-bigip-runtime-init --config-file /config/cloud/runtime-init-config.yaml --skip-telemetry\n",
        "/opt/aws/apitools/cfn-init/bin/cfn-init -v -s ",
        {
         "Ref": "AWS::StackId"
        },
        " -r ",
        "Bigip1Instance",
        " --region ",
        {
         "Ref": "AWS::Region"
        },
        "\n"
       ]
      ]
     }
    }
   },
   "Type": "AWS::EC2::Instance"
  },
  "Bigip1ManagementEipAddress": {
   "Condition": "usePublicIP",
   "Properties": {
    "Domain": "vpc"
   },
   "Type": "AWS::EC2::EIP"
  },
  "Bigip1ManagementEipAssociation": {
   "Condition": "usePublicIP",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "Bigip1ManagementEipAddress",
      "AllocationId"
     ]
    },
    "NetworkInterfaceId": {
     "Ref": "Bigip1ManagementInterface"
    }
   },
   "Type": "AWS::EC2::EIPAssociation"
  },
  "Bigip1ManagementInterface": {
   "Properties": {
    "Description": "Management Interface for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipManagementSecurityGroup"
     }
    ],
    "SubnetId": {
     "Ref": "managementSubnetAz1"
    }
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip1VipEipAddress": {
   "Condition": "usePublicIP",
   "Properties": {
    "Domain": "vpc"
   },
   "Type": "AWS::EC2::EIP"
  },
  "Bigip1VipEipAssociation": {
   "Condition": "usePublicIP",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "Bigip1VipEipAddress",
      "AllocationId"
     ]
    },
    "NetworkInterfaceId": {
     "Ref": "Bigip1subnet1Az1Interface"
    },
    "PrivateIpAddress": {
     "Fn::Select": [
      "0",
      {
       "Fn::GetAtt": [
        "Bigip1subnet1Az1Interface",
        "SecondaryPrivateIpAddresses"
       ]
      }
     ]
    }
   },
   "Type": "AWS::EC2::EIPAssociation"
  },
  "Bigip1subnet1Az1Interface": {
   "Properties": {
    "Description": "Public External Interface for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipExternalSecurityGroup"
     }
    ],
    "SecondaryPrivateIpAddressCount": 1,
    "SubnetId": {
     "Ref": "subnet1Az1"
    },
    "Tags": [
     {
      "Key": "f5_cloud_failover_label",
      "Value": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "Key": "f5_cloud_failover_nic_map",
      "Value": "external"
     }
    ]
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip1subnet1Az1SelfEipAddress": {
   "Condition": "usePublicIP",
   "Properties": {
    "Domain": "vpc"
   },
   "Type": "AWS::EC2::EIP"
  },
  "Bigip1subnet1Az1SelfEipAssociation": {
   "Condition": "usePublicIP",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "Bigip1subnet1Az1SelfEipAddress",
      "AllocationId"
     ]
    },
    "NetworkInterfaceId": {
     "Ref": "Bigip1subnet1Az1Interface"
    },
    "PrivateIpAddress": {
     "Fn::GetAtt": [
      "Bigip1subnet1Az1Interface",
      "PrimaryPrivateIpAddress"
     ]
    }
   },
   "Type": "AWS::EC2::EIPAssociation"
  },
  "Bigip2Instance": {
   "DependsOn": "Bigip1Instance",
   "Metadata": {
    "AWS::CloudFormation::Init": {
     "config": {
      "commands": {
       "000-disable-1nicautoconfig": {
        "command": "/usr/bin/setdb provision.1nicautoconfig disable"
       },
       "001-rest-extend-rpm-timeout": {
        "command": "/usr/bin/setdb iapplxrpm.timeout 300 || exit 0"
       },
       "002-rest-extend-icrd-timeout": {
        "command": "/usr/bin/setdb icrd.timeout 180 || exit 0"
       },
       "003-rest-extend-restjavad-timeout": {
        "command": "/usr/bin/setdb restjavad.timeout 180 || exit 0"
       },
       "004-rest-extend-restnoded-timeout": {
        "command": "/usr/bin/setdb restnoded.timeout 180 || exit 0"
       },
       "005-rest-provision-extramb": {
        "command": "/usr/bin/setdb provision.extramb 1000"
       },
       "006-rest-use-extramb": {
        "command": "/usr/bin/setdb restjavad.useextramb true"
       },
       "007-rest-post": {
        "command": "/usr/bin/curl -s -f -u admin: -H \"Content-Type: application/json\" -d '{\"maxMessageBodySize\":134217728}' -X POST http://localhost:8100/mgmt/shared/server/messaging/settings/8100 | jq ."
       },
       "008-rest-restart": {
        "command": "bigstart restart restjavad restnoded"
       },
       "010-install-libs": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "mkdir -p /var/log/cloud/aws;",
           "nohup /config/installCloudLibs.sh",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "020-generate-password": {
        "command": {
         "Fn::Join": [
          "",
          [
           "nohup /config/waitThenRun.sh",
           " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           " --signal PASSWORD_CREATED",
           " --file f5-rest-node",
           " --cl-args '/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/generatePassword --file /config/cloud/aws/.adminPassword --encrypt'",
           " --log-level silly",
           " -o /var/log/cloud/aws/generatePassword.log",
           " &>> /var/log/cloud/aws/install.log < /dev/null",
           " &"
          ]
         ]
        }
       },
       "030-create-admin-user": {
        "command": {
         "Fn::Join": [
          "",
          [
           "nohup /config/waitThenRun.sh",
           " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           " --wait-for PASSWORD_CREATED",
           " --signal ADMIN_CREATED",
           " --file /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/createUser.sh",
           " --cl-args '--user srv_user",
           " --password-file /config/cloud/aws/.adminPassword",
           " --password-encrypted",
           "'",
           " --log-level silly",
           " -o /var/log/cloud/aws/createUser.log",
           " &>> /var/log/cloud/aws/install.log < /dev/null",
           " &"
          ]
         ]
        }
       },
       "040-network-config": {
        "command": {
         "Fn::Join": [
          "",
          [
           "GATEWAY_MAC=`cat /config/cloud/net1_mac | awk '{print tolower($2)}'`\n",
           "sleep 30 && TOKEN=`/usr/bin/curl -sS --retry 20 -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 120'`\n",
           "GATEWAY_CIDR_BLOCK=`/usr/bin/curl -s -f --retry 20 -H 'X-aws-ec2-metadata-token: '$TOKEN'' http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC}/subnet-ipv4-cidr-block`; ",
           "GATEWAY_NET=${GATEWAY_CIDR_BLOCK%/*}; ",
           "GATEWAY_PREFIX=${GATEWAY_CIDR_BLOCK#*/}; ",
           "GATEWAY=`echo ${GATEWAY_NET} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`; ",
           "nohup /config/waitThenRun.sh ",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/network.js ",
           "--host localhost ",
           "-o /var/log/cloud/aws/network.log ",
           "--log-level silly ",
           "--wait-for ADMIN_CREATED ",
           "--signal NETWORK_CONFIG_DONE ",
           "--vlan name:external,nic:1.1 ",
           "--default-gw ${GATEWAY} ",
           "--self-ip 'name:external-self,address:",
           {
            "Fn::GetAtt": [
             "Bigip2subnet1Az1Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "/'${GATEWAY_PREFIX}',vlan:external,allow:tcp:4353 udp:1026' ",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "050-onboard-BIG-IP": {
        "command": {
         "Fn::If": [
          "optin",
          {
           "Fn::Join": [
            " ",
            [
             "REGION=\"",
             {
              "Ref": "AWS::Region"
             },
             "\";",
             "DEPLOYMENTID=`echo \"",
             {
              "Ref": "AWS::StackId"
             },
             "\"|sha512sum|cut -d \" \" -f 1`;",
             "CUSTOMERID=`echo \"",
             {
              "Ref": "AWS::AccountId"
             },
             "\"|sha512sum|cut -d \" \" -f 1`;",
             "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth0`;",
             "nohup /config/waitThenRun.sh",
             "TOKEN=`/usr/bin/curl -sS --retry 20 -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 120'`;",
             "HOSTNAME=`/usr/bin/curl -sS --retry 20 -H 'X-aws-ec2-metadata-token: '$TOKEN'' http://169.254.169.254/latest/meta-data/hostname`;",
             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
             "--wait-for NETWORK_CONFIG_DONE",
             "--signal ONBOARD_DONE",
             "-o /var/log/cloud/aws/onboard.log",
             "--log-level silly",
             "--no-reboot",
             "--host localhost",
             "--hostname ${HOSTNAME}",
             "--ntp ",
             {
              "Ref": "ntpServer"
             },
             "--tz ",
             {
              "Ref": "timezone"
             },
             "--dns ${NAME_SERVER}",
             "--modules ",
             {
              "Ref": "bigIpModules"
             },
             "--metrics \"cloudName:aws,region:${REGION},bigIpVersion:16.1.3.3-0.0.3,customerId:${CUSTOMERID},deploymentId:${DEPLOYMENTID},templateName:f5-existing-stack-same-az-cluster-payg-2nic-bigip.template,templateVersion:6.4.0,licenseType:hourly\"",
             "-d tm.tcpudptxchecksum:software-only ",
             "--ping",
             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          },
          {
           "Fn::Join": [
            " ",
            [
             "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth0`;",
             "nohup /config/waitThenRun.sh",
             "TOKEN=`/usr/bin/curl -sS --retry 20 -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 120'`;",
             "HOSTNAME=`/usr/bin/curl -sS --retry 20 -H 'X-aws-ec2-metadata-token: '$TOKEN'' http://169.254.169.254/latest/meta-data/hostname`;",
             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
             "--wait-for NETWORK_CONFIG_DONE",
             "--signal ONBOARD_DONE",
             "-o /var/log/cloud/aws/onboard.log",
             "--log-level silly",
             "--no-reboot",
             "--host localhost",
             "--hostname ${HOSTNAME}",
             "--ntp ",
             {
              "Ref": "ntpServer"
             },
             "--tz ",
             {
              "Ref": "timezone"
             },
             "--dns ${NAME_SERVER}",
             "--modules ",
             {
              "Ref": "bigIpModules"
             },
             "-d tm.tcpudptxchecksum:software-only ",
             "--ping",
             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          }
         ]
        }
       },
       "055-custom-config": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           "--file /config/cloud/aws/custom-config.sh",
           "--cwd /config/cloud/aws",
           "-o /var/log/cloud/aws/custom-config.log",
           "--log-level silly",
           "--wait-for ONBOARD_DONE",
           "--signal CUSTOM_CONFIG_DONE",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "060-cluster": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/cluster.js",
           "--wait-for CUSTOM_CONFIG_DONE",
           "--signal CLUSTER_DONE",
           "-o /var/log/cloud/aws/cluster.log",
           "--log-level silly",
           "--host localhost",
           "--delete-remote-primary-creds",
           "--user srv_user",
           "--delete-local-creds",
           "--password-url file:///config/cloud/aws/.adminPassword",
           "--password-encrypted",
           "--cloud aws",
           "--provider-options 's3Bucket:",
           {
            "Ref": "S3Bucket"
           },
           "'",
           "--config-sync-ip",
           {
            "Fn::GetAtt": [
             "Bigip2subnet1Az1Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "--join-group",
           "--device-group same_az_failover_group",
           "--remote-host ",
           {
            "Fn::GetAtt": [
             "Bigip1ManagementInterface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "065-cfe": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           "--file /config/cloud/aws/cfe-config.sh",
           "--cwd /config/cloud/aws",
           "-o /var/log/cloud/aws/cfe-config.log",
           "--log-level silly",
           "--wait-for CLUSTER_DONE",
           "--signal CFE_CONFIG_DONE",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "070-rm-password": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           "--file /config/cloud/aws/rm-srv-user.sh",
           "-o /var/log/cloud/aws/rm-srv-user.log",
           "--log-level silly",
           "--wait-for CFE_CONFIG_DONE",
           "--signal SRV_USER_REMOVED",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       }
      },
      "files": {
       "/config/cloud/aws/cfe-config.sh": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "source /config/cloud/aws/onboard_config_vars\n",
           "cfe_file_loc=\"/config/cloud/cfe_config.json\"\n",
           "cfe_response_code=$(/usr/bin/curl -svvu admin: -w \"%{http_code}\" -X POST -H \"Content-Type: application/json\" http://localhost:8100/mgmt/shared/cloud-failover/declare -d @$cfe_file_loc -o /dev/null)\n",
           "if [[ $cfe_response_code == 200 || $cfe_response_code == 502 ]]; then\n",
           "    echo \"Deployment of CFE application succeeded.\"\n",
           "    cfe_deployed=\"yes\"\n",
           "else\n",
           "    echo \"Failed to deploy CFE application; continuing...\"\n",
           "fi\n",
           "#Disable built-in script\nmount -o remount,rw /usr\n",
           "mv /usr/libexec/aws/aws-failover-tgactive.sh /usr/libexec/aws/aws-failover-tgactive.sh.disabled\n",
           "mv /usr/libexec/aws/aws-failover-tgrefresh.sh /usr/libexec/aws/aws-failover-tgrefresh.sh.disabled\n",
           "mount -o remount,ro /usr\n"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/custom-config.sh": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "TOKEN=`/usr/bin/curl -sS --retry 20 -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 120'`\n",
           "EXTIP='",
           {
            "Fn::GetAtt": [
             "Bigip2subnet1Az1Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "'\n",
           "EXTPRIVIP='",
           {
            "Fn::Select": [
             "0",
             {
              "Fn::GetAtt": [
               "Bigip2subnet1Az1Interface",
               "SecondaryPrivateIpAddresses"
              ]
             }
            ]
           },
           "'\n",
           "HOSTNAME=`/usr/bin/curl -sS -f --retry 20 -H 'X-aws-ec2-metadata-token: '$TOKEN http://169.254.169.254/latest/meta-data/hostname`\n",
           "PROGNAME=$(basename $0)\n",
           "function error_exit {\n",
           "echo \"${PROGNAME}: ${1:-\\\"Unknown Error\\\"}\" 1>&2\n",
           "exit 1\n",
           "}\n",
           "declare -a tmsh=()\n",
           "echo 'starting custom-config.sh'\n",
           "source /config/cloud/aws/onboard_config_vars\n",
           "if [[ $allowPhoneHome == \"No\" ]]; then\n",
           "    tmsh+=(\n",
           "    \"tmsh modify sys software update auto-phonehome disabled\")\n",
           "fi\n",
           "tmsh+=(\n",
           "\"tmsh modify sys db dhclient.mgmt { value disable }\"\n",
           "\"tmsh modify cm device ${HOSTNAME} unicast-address { { effective-ip ${EXTIP} effective-port 1026 ip ${EXTIP} } }\"\n",
           "\"tmsh create ltm virtual-address ",
           {
            "Fn::Select": [
             "0",
             {
              "Fn::GetAtt": [
               "Bigip2subnet1Az1Interface",
               "SecondaryPrivateIpAddresses"
              ]
             }
            ]
           },
           " address ",
           {
            "Fn::Select": [
             "0",
             {
              "Fn::GetAtt": [
               "Bigip2subnet1Az1Interface",
               "SecondaryPrivateIpAddresses"
              ]
             }
            ]
           },
           "\"\n",
           "\"tmsh save /sys config\")\n",
           "for CMD in \"${tmsh[@]}\"\n",
           "do\n",
           "  \"/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/waitForMcp.sh\"\n",
           "    if $CMD;then\n",
           "        echo \"command $CMD successfully executed.\"\n",
           "    else\n",
           "        error_exit \"$LINENO: An error has occurred while executing $CMD. Aborting!\"\n",
           "    fi\n",
           "done\n",
           "date\n",
           "### END CUSTOM CONFIGURATION"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/getNameServer.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "INTERFACE=$1",
           "INTERFACE_MAC=`ifconfig ${INTERFACE} | egrep ether | awk '{print tolower($2)}'`",
           "TOKEN=`/usr/bin/curl -sS --retry 20 -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 120'`",
           "VPC_CIDR_BLOCK=`/usr/bin/curl -s -f --retry 20 -H 'X-aws-ec2-metadata-token: '$TOKEN'' http://169.254.169.254/latest/meta-data/network/interfaces/macs/${INTERFACE_MAC}/vpc-ipv4-cidr-block`",
           "VPC_NET=${VPC_CIDR_BLOCK%/*}",
           "NAME_SERVER=`echo ${VPC_NET} | awk -F. '{ printf \"%d.%d.%d.%d\", $1, $2, $3, $4+2 }'`",
           "echo $NAME_SERVER"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/onboard_config_vars": {
        "content": {
         "Fn::Join": [
          "",
          [
           "",
           "#!/bin/bash\n",
           "# Generated from 6.4.0\n",
           "TOKEN=`/usr/bin/curl -sS --retry 20 -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 120'`\n",
           "HOSTNAME=`/usr/bin/curl -sS --retry 20 -H 'X-aws-ec2-metadata-token: '$TOKEN'' http://169.254.169.254/latest/meta-data/hostname`\n",
           "region='",
           {
            "Ref": "AWS::Region"
           },
           "'\n",
           "adminUsername='srv_user'\n",
           "managementGuiPort='443'\n",
           "timezone='",
           {
            "Ref": "timezone"
           },
           "'\n",
           "ntpServer='",
           {
            "Ref": "ntpServer"
           },
           "'\n",
           "declarationUrl='",
           {
            "Ref": "declarationUrl"
           },
           "'\n",
           "allowPhoneHome='",
           {
            "Ref": "allowPhoneHome"
           },
           "'\n",
           "passwd=$(f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/decryptDataFromFile.js --data-file /config/cloud/aws/.adminPassword)\n"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/rm-srv-user.sh": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "PROGNAME=$(basename $0)\n",
           "function error_exit {\n",
           "echo \"${PROGNAME}: ${1:-\"Unknown Error\"}\" 1>&2\n",
           "exit 1\n",
           "}\n",
           "date\n",
           "echo 'starting rm-srv-user.sh'\n",
           "declare -a tmsh=()\n",
           "tmsh+=(\"rm /config/cloud/aws/.adminPassword\")\n",
           "for CMD in \"${tmsh[@]}\"\n",
           "do\n",
           "  if $CMD;then\n",
           "      echo \"command $CMD successfully executed.\"\n",
           "  else\n",
           "      error_exit \"$LINENO: An error has occurred while executing $CMD. Aborting!\"\n",
           "  fi\n",
           "done\n",
           "date\n",
           "flag=true\n",
           "while $flag\n",
           "do\n",
           "response=$(tmsh show cm sync-status)\n",
           "if echo $response | grep 'All devices in the device group are in sync' ; then\n",
           "flag=false\n",
           "tmsh delete auth user srv_user\n",
           "fi\n",
           "done\n"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/cfe_config.json": {
        "content": {
         "Fn::Join": [
          "",
          [
           "{\n",
           "    \"class\":\"Cloud_Failover\",\n",
           "    \"controls\":{\n",
           "      \"class\":\"Controls\",\n",
           "      \"logLevel\":\"silly\"\n",
           "    },\n",
           "    \"environment\":\"aws\",\n",
           "    \"externalStorage\":{\n",
           "      \"scopingTags\":{\n",
           "      \"f5_cloud_failover_label\":\"",
           {
            "Ref": "AWS::StackName"
           },
           "\"\n",
           "      }\n",
           "    },\n",
           "    \"failoverAddresses\":{\n",
           "      \"scopingTags\":{\n",
           "      \"f5_cloud_failover_label\":\"",
           {
            "Ref": "AWS::StackName"
           },
           "\"\n",
           "      }\n",
           "    },\n",
           "    \"failoverRoutes\":{\n",
           "      \"scopingTags\":{\n",
           "      \"f5_cloud_failover_label\":\"",
           {
            "Ref": "AWS::StackName"
           },
           "\"\n",
           "      },\n",
           "      \"scopingAddressRanges\":[\n",
           "           {\n",
           "             \"range\":\"192.0.2.0\\/24\"\n",
           "           }\n",
           "       ],\n",
           "      \"defaultNextHopAddresses\":{\n",
           "        \"discoveryType\":\"static\",\n",
           "        \"items\":[\n",
           "              \"",
           {
            "Fn::GetAtt": [
             "Bigip1subnet1Az1Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "\",\n",
           "              \"",
           {
            "Fn::GetAtt": [
             "Bigip2subnet1Az1Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "\"\n",
           "         ]\n",
           "       }\n",
           "     }\n",
           "}"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/f5-cloud-libs-aws.tar.gz": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "http://cdn.f5.com/product/cloudsolutions/f5-cloud-libs-aws/v2.10.1/f5-cloud-libs-aws.tar.gz"
       },
       "/config/cloud/f5-cloud-libs.tar.gz": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "http://cdn.f5.com/product/cloudsolutions/f5-cloud-libs/v4.28.1/f5-cloud-libs.tar.gz"
       },
       "/config/installCloudLibs.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "#!/bin/bash",
           "echo about to execute",
           "checks=0",
           "while [ $checks -lt 120 ]; do echo checking mcpd",
           "    tmsh -a show sys mcp-state field-fmt | grep -q running",
           "    if [ $? == 0 ]; then",
           "        echo mcpd ready",
           "        break",
           "    fi",
           "    echo mcpd not ready yet",
           "    let checks=checks+1",
           "    sleep 10",
           "done",
           "echo loading verifyHash script",
           "if ! tmsh load sys config merge file /config/verifyHash; then",
           "    echo cannot validate signature of /config/verifyHash",
           "    exit",
           "fi",
           "echo loaded verifyHash",
           "declare -a filesToVerify=(\"/config/cloud/f5-cloud-libs.tar.gz\" \"/config/cloud/f5-cloud-libs-aws.tar.gz\")",
           "for fileToVerify in \"${filesToVerify[@]}\"",
           "do",
           "    echo verifying \"$fileToVerify\"",
           "    if ! tmsh run cli script verifyHash \"$fileToVerify\"; then",
           "        echo \"$fileToVerify\" is not valid",
           "        exit 1",
           "    fi",
           "    echo verified \"$fileToVerify\"",
           "done",
           "mkdir -p /config/cloud/aws/node_modules/@f5devcentral",
           "echo expanding f5-cloud-libs.tar.gz",
           "tar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
           "echo installing dependencies",
           "tar xvfz /config/cloud/f5-cloud-libs-aws.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
           "echo cloud libs install complete",
           "touch /config/cloud/cloudLibsReady"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/verifyHash": {
        "content": "cli script /Common/verifyHash {\nproc script::run {} {\n        if {[catch {\n            set hashes(f5-cloud-libs.tar.gz) 3cb16d5d65e0213fdce46d503b6849d30e5d796e08284d2412655f2dde93f0050631274e67eae56a839331cae49527bf6493c0dd3ec2c925e6301f879449c2c6\n            set hashes(f5-cloud-libs-aws.tar.gz) c2eadf04a910e28a52c21e1b9af9015b5a4e5a50501bc0dfbd354d03d08d5a82fe8c0326dd4138b835ff88fc17232e957b8f2d3fb031ed1809fd3d0b973afe09\n            set hashes(f5-cloud-libs-azure.tar.gz) 703bae0e774114b16528ca71bb2109db5f36623f8b8698588348677862ffa48559ba9698001d2f245860059a4fec588a15ee924317b967bf338cca66b0de6936\n            set hashes(f5-cloud-libs-gce.tar.gz) fd16ab827b3089e76d5c77c713a2eabe685707dba7207cfdf2778db2e96281fc8e3e4424fb20f584c44cb9722b4fbf352e7c364de5fed61a74bd138f974705b2\n            set hashes(f5-cloud-libs-openstack.tar.gz) 5c83fe6a93a6fceb5a2e8437b5ed8cc9faf4c1621bfc9e6a0779f6c2137b45eab8ae0e7ed745c8cf821b9371245ca29749ca0b7e5663949d77496b8728f4b0f9\n            set hashes(f5-cloud-libs-consul.tar.gz) a32aab397073df92cbbba5067e5823e9b5fafca862a258b60b6b40aa0975c3989d1e110f706177b2ffbe4dde65305a260a5856594ce7ad4ef0c47b694ae4a513\n            set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0\n            set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034\n            set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe\n            set hashes(f5.http.v1.2.0rc7.tmpl) 21f413342e9a7a281a0f0e1301e745aa86af21a697d2e6fdc21dd279734936631e92f34bf1c2d2504c201f56ccd75c5c13baa2fe7653213689ec3c9e27dff77d\n            set hashes(f5.aws_advanced_ha.v1.3.0rc1.tmpl) 9e55149c010c1d395abdae3c3d2cb83ec13d31ed39424695e88680cf3ed5a013d626b326711d3d40ef2df46b72d414b4cb8e4f445ea0738dcbd25c4c843ac39d\n            set hashes(f5.aws_advanced_ha.v1.4.0rc1.tmpl) de068455257412a949f1eadccaee8506347e04fd69bfb645001b76f200127668e4a06be2bbb94e10fefc215cfc3665b07945e6d733cbe1a4fa1b88e881590396\n            set hashes(f5.aws_advanced_ha.v1.4.0rc2.tmpl) 6ab0bffc426df7d31913f9a474b1a07860435e366b07d77b32064acfb2952c1f207beaed77013a15e44d80d74f3253e7cf9fbbe12a90ec7128de6facd097d68f\n            set hashes(f5.aws_advanced_ha.v1.4.0rc3.tmpl) 2f2339b4bc3a23c9cfd42aae2a6de39ba0658366f25985de2ea53410a745f0f18eedc491b20f4a8dba8db48970096e2efdca7b8efffa1a83a78e5aadf218b134\n            set hashes(f5.aws_advanced_ha.v1.4.0rc4.tmpl) 2418ac8b1f1884c5c096cbac6a94d4059aaaf05927a6a4508fd1f25b8cc6077498839fbdda8176d2cf2d274a27e6a1dae2a1e3a0a9991bc65fc74fc0d02ce963\n            set hashes(f5.aws_advanced_ha.v1.4.0rc5.tmpl) 5e582187ae1a6323e095d41eddd41151d6bd38eb83c634410d4527a3d0e246a8fc62685ab0849de2ade62b0275f51264d2deaccbc16b773417f847a4a1ea9bc4\n            set hashes(asm-policy.tar.gz) 2d39ec60d006d05d8a1567a1d8aae722419e8b062ad77d6d9a31652971e5e67bc4043d81671ba2a8b12dd229ea46d205144f75374ed4cae58cefa8f9ab6533e6\n            set hashes(deploy_waf.sh) 1a3a3c6274ab08a7dc2cb73aedc8d2b2a23cd9e0eb06a2e1534b3632f250f1d897056f219d5b35d3eed1207026e89989f754840fd92969c515ae4d829214fb74\n            set hashes(f5.policy_creator.tmpl) 06539e08d115efafe55aa507ecb4e443e83bdb1f5825a9514954ef6ca56d240ed00c7b5d67bd8f67b815ee9dd46451984701d058c89dae2434c89715d375a620\n            set hashes(f5.service_discovery.tmpl) 4811a95372d1dbdbb4f62f8bcc48d4bc919fa492cda012c81e3a2fe63d7966cc36ba8677ed049a814a930473234f300d3f8bced2b0db63176d52ac99640ce81b\n            set hashes(f5.cloud_logger.v1.0.0.tmpl) 64a0ed3b5e32a037ba4e71d460385fe8b5e1aecc27dc0e8514b511863952e419a89f4a2a43326abb543bba9bc34376afa114ceda950d2c3bd08dab735ff5ad20\n            set hashes(f5-appsvcs-3.5.1-5.noarch.rpm) ba71c6e1c52d0c7077cdb25a58709b8fb7c37b34418a8338bbf67668339676d208c1a4fef4e5470c152aac84020b4ccb8074ce387de24be339711256c0fa78c8\n            set hashes(f5-appsvcs-3.18.0-4.noarch.rpm) e72ee8005a27070ac399ab097e8aa507a72aae4721d7491589cfeb821db3ef86cbc979e796ab319ec727bb51400ccda813c4b9eb4a6b3d1220a396b582f8f400\n            set hashes(f5-appsvcs-3.20.0-3.noarch.rpm) d4bba8892a2068bb53f88c6090dc65f17707abca35a7ed2fff39980057fe7f7a2ebf710ab2284a1d83d70b7746beabad9df603017c0fd8728f7457661c95ac8d\n            set hashes(f5-appsvcs-3.25.0-3.noarch.rpm) 26f19bdaaa81cbe0421b3e08c09987f9dd0c54b05a626d6a21a836b34248d2d9d83095f0daad8e7a4a068e9ef99b89fbcd246ae8b617ac2b2456599157d0e8b3\n            set hashes(f5-appsvcs-3.26.1-1.noarch.rpm) b460e11679d38a96549b5041def27b419f1a41c8f788f9f8c7a034aa5cb5a8c9fd151c7c439bebd093fcd85cd8657f1c064551d9337566f9fc7e9506c55dc02c\n            set hashes(f5-appsvcs-3.31.0-6.noarch.rpm) 6506fde5d1c2e067662b513387dccda0281d3bbc604fc6dcf8e5740ae563748899f7f335e349006fe3f0e751cd70d4ef8be3701ae45dca305de649f259f090a9\n            set hashes(f5-cloud-failover-1.1.0-0.noarch.rpm) 15a440c299f9e4af86a3d0f5b0d75b0054385b95e47c3ef116d2e0bfb0041a26dcbf549028e2a26d2c718ec61446bd657be38fbbcd9db781efe5414c174ac68c\n            set hashes(f5-cloud-failover-1.3.0-0.noarch.rpm) 19681eb33d9f910c913f8180199485eb653b4b5ebeaae0b90a6ce8341d7a22fed8d21815b5ba148c468852d20cc26fad4c4242e50ecc184f1f8770dacced6f6a\n            set hashes(f5-cloud-failover-1.4.0-0.noarch.rpm) 49e9108a070e0c8713aeb7b330662358542e61b7c53a9d45108d37a9bf5246f9e4aaae10cc61064801dcccd20bfd5108347b0f694510e7ece07f96c45ba683b0\n            set hashes(f5-cloud-failover-1.5.0-0.noarch.rpm) 33a7e2d047106bcce681757a65240bfacedd48e13567e05fdb23a4b269d266aa5001f81158c3964dc297f0428db31c9df428002898d190285b349c59422a573b\n            set hashes(f5-cloud-failover-1.6.1-1.noarch.rpm) c1b842da21b8d1ba21b6eb63c8598a9ea9986d5daddc21e4d280e1d6b09d3db1de8ac7de5c84edf07b43e4af03daf8fe747a4048f6573d955206352cde2cec65\n            set hashes(f5-cloud-failover-1.7.1-1.noarch.rpm) 14ff0cd2bb49780cc0ae3021c4fc8fcc096e3fce2258096a4aa026d6d37de728ca7345bfe3a79031e336e74d25a2b40ff28324c2c752bf0ee71b7fc89b6fc8fe\n            set hashes(f5-cloud-failover-1.8.0-0.noarch.rpm) 23086d1cbf3cb24eac7eba2305156c600fa21f1b896321a2fa5225d331d7e41471edb3f5368144d86848a4520b1e005c014485ff451e7da6429053f58bfe8ce4\n            set hashes(f5-cloud-failover-1.9.0-0.noarch.rpm) 09c15377389ac18313370635fb99f9aff05970807cc60bff074f80f664023cfc0d9f5b7f2ed7a8f879deb2da84a034bb9fa9f4e95f9806d644af518db32f1425\n\n            set file_path [lindex $tmsh::argv 1]\n            set file_name [file tail $file_path]\n\n            if {![info exists hashes($file_name)]} {\n                tmsh::log err \"No hash found for $file_name\"\n                exit 1\n            }\n\n            set expected_hash $hashes($file_name)\n            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]\n            if { $expected_hash eq $computed_hash } {\n                exit 0\n            }\n            tmsh::log err \"Hash does not match for $file_path\"\n            exit 1\n        }]} {\n            tmsh::log err {Unexpected error in verifyHash}\n            exit 1\n        }\n    }\n    script-signature GsVIYeMGD0BTbQRz8EcaAKOU/17mi4gft8YyE/Zi7m7MqMT9RkU6gabG6sI8xc1+W0qZo4AT6ykv/GXgAbJcbBAZtk58QFcX3Lm9W8s12b27wAWjvHh8E4JIH8iuyFvdfhxBTmRRvR3egL79+RVqbMP0m4kAzJrp0DJlv0soNhu0fMGAo9tE/anEl0EnsboY5rzt+zuaNAM9dZeP7yEaUuqOAyt5qLVSucM7Sb/ZCshq9f8U1QSMHY8AtgX9DHm78JWAFEI+GXh0v+zLszezEGg0kF0WprLUe06kLnWqdRXFcwChzdHrdRhuwthgrTAzDtwWJYQcaDM20kdDXDkr0A==\n    signing-key /Common/f5-irule\n}",
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/waitThenRun.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "#!/bin/bash",
           "while true; do echo \"waiting for cloud libs install to complete\"",
           "    if [ -f /config/cloud/cloudLibsReady ]; then",
           "        break",
           "    else",
           "        sleep 10",
           "    fi",
           "done",
           "\"$@\""
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       }
      }
     }
    }
   },
   "Properties": {
    "BlockDeviceMappings": [
     {
      "DeviceName": "/dev/xvda",
      "Ebs": {
       "DeleteOnTermination": true,
       "VolumeSize": 100,
       "VolumeType": "gp2"
      }
     },
     {
      "DeviceName": "/dev/xvdb",
      "NoDevice": {}
     }
    ],
    "IamInstanceProfile": {
     "Ref": "bigipServiceDiscoveryProfile"
    },
    "ImageId": {
     "Fn::If": [
      "noCustomImageId",
      {
       "Fn::FindInMap": [
        "BigipRegionMap",
        {
         "Ref": "AWS::Region"
        },
        {
         "Ref": "imageName"
        }
       ]
      },
      {
       "Ref": "customImageId"
      }
     ]
    },
    "InstanceType": {
     "Ref": "instanceType"
    },
    "KeyName": {
     "Ref": "sshKey"
    },
    "NetworkInterfaces": [
     {
      "Description": "Management Interface",
      "DeviceIndex": "0",
      "NetworkInterfaceId": {
       "Ref": "Bigip2ManagementInterface"
      }
     },
     {
      "Description": "Public or External Interface",
      "DeviceIndex": "1",
      "NetworkInterfaceId": {
       "Ref": "Bigip2subnet1Az1Interface"
      }
     }
    ],
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "application"
      }
     },
     {
      "Key": "Costcenter",
      "Value": {
       "Ref": "costcenter"
      }
     },
     {
      "Key": "Environment",
      "Value": {
       "Ref": "environment"
      }
     },
     {
      "Key": "Group",
      "Value": {
       "Ref": "group"
      }
     },
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "Big-IP2: ",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     },
     {
      "Key": "Owner",
      "Value": {
       "Ref": "owner"
      }
     }
    ],
    "UserData": {
     "Fn::Base64": {
      "Fn::Join": [
       "",
       [
        "#!/bin/bash\n",
        "mkdir -p /var/log/cloud /config/cloud /var/config/rest/downloads\n",
        "/usr/bin/setdb provision.extramb 1000\n",
        "/usr/bin/setdb restjavad.useextramb true\n",
        "cat << EOF >> /config/cloud/runtime-init-config.yaml\n",
        "controls:\n",
        "  logLevel: info\n",
        "  logFilename: /var/log/cloud/bigIpRuntimeInit.log\n",
        "pre_onboard_enabled:\n",
        "  - name: get_ifconfig\n",
        "    type: inline\n",
        "    commands:\n",
        "      - ifconfig eth1 | grep ether > /config/cloud/net1_mac || exit 0\n",
        "      - ifconfig eth2 | grep ether > /config/cloud/net2_mac || exit 0\n",
        "extension_packages:\n",
        "  install_operations:\n",
        "    - extensionType: as3\n",
        "      extensionVersion: 3.43.0\n",
        "      extensionHash: 6e50f828292c3e9417136693b7fba232ca4c004187ae1499e83e39210b500e7a\n",
        "    - extensionType: cf\n",
        "      extensionVersion: 1.14.0\n",
        "      extensionHash: 22b262f3f354a1a29ff6aa3e706708e2d0b0abf5585c1db62a04682a9bcfe9bd\n",
        "EOF\n",
        "/usr/bin/curl -fv --retry 1 --connect-timeout 5 -L http://cdn.f5.com/product/cloudsolutions/f5-bigip-runtime-init/v1.6.0/dist/f5-bigip-runtime-init-1.6.0-1.gz.run -o /var/config/rest/downloads/f5-bigip-runtime-init-1.6.0-1.gz.run\n",
        "bash /var/config/rest/downloads/f5-bigip-runtime-init-1.6.0-1.gz.run -- '--cloud aws'\n",
        "f5-bigip-runtime-init --config-file /config/cloud/runtime-init-config.yaml --skip-telemetry\n",
        "/opt/aws/apitools/cfn-init/bin/cfn-init -v -s ",
        {
         "Ref": "AWS::StackId"
        },
        " -r ",
        "Bigip2Instance",
        " --region ",
        {
         "Ref": "AWS::Region"
        },
        "\n"
       ]
      ]
     }
    }
   },
   "Type": "AWS::EC2::Instance"
  },
  "Bigip2ManagementEipAddress": {
   "Condition": "usePublicIP",
   "Properties": {
    "Domain": "vpc"
   },
   "Type": "AWS::EC2::EIP"
  },
  "Bigip2ManagementEipAssociation": {
   "Condition": "usePublicIP",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "Bigip2ManagementEipAddress",
      "AllocationId"
     ]
    },
    "NetworkInterfaceId": {
     "Ref": "Bigip2ManagementInterface"
    }
   },
   "Type": "AWS::EC2::EIPAssociation"
  },
  "Bigip2ManagementInterface": {
   "Properties": {
    "Description": "Management Interface for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipManagementSecurityGroup"
     }
    ],
    "SubnetId": {
     "Ref": "managementSubnetAz1"
    }
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip2subnet1Az1Interface": {
   "Properties": {
    "Description": "Public External Interface for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipExternalSecurityGroup"
     }
    ],
    "SecondaryPrivateIpAddressCount": 1,
    "SubnetId": {
     "Ref": "subnet1Az1"
    },
    "Tags": [
     {
      "Key": "f5_cloud_failover_label",
      "Value": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "Key": "f5_cloud_failover_nic_map",
      "Value": "external"
     }
    ]
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip2subnet1Az1SelfEipAddress": {
   "Condition": "usePublicIP",
   "Properties": {
    "Domain": "vpc"
   },
   "Type": "AWS::EC2::EIP"
  },
  "Bigip2subnet1Az1SelfEipAssociation": {
   "Condition": "usePublicIP",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "Bigip2subnet1Az1SelfEipAddress",
      "AllocationId"
     ]
    },
    "NetworkInterfaceId": {
     "Ref": "Bigip2subnet1Az1Interface"
    },
    "PrivateIpAddress": {
     "Fn::GetAtt": [
      "Bigip2subnet1Az1Interface",
      "PrimaryPrivateIpAddress"
     ]
    }
   },
   "Type": "AWS::EC2::EIPAssociation"
  },
  "S3Bucket": {
   "Properties": {
    "AccessControl": "BucketOwnerFullControl",
    "Tags": [
     {
      "Key": "f5_cloud_failover_label",
      "Value": {
       "Ref": "AWS::StackName"
      }
     }
    ]
   },
   "Type": "AWS::S3::Bucket"
  },
  "bigipExternalSecurityGroup": {
   "Properties": {
    "GroupDescription": "Public or external interface rules",
    "SecurityGroupIngress": [
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddressApp"
      },
      "FromPort": 80,
      "IpProtocol": "tcp",
      "ToPort": 80
     },
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddressApp"
      },
      "FromPort": 443,
      "IpProtocol": "tcp",
      "ToPort": 443
     }
    ],
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "application"
      }
     },
     {
      "Key": "Costcenter",
      "Value": {
       "Ref": "costcenter"
      }
     },
     {
      "Key": "Environment",
      "Value": {
       "Ref": "environment"
      }
     },
     {
      "Key": "Group",
      "Value": {
       "Ref": "group"
      }
     },
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "Bigip External Security Group:",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     },
     {
      "Key": "Owner",
      "Value": {
       "Ref": "owner"
      }
     }
    ],
    "VpcId": {
     "Ref": "Vpc"
    }
   },
   "Type": "AWS::EC2::SecurityGroup"
  },
  "bigipManagementSecurityGroup": {
   "Properties": {
    "GroupDescription": "BIG-IP management interface policy",
    "SecurityGroupIngress": [
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddress"
      },
      "FromPort": 22,
      "IpProtocol": "tcp",
      "ToPort": 22
     },
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddress"
      },
      "FromPort": 443,
      "IpProtocol": "tcp",
      "ToPort": 443
     }
    ],
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "application"
      }
     },
     {
      "Key": "Costcenter",
      "Value": {
       "Ref": "costcenter"
      }
     },
     {
      "Key": "Environment",
      "Value": {
       "Ref": "environment"
      }
     },
     {
      "Key": "Group",
      "Value": {
       "Ref": "group"
      }
     },
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "Bigip Management Security Group:",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     },
     {
      "Key": "Owner",
      "Value": {
       "Ref": "owner"
      }
     }
    ],
    "VpcId": {
     "Ref": "Vpc"
    }
   },
   "Type": "AWS::EC2::SecurityGroup"
  },
  "bigipSecurityGroupIngressConfigSync": {
   "Properties": {
    "FromPort": 4353,
    "GroupId": {
     "Ref": "bigipExternalSecurityGroup"
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Ref": "bigipExternalSecurityGroup"
    },
    "ToPort": 4353
   },
   "Type": "AWS::EC2::SecurityGroupIngress"
  },
  "bigipSecurityGroupIngressHa": {
   "Properties": {
    "FromPort": 1026,
    "GroupId": {
     "Ref": "bigipExternalSecurityGroup"
    },
    "IpProtocol": "udp",
    "SourceSecurityGroupId": {
     "Ref": "bigipExternalSecurityGroup"
    },
    "ToPort": 1026
   },
   "Type": "AWS::EC2::SecurityGroupIngress"
  },
  "bigipSecurityGroupIngressManagmentSame": {
   "Properties": {
    "FromPort": 443,
    "GroupId": {
     "Ref": "bigipManagementSecurityGroup"
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Ref": "bigipManagementSecurityGroup"
    },
    "ToPort": 443
   },
   "Type": "AWS::EC2::SecurityGroupIngress"
  },
  "bigipServiceDiscoveryAccessRole": {
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "ec2.amazonaws.com"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Path": "/",
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "ec2:DescribeInstances",
          "ec2:DescribeInstanceStatus",
          "ec2:DescribeAddresses",
          "ec2:AssociateAddress",
          "ec2:DisassociateAddress",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeNetworkInterfaceAttribute",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSubnets",
          "ec2:AssignPrivateIpAddresses",
          "s3:ListAllMyBuckets",
          "ec2:UnassignPrivateIpAddresses",
          "ec2:AssignIpv6Addresses",
          "ec2:UnassignIpv6Addresses"
         ],
         "Effect": "Allow",
         "Resource": [
          "*"
         ]
        },
        {
         "Action": [
          "s3:ListBucket",
          "s3:GetBucketTagging",
          "s3:GetBucketLocation"
         ],
         "Effect": "Allow",
         "Resource": {
          "Fn::Join": [
           "",
           [
            "arn:*:s3:::",
            {
             "Ref": "S3Bucket"
            }
           ]
          ]
         }
        },
        {
         "Action": [
          "s3:PutObject",
          "s3:GetObject",
          "s3:DeleteObject"
         ],
         "Effect": "Allow",
         "Resource": {
          "Fn::Join": [
           "",
           [
            "arn:*:s3:::",
            {
             "Ref": "S3Bucket"
            },
            "/*"
           ]
          ]
         }
        },
        {
         "Action": [
          "ec2:CreateRoute",
          "ec2:ReplaceRoute"
         ],
         "Condition": {
          "StringEquals": {
           "ec2:ResourceTag/f5_cloud_failover_label": {
            "Ref": "AWS::StackName"
           }
          }
         },
         "Effect": "Allow",
         "Resource": {
          "Fn::Join": [
           "",
           [
            "arn:*:ec2:",
            {
             "Ref": "AWS::Region"
            },
            ":",
            {
             "Ref": "AWS::AccountId"
            },
            ":route-table/*"
           ]
          ]
         }
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "BigipServiceDiscoveryPolicy"
     }
    ]
   },
   "Type": "AWS::IAM::Role"
  },
  "bigipServiceDiscoveryProfile": {
   "Properties": {
    "Path": "/",
    "Roles": [
     {
      "Ref": "bigipServiceDiscoveryAccessRole"
     }
    ]
   },
   "Type": "AWS::IAM::InstanceProfile"
  }
 }
}
