{
 "AWSTemplateFormatVersion": "2010-09-09",
 "Conditions": {
  "noCustomImageId": {
   "Fn::Equals": [
    "OPTIONAL",
    {
     "Ref": "customImageId"
    }
   ]
  },
  "optin": {
   "Fn::Equals": [
    "Yes",
    {
     "Ref": "allowUsageAnalytics"
    }
   ]
  },
  "usePublicIP": {
   "Fn::Equals": [
    "Yes",
    {
     "Ref": "provisionPublicIP"
    }
   ]
  }
 },
 "Description": "Template v5.12.0: AWS CloudFormation Template for creating a Same-AZ cluster of 2NIC BIG-IPs in an existing VPC **WARNING** This template creates Amazon EC2 Instances. You will be billed for the AWS resources used if you create a stack from this template.",
 "Mappings": {
  "BigipRegionMap": {
   "af-south-1": {
    "AdvancedWaf200Mbps": "ami-0a0aa7ed5b42fcb33",
    "AdvancedWaf25Mbps": "ami-02911cfa31229d453",
    "Best10000Mbps": "ami-02523012706e8f372",
    "Best1000Mbps": "ami-0b5904ac7549a673d",
    "Best200Mbps": "ami-057acaf56c99f69ad",
    "Best25Mbps": "ami-0c6926d809f2a9766",
    "Best5000Mbps": "ami-0309cb5ba1ebe7d8c",
    "Better10000Mbps": "ami-0729d1ba203e002cc",
    "Better1000Mbps": "ami-0d13228dbd4faf302",
    "Better200Mbps": "ami-0739a6d8bc47aca31",
    "Better25Mbps": "ami-0baa2acdcf77ab1f2",
    "Better5000Mbps": "ami-09ba0ce7fa350ba20",
    "Good10000Mbps": "ami-0892d3dbec0492486",
    "Good1000Mbps": "ami-02ea894afbfc85c30",
    "Good16vCPU": "ami-0d838ac809faeac9b",
    "Good200Mbps": "ami-01ce5588f87796c80",
    "Good25Mbps": "ami-06459ee2ab2b71571",
    "Good5000Mbps": "ami-0c475fc697dfd0e41",
    "PerAppVeAwaf200Mbps": "ami-0b427bc0af5313cbf",
    "PerAppVeAwaf25Mbps": "ami-0f8947a9973c2a6c2",
    "PerAppVeLtm200Mbps": "ami-0ef0eae0047ca7860",
    "PerAppVeLtm25Mbps": "ami-01e0007ac1565c5cb"
   },
   "ap-east-1": {
    "AdvancedWaf200Mbps": "ami-02aab6c39c716158d",
    "AdvancedWaf25Mbps": "ami-077af64f976929e56",
    "Best10000Mbps": "ami-064195d7159e7d41c",
    "Best1000Mbps": "ami-02b601545dc654637",
    "Best200Mbps": "ami-03c1b0a70fa42bec0",
    "Best25Mbps": "ami-0427dd4f1ec7a3c41",
    "Best5000Mbps": "ami-0a475505464ea0330",
    "Better10000Mbps": "ami-0bf2fd00bc091c69e",
    "Better1000Mbps": "ami-074098cc1908f2947",
    "Better200Mbps": "ami-0117e3c263ddb49ea",
    "Better25Mbps": "ami-0978abb124c180131",
    "Better5000Mbps": "ami-07ab2f340bbc095d2",
    "Good10000Mbps": "ami-00dd0ecda59a22e2f",
    "Good1000Mbps": "ami-0301532af0bf3586b",
    "Good16vCPU": "ami-0e10b49cfb015c4dc",
    "Good200Mbps": "ami-0a8d121c6e218163b",
    "Good25Mbps": "ami-06e7fdc236cd5f89d",
    "Good5000Mbps": "ami-0b194f05215f9dca2",
    "PerAppVeAwaf200Mbps": "ami-063c65e253dd994f6",
    "PerAppVeAwaf25Mbps": "ami-0188c296d3586add6",
    "PerAppVeLtm200Mbps": "ami-018b2ef45d4a9826c",
    "PerAppVeLtm25Mbps": "ami-0497ada5068479fb1"
   },
   "ap-northeast-1": {
    "AdvancedWaf200Mbps": "ami-0d30de4f6a4ca6941",
    "AdvancedWaf25Mbps": "ami-0a4babf83a95ab1d9",
    "Best10000Mbps": "ami-07504150a98786f32",
    "Best1000Mbps": "ami-05bd97b6540eaf6d0",
    "Best200Mbps": "ami-04d1507431ae69bc8",
    "Best25Mbps": "ami-018a434fbe47c40a9",
    "Best5000Mbps": "ami-02870765a087433e8",
    "Better10000Mbps": "ami-03c4a3398116fae3e",
    "Better1000Mbps": "ami-03e4b5a63377b6bdd",
    "Better200Mbps": "ami-013455b25c81704ed",
    "Better25Mbps": "ami-0f907a4bcce1785e6",
    "Better5000Mbps": "ami-0aa8da3b6896a3058",
    "Good10000Mbps": "ami-072a2886312647a51",
    "Good1000Mbps": "ami-0dbc558b85ec9e4e3",
    "Good16vCPU": "ami-08baba97a8858bf40",
    "Good200Mbps": "ami-0f9595d946d887d61",
    "Good25Mbps": "ami-012f008ea965b1af1",
    "Good5000Mbps": "ami-0e11732a2d911e816",
    "PerAppVeAwaf200Mbps": "ami-0ba9f1697d4588b88",
    "PerAppVeAwaf25Mbps": "ami-0faf0363ad191a17c",
    "PerAppVeLtm200Mbps": "ami-0fb1bd3c37cdaaa4f",
    "PerAppVeLtm25Mbps": "ami-01e77aae0ffd20ec9"
   },
   "ap-northeast-2": {
    "AdvancedWaf200Mbps": "ami-0c859917bdb1f2c85",
    "AdvancedWaf25Mbps": "ami-00a13fec418ed66c6",
    "Best10000Mbps": "ami-0710257d26fa3e218",
    "Best1000Mbps": "ami-027d1d6b64c15453d",
    "Best200Mbps": "ami-086c3bb00d3585612",
    "Best25Mbps": "ami-0c6a54ced5c509f54",
    "Best5000Mbps": "ami-0c6f064848b22500a",
    "Better10000Mbps": "ami-0c00c47136c1b071f",
    "Better1000Mbps": "ami-0f1195f54429b6613",
    "Better200Mbps": "ami-09640a641f499eb68",
    "Better25Mbps": "ami-093f16eb9c1beceb3",
    "Better5000Mbps": "ami-0e16f9561af4cbf46",
    "Good10000Mbps": "ami-0297d68468e831fc2",
    "Good1000Mbps": "ami-07e31be04a5fb9629",
    "Good16vCPU": "ami-0ad2208b77b573e7b",
    "Good200Mbps": "ami-02681054952621ac0",
    "Good25Mbps": "ami-067b236dcf68e5bc7",
    "Good5000Mbps": "ami-0675f5857dc8fa90c",
    "PerAppVeAwaf200Mbps": "ami-0caea2ae27fadce29",
    "PerAppVeAwaf25Mbps": "ami-041a6e29d94e1a352",
    "PerAppVeLtm200Mbps": "ami-0f3d4ceff7fca12f9",
    "PerAppVeLtm25Mbps": "ami-01a33b19489a0155e"
   },
   "ap-northeast-3": {
    "AdvancedWaf200Mbps": "ami-060236e41ec69a80a",
    "AdvancedWaf25Mbps": "ami-0bf7c417f185fe116",
    "Best10000Mbps": "ami-0ffb9f206a3417952",
    "Best1000Mbps": "ami-0d7d8d93df0956c9f",
    "Best200Mbps": "ami-061a4cb38757727e1",
    "Best25Mbps": "ami-02bf07e19b14015e3",
    "Best5000Mbps": "ami-0b7d0856ad3677337",
    "Better10000Mbps": "ami-0b3ae5f979c483b1c",
    "Better1000Mbps": "ami-00b8549bc60f21c30",
    "Better200Mbps": "ami-0dece5b4adce137ce",
    "Better25Mbps": "ami-08f8b905393f453d5",
    "Better5000Mbps": "ami-035c373c4c7841c63",
    "Good10000Mbps": "ami-0eef72c54afb0fef1",
    "Good1000Mbps": "ami-02986d6ac5b4c1d25",
    "Good16vCPU": "ami-031ecb7e55bd5be37",
    "Good200Mbps": "ami-0a38392b43fe0bde4",
    "Good25Mbps": "ami-00105cf6edfac67d5",
    "Good5000Mbps": "ami-0ee503f76f2faf5b3",
    "PerAppVeAwaf200Mbps": "ami-04b90d375adaee801",
    "PerAppVeAwaf25Mbps": "ami-071e35d3130982766",
    "PerAppVeLtm200Mbps": "ami-09b37989d4a188f12",
    "PerAppVeLtm25Mbps": "ami-0f41c2b5703a12522"
   },
   "ap-south-1": {
    "AdvancedWaf200Mbps": "ami-05a81acf4fa1f1b4b",
    "AdvancedWaf25Mbps": "ami-0bd4c93b47f74cf79",
    "Best10000Mbps": "ami-0eb84ef2e012bc082",
    "Best1000Mbps": "ami-0c07e4db534483f46",
    "Best200Mbps": "ami-0ea29153c94021f05",
    "Best25Mbps": "ami-083e1c7e2678d0880",
    "Best5000Mbps": "ami-0fc8229a87d639ac3",
    "Better10000Mbps": "ami-00a53f36b481f3d71",
    "Better1000Mbps": "ami-0a86e315852bed781",
    "Better200Mbps": "ami-0a1a10e9d19301dab",
    "Better25Mbps": "ami-0aa2767d5d5e34696",
    "Better5000Mbps": "ami-0e7c996e3e5dc1898",
    "Good10000Mbps": "ami-0b769d747058fd498",
    "Good1000Mbps": "ami-0f51e1c04baa569d2",
    "Good16vCPU": "ami-087693dfe962b6ef3",
    "Good200Mbps": "ami-0abcc1e219e88cbe1",
    "Good25Mbps": "ami-0276878e91f1624fc",
    "Good5000Mbps": "ami-04ed68d65252636eb",
    "PerAppVeAwaf200Mbps": "ami-09b494c534919d0d8",
    "PerAppVeAwaf25Mbps": "ami-03b07f3307a7fd1c8",
    "PerAppVeLtm200Mbps": "ami-01da739c16135a321",
    "PerAppVeLtm25Mbps": "ami-030408e595585c3ab"
   },
   "ap-southeast-1": {
    "AdvancedWaf200Mbps": "ami-0b28c4ce8d14b4922",
    "AdvancedWaf25Mbps": "ami-02f9c7311df7dc2c7",
    "Best10000Mbps": "ami-0301c2eac8b90a9ea",
    "Best1000Mbps": "ami-035c917175dc56c72",
    "Best200Mbps": "ami-0a99cd3aa06fdaf11",
    "Best25Mbps": "ami-03e9edac17dc64f13",
    "Best5000Mbps": "ami-0d218e9e1aff988b1",
    "Better10000Mbps": "ami-01c20f73cbdf6763b",
    "Better1000Mbps": "ami-0d335b363619dc209",
    "Better200Mbps": "ami-08cc516771d926aae",
    "Better25Mbps": "ami-0ad4eb6520a7368fd",
    "Better5000Mbps": "ami-00a600e5b8583e258",
    "Good10000Mbps": "ami-08c7dcb6c9b330966",
    "Good1000Mbps": "ami-0761bc15794c30208",
    "Good16vCPU": "ami-0fc57d1d88e176e14",
    "Good200Mbps": "ami-0c8ef0ea738059099",
    "Good25Mbps": "ami-0c73c356669c3d9ae",
    "Good5000Mbps": "ami-01c647f41774d1f44",
    "PerAppVeAwaf200Mbps": "ami-03dc9764987a5463c",
    "PerAppVeAwaf25Mbps": "ami-094c9241bb3b84627",
    "PerAppVeLtm200Mbps": "ami-07c84d1eb7d157966",
    "PerAppVeLtm25Mbps": "ami-0a95397cf6f107764"
   },
   "ap-southeast-2": {
    "AdvancedWaf200Mbps": "ami-048fe8e4daf9530ba",
    "AdvancedWaf25Mbps": "ami-0305da411eb621438",
    "Best10000Mbps": "ami-08da0a428cb5a26c9",
    "Best1000Mbps": "ami-0648a998b2cc47999",
    "Best200Mbps": "ami-0fb63e4d052d60cbf",
    "Best25Mbps": "ami-05d5adf713913004a",
    "Best5000Mbps": "ami-02607dcaa753bf149",
    "Better10000Mbps": "ami-06ccec92a73aa3481",
    "Better1000Mbps": "ami-0e35ee4e12145bce2",
    "Better200Mbps": "ami-06bc5da0255104c7c",
    "Better25Mbps": "ami-05857e8beeeb0e771",
    "Better5000Mbps": "ami-04b16453d97a009d7",
    "Good10000Mbps": "ami-051051f39742a54d5",
    "Good1000Mbps": "ami-0c5b9cc2c9950e726",
    "Good16vCPU": "ami-01087fc6fd88944a2",
    "Good200Mbps": "ami-08712c7b56ef974e8",
    "Good25Mbps": "ami-0863ffe3dc4606d0c",
    "Good5000Mbps": "ami-07766a2ae2393528a",
    "PerAppVeAwaf200Mbps": "ami-0e6e9ce4957cfaeb8",
    "PerAppVeAwaf25Mbps": "ami-05112f09ab4297ba5",
    "PerAppVeLtm200Mbps": "ami-0bbeabfd8fffe076f",
    "PerAppVeLtm25Mbps": "ami-09b66e4b24afd3197"
   },
   "ca-central-1": {
    "AdvancedWaf200Mbps": "ami-0653767d9a80bf2b3",
    "AdvancedWaf25Mbps": "ami-0fa1657567792dfd8",
    "Best10000Mbps": "ami-005963f2e67a4faff",
    "Best1000Mbps": "ami-0bfb8e61565139d86",
    "Best200Mbps": "ami-00fd001b0196201de",
    "Best25Mbps": "ami-0c4d2a72225107d7c",
    "Best5000Mbps": "ami-0d75021c75c97d08f",
    "Better10000Mbps": "ami-04fe99b7bde9620f4",
    "Better1000Mbps": "ami-0db25832c5cbb60ee",
    "Better200Mbps": "ami-0b4dc671292734bd8",
    "Better25Mbps": "ami-0b15d6eb4d6f215c8",
    "Better5000Mbps": "ami-070801845e9ab2c26",
    "Good10000Mbps": "ami-0c02416d8627bf2bf",
    "Good1000Mbps": "ami-0da4513842d9173d5",
    "Good16vCPU": "ami-011e988e9ee757d5a",
    "Good200Mbps": "ami-0b8dc4a79e131b9c5",
    "Good25Mbps": "ami-0ec0953c70fda0742",
    "Good5000Mbps": "ami-0b71e6891a72c93ab",
    "PerAppVeAwaf200Mbps": "ami-01dad01ac8c7fc1f0",
    "PerAppVeAwaf25Mbps": "ami-0122cf56645bbb58c",
    "PerAppVeLtm200Mbps": "ami-020eae4d8357546be",
    "PerAppVeLtm25Mbps": "ami-071bbc676b71fc091"
   },
   "eu-central-1": {
    "AdvancedWaf200Mbps": "ami-0bd054f1adf36d4e2",
    "AdvancedWaf25Mbps": "ami-034420c2ecf1c8435",
    "Best10000Mbps": "ami-0b41d4fe6d4cf27c7",
    "Best1000Mbps": "ami-0e814acc3a4119cff",
    "Best200Mbps": "ami-024ab3b4f77abe8ab",
    "Best25Mbps": "ami-0a5d51f7188d4507f",
    "Best5000Mbps": "ami-02e7d25b02d450579",
    "Better10000Mbps": "ami-038643afe911f55bc",
    "Better1000Mbps": "ami-0236253a155736d09",
    "Better200Mbps": "ami-06ace079bbe8461e8",
    "Better25Mbps": "ami-068df61253702d53c",
    "Better5000Mbps": "ami-0bec0d4b60317c63d",
    "Good10000Mbps": "ami-0a8a1da9a70413443",
    "Good1000Mbps": "ami-0c5c7634044c60091",
    "Good16vCPU": "ami-0ed935769d7f30b67",
    "Good200Mbps": "ami-0c3cdda5cc9f617d3",
    "Good25Mbps": "ami-0ea09a7c1b03d6e9b",
    "Good5000Mbps": "ami-0129c44b916753fa2",
    "PerAppVeAwaf200Mbps": "ami-0466f65abda88cd6c",
    "PerAppVeAwaf25Mbps": "ami-0a5fa333b9954a119",
    "PerAppVeLtm200Mbps": "ami-0eb33426be47ae75f",
    "PerAppVeLtm25Mbps": "ami-06ff95ef872fa047b"
   },
   "eu-north-1": {
    "AdvancedWaf200Mbps": "ami-087349954fa3f0dbf",
    "AdvancedWaf25Mbps": "ami-03a8c0fc6c6aaa5d0",
    "Best10000Mbps": "ami-006eee9e935eb684f",
    "Best1000Mbps": "ami-0b315bd8b6f380d91",
    "Best200Mbps": "ami-0f3bc0fa090c0e701",
    "Best25Mbps": "ami-0b0cdd375a66fd8cf",
    "Best5000Mbps": "ami-01a0311b0098ab977",
    "Better10000Mbps": "ami-0e3d24de35f450e3e",
    "Better1000Mbps": "ami-0c8d0332fcf1ca244",
    "Better200Mbps": "ami-07166d0f9102d2df5",
    "Better25Mbps": "ami-0d62428c4012fcb1a",
    "Better5000Mbps": "ami-0c40c4c1c4d8df0d2",
    "Good10000Mbps": "ami-0cbfa69fad1755ffa",
    "Good1000Mbps": "ami-016887abc1a8f78c2",
    "Good16vCPU": "ami-0719454bc4e2978d8",
    "Good200Mbps": "ami-0438995acd8c51ade",
    "Good25Mbps": "ami-0b6b8802af80332af",
    "Good5000Mbps": "ami-02c8c7272fe55229e",
    "PerAppVeAwaf200Mbps": "ami-0a5dd46f3e85ed6da",
    "PerAppVeAwaf25Mbps": "ami-0348b245dd324c660",
    "PerAppVeLtm200Mbps": "ami-027c490236804284f",
    "PerAppVeLtm25Mbps": "ami-08ed203a399c05197"
   },
   "eu-south-1": {
    "AdvancedWaf200Mbps": "ami-01c83d6218973de48",
    "AdvancedWaf25Mbps": "ami-0e2878c2ed0b1b7a3",
    "Best10000Mbps": "ami-0917b9e36e6e10a55",
    "Best1000Mbps": "ami-0a9d64b07044783b0",
    "Best200Mbps": "ami-0598eca5b3b19bbe0",
    "Best25Mbps": "ami-044b03abe7060f475",
    "Best5000Mbps": "ami-0cf00e152cdd1a15f",
    "Better10000Mbps": "ami-0abce4e9b1c99e065",
    "Better1000Mbps": "ami-02757994ac4c3554d",
    "Better200Mbps": "ami-07998482fc6061bb8",
    "Better25Mbps": "ami-0dc44c8e9ae588693",
    "Better5000Mbps": "ami-0b4420240f4eaa627",
    "Good10000Mbps": "ami-0537904b12ce6e8a5",
    "Good1000Mbps": "ami-0919a26d70fe16909",
    "Good16vCPU": "ami-0e0b229984136bb85",
    "Good200Mbps": "ami-03483938cc50711f7",
    "Good25Mbps": "ami-07f9b913306cce47d",
    "Good5000Mbps": "ami-0e3d20b68e56b71ef",
    "PerAppVeAwaf200Mbps": "ami-04c6f548eeb9624a1",
    "PerAppVeAwaf25Mbps": "ami-09c842f66557b3034",
    "PerAppVeLtm200Mbps": "ami-0ce7c0f6a738785bc",
    "PerAppVeLtm25Mbps": "ami-0c79b5f591565be2d"
   },
   "eu-west-1": {
    "AdvancedWaf200Mbps": "ami-043255c95d6241bc4",
    "AdvancedWaf25Mbps": "ami-0f3143ea405f7bd1c",
    "Best10000Mbps": "ami-0e8e11c04ff6c3589",
    "Best1000Mbps": "ami-0189ff316b4e42e71",
    "Best200Mbps": "ami-0c1b3b0622fa6895e",
    "Best25Mbps": "ami-0dedc56320163fe78",
    "Best5000Mbps": "ami-0e43fc59b6705bde3",
    "Better10000Mbps": "ami-07ee84e213a70b5bc",
    "Better1000Mbps": "ami-0d0ab4342aaf9d9b1",
    "Better200Mbps": "ami-084e9781237532bff",
    "Better25Mbps": "ami-0cb0cbc00b6bf4cf1",
    "Better5000Mbps": "ami-08081209dcfc6b88a",
    "Good10000Mbps": "ami-0465d456b5b3352fe",
    "Good1000Mbps": "ami-03e6b29ee19b0dd61",
    "Good16vCPU": "ami-015e673b5182675c8",
    "Good200Mbps": "ami-04096a9497be7bd87",
    "Good25Mbps": "ami-0e112caaaff2a2a4f",
    "Good5000Mbps": "ami-09f161e33e3a8b48b",
    "PerAppVeAwaf200Mbps": "ami-017746644e4b8c227",
    "PerAppVeAwaf25Mbps": "ami-07848e6f7c6adc337",
    "PerAppVeLtm200Mbps": "ami-07fb2ab8c7978c95f",
    "PerAppVeLtm25Mbps": "ami-073bb59fc7e463821"
   },
   "eu-west-2": {
    "AdvancedWaf200Mbps": "ami-0b8ce0776d72fab4e",
    "AdvancedWaf25Mbps": "ami-0b4b21d7d7a48ef7e",
    "Best10000Mbps": "ami-06522529c229c56c5",
    "Best1000Mbps": "ami-084557f298d688aca",
    "Best200Mbps": "ami-088d4e3cd96cce003",
    "Best25Mbps": "ami-0d2ab9dddcda7efdb",
    "Best5000Mbps": "ami-039a3566c84df73b1",
    "Better10000Mbps": "ami-03ff583aeae812ec9",
    "Better1000Mbps": "ami-06e5cbee15649039b",
    "Better200Mbps": "ami-02ce430d1fddcc7eb",
    "Better25Mbps": "ami-0ed799eb003e22cee",
    "Better5000Mbps": "ami-0a22365aa49c23010",
    "Good10000Mbps": "ami-0920803f2193c7894",
    "Good1000Mbps": "ami-05eb557d6737c7e52",
    "Good16vCPU": "ami-0fc2de7b8157515a0",
    "Good200Mbps": "ami-0ce1e936ec55e437b",
    "Good25Mbps": "ami-0e6c8f09151e5d08a",
    "Good5000Mbps": "ami-0aa3182ebc0c3f166",
    "PerAppVeAwaf200Mbps": "ami-0440d0c11cbdb24c1",
    "PerAppVeAwaf25Mbps": "ami-0ee77a38fbf2dae64",
    "PerAppVeLtm200Mbps": "ami-0baeb912382a972e7",
    "PerAppVeLtm25Mbps": "ami-00a8961d838cfd67d"
   },
   "eu-west-3": {
    "AdvancedWaf200Mbps": "ami-0b918b9771c306473",
    "AdvancedWaf25Mbps": "ami-0b51a6983a9527efb",
    "Best10000Mbps": "ami-039bd0fdcf213f69b",
    "Best1000Mbps": "ami-0f6018e608cd895b6",
    "Best200Mbps": "ami-00c64f1c4f9f8d036",
    "Best25Mbps": "ami-0ac3780bd956b4250",
    "Best5000Mbps": "ami-07a61a4346e310dd2",
    "Better10000Mbps": "ami-0ea936c0e8276ce36",
    "Better1000Mbps": "ami-0e0a5b138b80a0f7b",
    "Better200Mbps": "ami-0afee60fef65b0028",
    "Better25Mbps": "ami-0be70c9eebc279bdd",
    "Better5000Mbps": "ami-09ea4324384156ddf",
    "Good10000Mbps": "ami-0f27b7971d16b0f55",
    "Good1000Mbps": "ami-0c52f8adbc8040563",
    "Good16vCPU": "ami-0a7c2bdf52b696196",
    "Good200Mbps": "ami-0d353d8cc6c291612",
    "Good25Mbps": "ami-0a916e770b6add7c3",
    "Good5000Mbps": "ami-07210e04a14bd9418",
    "PerAppVeAwaf200Mbps": "ami-0e69c5292e8e27ff8",
    "PerAppVeAwaf25Mbps": "ami-012a769e36e9ea1fa",
    "PerAppVeLtm200Mbps": "ami-09e435b15562f2fb2",
    "PerAppVeLtm25Mbps": "ami-03f9e04b9d56afa8c"
   },
   "me-south-1": {
    "AdvancedWaf200Mbps": "ami-0669538fef3f8e34d",
    "AdvancedWaf25Mbps": "ami-0a856fcff8c99a8f0",
    "Best10000Mbps": "ami-0f6a8098a3876a528",
    "Best1000Mbps": "ami-027de9654682a5c00",
    "Best200Mbps": "ami-0d67324848f5c9cf4",
    "Best25Mbps": "ami-0c17358fbda06eb5b",
    "Best5000Mbps": "ami-0d3ae225d6abfba5c",
    "Better10000Mbps": "ami-0df608e7a18f1c47a",
    "Better1000Mbps": "ami-02f8a2e6ede673a7b",
    "Better200Mbps": "ami-006ba276bf0922dce",
    "Better25Mbps": "ami-0c07a3ae51a6b7bf3",
    "Better5000Mbps": "ami-043d21ecf4c17cc9f",
    "Good10000Mbps": "ami-00b2b03e3b29d77af",
    "Good1000Mbps": "ami-0bed00406e3c6157f",
    "Good16vCPU": "ami-026ea5d78b28ec1bd",
    "Good200Mbps": "ami-062fb25b1f99a2038",
    "Good25Mbps": "ami-079b7721b02efa225",
    "Good5000Mbps": "ami-0e800a635ad8321d4",
    "PerAppVeAwaf200Mbps": "ami-08c1b01716d107b7f",
    "PerAppVeAwaf25Mbps": "ami-03b28ad2984f80073",
    "PerAppVeLtm200Mbps": "ami-0c8722d63c6feda71",
    "PerAppVeLtm25Mbps": "ami-034ec1c9fe42c9b0d"
   },
   "sa-east-1": {
    "AdvancedWaf200Mbps": "ami-0b020694c473563d1",
    "AdvancedWaf25Mbps": "ami-0f264797387f85899",
    "Best10000Mbps": "ami-02014fbe0ac912c6f",
    "Best1000Mbps": "ami-0551b4659a3cace51",
    "Best200Mbps": "ami-00aa65d21129800a9",
    "Best25Mbps": "ami-0fd5ce7ac552df906",
    "Best5000Mbps": "ami-07242f034da6d6ff3",
    "Better10000Mbps": "ami-04d51e2a4130c00a9",
    "Better1000Mbps": "ami-0195f1309681b1cab",
    "Better200Mbps": "ami-0810dc0861740fd1a",
    "Better25Mbps": "ami-0bd70623566ecb08b",
    "Better5000Mbps": "ami-00e589036cf7cd3be",
    "Good10000Mbps": "ami-0d688b8031feea374",
    "Good1000Mbps": "ami-0d48eabcc9c47e58d",
    "Good16vCPU": "ami-03570a77c1ed06638",
    "Good200Mbps": "ami-04fa78e8d40b9a0be",
    "Good25Mbps": "ami-04f8400a814e21dac",
    "Good5000Mbps": "ami-064fd09e348eaa99c",
    "PerAppVeAwaf200Mbps": "ami-024b6398aa59b20ee",
    "PerAppVeAwaf25Mbps": "ami-050c038016e1b8410",
    "PerAppVeLtm200Mbps": "ami-0cd38815c158a8065",
    "PerAppVeLtm25Mbps": "ami-0d72927aac0ef69ec"
   },
   "us-east-1": {
    "AdvancedWaf200Mbps": "ami-008047e24a89b3aa7",
    "AdvancedWaf25Mbps": "ami-06ec9675e036fb81c",
    "Best10000Mbps": "ami-05a75edc80bd9dab9",
    "Best1000Mbps": "ami-00e7ea9fe44e33c19",
    "Best200Mbps": "ami-00d7446d1ed101f9b",
    "Best25Mbps": "ami-04598bbc0fdd5b545",
    "Best5000Mbps": "ami-0d62b18c4bd4aa0e8",
    "Better10000Mbps": "ami-000e7e8734ffccdd7",
    "Better1000Mbps": "ami-01689a16db64cadb8",
    "Better200Mbps": "ami-059fbdfd3e83778f2",
    "Better25Mbps": "ami-0550c3a66de2a0875",
    "Better5000Mbps": "ami-0c8d078e2f3934cba",
    "Good10000Mbps": "ami-04e7601d1d3e91e51",
    "Good1000Mbps": "ami-05b0051d6d63a0ebe",
    "Good16vCPU": "ami-0ff13f8dc844dc39c",
    "Good200Mbps": "ami-0c38e857afe4bdb88",
    "Good25Mbps": "ami-056444b3c407ffcea",
    "Good5000Mbps": "ami-0f3af0e34d0045cc4",
    "PerAppVeAwaf200Mbps": "ami-0947d797b5f0e0354",
    "PerAppVeAwaf25Mbps": "ami-019855cb130761c46",
    "PerAppVeLtm200Mbps": "ami-0964462de628b2f8f",
    "PerAppVeLtm25Mbps": "ami-0fd6eee26a121cd35"
   },
   "us-east-2": {
    "AdvancedWaf200Mbps": "ami-0264382517a938934",
    "AdvancedWaf25Mbps": "ami-0453817f4713eed47",
    "Best10000Mbps": "ami-06522a196cbee865e",
    "Best1000Mbps": "ami-0a1f3c82fdff9a266",
    "Best200Mbps": "ami-073bd571ec96d1af5",
    "Best25Mbps": "ami-092a3f224c3506e96",
    "Best5000Mbps": "ami-08675c29e7a2edd57",
    "Better10000Mbps": "ami-0b14dec8a07b1a448",
    "Better1000Mbps": "ami-076d16a9dcee3c883",
    "Better200Mbps": "ami-04b6f95f99b2ab4fe",
    "Better25Mbps": "ami-0021d21ea78eb31ed",
    "Better5000Mbps": "ami-068eda8517f9172e8",
    "Good10000Mbps": "ami-0217916798d3d3a11",
    "Good1000Mbps": "ami-0eeab4d291e3df95c",
    "Good16vCPU": "ami-0749f51466ae44edc",
    "Good200Mbps": "ami-02b499410705a44df",
    "Good25Mbps": "ami-04b17acf76ab6ced1",
    "Good5000Mbps": "ami-06158776e492857e6",
    "PerAppVeAwaf200Mbps": "ami-047414ef75638f300",
    "PerAppVeAwaf25Mbps": "ami-04f895bf071724dfc",
    "PerAppVeLtm200Mbps": "ami-03eeff5ebd86f18d4",
    "PerAppVeLtm25Mbps": "ami-020f38fa085fc17da"
   },
   "us-gov-east-1": {
    "AdvancedWaf200Mbps": "ami-0a1ae1c95ef5cd27c",
    "AdvancedWaf25Mbps": "ami-03d87a7c0ccce067b",
    "Best10000Mbps": "ami-059efbe22f4431a34",
    "Best1000Mbps": "ami-0089a022142f4a527",
    "Best200Mbps": "ami-04a375687f0202860",
    "Best25Mbps": "ami-04b732a807099907b",
    "Best5000Mbps": "ami-08d674abdf03ed22d",
    "Better10000Mbps": "ami-026e67e4263fa3436",
    "Better1000Mbps": "ami-001cc018ea2fb916d",
    "Better200Mbps": "ami-0f37f7eff711ae8c9",
    "Better25Mbps": "ami-01c8cae59dbc55839",
    "Better5000Mbps": "ami-0180458f4ecbe6476",
    "Good10000Mbps": "ami-076825c6340f0022c",
    "Good1000Mbps": "ami-0337d18dbb37809a0",
    "Good16vCPU": "ami-01601bbd86707ec98",
    "Good200Mbps": "ami-05fe4ee22689a1302",
    "Good25Mbps": "ami-0603ff7e2e9c88b05",
    "Good5000Mbps": "ami-014f91e5268801eca",
    "PerAppVeAwaf200Mbps": "ami-058c995bf4de9bc83",
    "PerAppVeAwaf25Mbps": "ami-0e2d38cbc9ac9aabf",
    "PerAppVeLtm200Mbps": "ami-0877a883a7e7f5f6b",
    "PerAppVeLtm25Mbps": "ami-0c8045f217bdb6526"
   },
   "us-gov-west-1": {
    "AdvancedWaf200Mbps": "ami-0553c024984244cf7",
    "AdvancedWaf25Mbps": "ami-0fc5cc1214480cc3a",
    "Best10000Mbps": "ami-0ad200f2a2484d8ad",
    "Best1000Mbps": "ami-0a553224a452f4fc0",
    "Best200Mbps": "ami-047a241ae0e30a7c5",
    "Best25Mbps": "ami-0b661559cdf6c165a",
    "Best5000Mbps": "ami-09b932cf33fd708b1",
    "Better10000Mbps": "ami-0373c178825556763",
    "Better1000Mbps": "ami-0e08aae0db3fc90fc",
    "Better200Mbps": "ami-0829928d8178f66b4",
    "Better25Mbps": "ami-0f3545d482f52345b",
    "Better5000Mbps": "ami-0f61431639a3f7efd",
    "Good10000Mbps": "ami-090ab322c6e728b6e",
    "Good1000Mbps": "ami-04348cd14e4483e83",
    "Good16vCPU": "ami-0f8f9c62b37f21716",
    "Good200Mbps": "ami-08748246c7d6a5791",
    "Good25Mbps": "ami-0970c4cfb71aacb3d",
    "Good5000Mbps": "ami-0414bf349c80b7e41",
    "PerAppVeAwaf200Mbps": "ami-00633112a028b608f",
    "PerAppVeAwaf25Mbps": "ami-0020445bf9820c434",
    "PerAppVeLtm200Mbps": "ami-07a0562c13c3a064d",
    "PerAppVeLtm25Mbps": "ami-0a24d8526b2208810"
   },
   "us-west-1": {
    "AdvancedWaf200Mbps": "ami-0548bca5ad74031ce",
    "AdvancedWaf25Mbps": "ami-065ba8e9795159be1",
    "Best10000Mbps": "ami-0d6f752d43067b431",
    "Best1000Mbps": "ami-0cff3ddb0c4b315f1",
    "Best200Mbps": "ami-02da2712efaf2b83d",
    "Best25Mbps": "ami-0cb50fa9f247fbf0a",
    "Best5000Mbps": "ami-09352c37a19b2935c",
    "Better10000Mbps": "ami-052779c028b9d0188",
    "Better1000Mbps": "ami-043b4797d60f24765",
    "Better200Mbps": "ami-0c8abb815c52dc3de",
    "Better25Mbps": "ami-08ffef1507eb1bcb1",
    "Better5000Mbps": "ami-00af158f873bfba71",
    "Good10000Mbps": "ami-0e1bcc42ea1b68a5d",
    "Good1000Mbps": "ami-00efdf9c2333146f9",
    "Good16vCPU": "ami-0931db308b52364ba",
    "Good200Mbps": "ami-076d4c5406a751301",
    "Good25Mbps": "ami-03a1fb871f874292b",
    "Good5000Mbps": "ami-0516564b25e031242",
    "PerAppVeAwaf200Mbps": "ami-01ae88ea0b38757b9",
    "PerAppVeAwaf25Mbps": "ami-008878521428b3ce8",
    "PerAppVeLtm200Mbps": "ami-0c7b8934c8afbc706",
    "PerAppVeLtm25Mbps": "ami-0a0ac2fc6ad84632c"
   },
   "us-west-2": {
    "AdvancedWaf200Mbps": "ami-0826782d3747140a0",
    "AdvancedWaf25Mbps": "ami-00cf39e517abf14a6",
    "Best10000Mbps": "ami-0131705cea63e8bfd",
    "Best1000Mbps": "ami-0bf7c36963b8063fc",
    "Best200Mbps": "ami-09ae9af26d2e96786",
    "Best25Mbps": "ami-04eb091b4fc429306",
    "Best5000Mbps": "ami-0c9dbefa3d431cbe2",
    "Better10000Mbps": "ami-0fdbb6d0e0452f00b",
    "Better1000Mbps": "ami-06f1dfe73caac7c9b",
    "Better200Mbps": "ami-0cd92c927fbea70bc",
    "Better25Mbps": "ami-0a6899e6c74206c38",
    "Better5000Mbps": "ami-0b215066ef712e333",
    "Good10000Mbps": "ami-07d539c074c496a64",
    "Good1000Mbps": "ami-08b80c86bceecde8e",
    "Good16vCPU": "ami-03146ed18e478ea37",
    "Good200Mbps": "ami-00da987992cf28bd7",
    "Good25Mbps": "ami-0862fc4b4ddde0b56",
    "Good5000Mbps": "ami-0c49b4e5c048aa99d",
    "PerAppVeAwaf200Mbps": "ami-0deb09b51ebe1e0ef",
    "PerAppVeAwaf25Mbps": "ami-0119da5305a791f4d",
    "PerAppVeLtm200Mbps": "ami-0145744d68693364f",
    "PerAppVeLtm25Mbps": "ami-058c15865bcd40cf3"
   }
  }
 },
 "Metadata": {
  "AWS::CloudFormation::Interface": {
   "ParameterGroups": [
    {
     "Label": {
      "default": "NETWORKING CONFIGURATION"
     },
     "Parameters": [
      "Vpc",
      "managementSubnetAz1",
      "managementSubnetAz2",
      "subnet1Az1",
      "subnet1Az2",
      "subnet2Az1",
      "subnet2Az2",
      "availabilityZone1",
      "availabilityZone2",
      "numberOfAdditionalNics",
      "additionalNicLocation",
      "provisionPublicIP"
     ]
    },
    {
     "Label": {
      "default": "INSTANCE CONFIGURATION"
     },
     "Parameters": [
      "imageName",
      "customImageId",
      "instanceType",
      "applicationInstanceType",
      "licenseKey1",
      "licenseKey2",
      "managementGuiPort",
      "sshKey",
      "restrictedSrcAddress",
      "restrictedSrcAddressApp",
      "ntpServer",
      "timezone",
      "bigIpModules"
     ]
    },
    {
     "Label": {
      "default": "TAGS"
     },
     "Parameters": [
      "application",
      "environment",
      "group",
      "owner",
      "costcenter"
     ]
    },
    {},
    {
     "Label": {
      "default": "TEMPLATE ANALYTICS"
     },
     "Parameters": [
      "allowUsageAnalytics",
      "allowPhoneHome"
     ]
    },
    {
     "Label": {
      "default": "VIRTUAL SERVICE CONFIGURATION"
     },
     "Parameters": [
      "declarationUrl"
     ]
    }
   ],
   "ParameterLabels": {
    "Vpc": {
     "default": "VPC"
    },
    "additionalNicLocation": {
     "default": "Additional NIC Location"
    },
    "allowPhoneHome": {
     "default": "Send Anonymous Device Statistics to F5"
    },
    "allowUsageAnalytics": {
     "default": "Send Anonymous Template Statistics to F5"
    },
    "application": {
     "default": "Application"
    },
    "applicationInstanceType": {
     "default": "Application Instance Type"
    },
    "availabilityZone1": {
     "default": "Availability Zone 1"
    },
    "availabilityZone2": {
     "default": "Availability Zone 2"
    },
    "bigIpModules": {
     "default": "BIG-IP Modules"
    },
    "costcenter": {
     "default": "Cost Center"
    },
    "customImageId": {
     "default": "Custom Image Id"
    },
    "declarationUrl": {
     "default": "AS3 Declaration URL"
    },
    "environment": {
     "default": "Environment"
    },
    "group": {
     "default": "Group"
    },
    "imageName": {
     "default": "BIG-IP Image Name"
    },
    "instanceType": {
     "default": "AWS Instance Size"
    },
    "licenseKey1": {
     "default": "License Key 1"
    },
    "licenseKey2": {
     "default": "License Key 2"
    },
    "managementGuiPort": {
     "default": "BIG-IP Management Port"
    },
    "managementSubnetAz1": {
     "default": "Management Subnet AZ1"
    },
    "managementSubnetAz2": {
     "default": "Management Subnet AZ2"
    },
    "ntpServer": {
     "default": "NTP Server"
    },
    "numberOfAdditionalNics": {
     "default": "Number Of Additional NICs"
    },
    "owner": {
     "default": "Owner"
    },
    "provisionPublicIP": {
     "default": "Provision Public IP addresses for the BIG-IP interfaces"
    },
    "restrictedSrcAddress": {
     "default": "Source Address(es) for Management Access"
    },
    "restrictedSrcAddressApp": {
     "default": "Source Address(es) for Web Application Access (80/443)"
    },
    "sshKey": {
     "default": "SSH Key"
    },
    "subnet1Az1": {
     "default": "Subnet1 in AZ1"
    },
    "subnet1Az2": {
     "default": "Subnet1 in AZ2"
    },
    "subnet2Az1": {
     "default": "Subnet2 in AZ1"
    },
    "subnet2Az2": {
     "default": "Subnet2 in AZ2"
    },
    "timezone": {
     "default": "Timezone (Olson)"
    }
   }
  },
  "Version": "5.12.0"
 },
 "Outputs": {
  "Bigip1ExternalInterfacePrivateIp": {
   "Description": "Internally routable IP of the public interface on BIG-IP",
   "Value": {
    "Fn::GetAtt": [
     "Bigip1subnet1Az1Interface",
     "PrimaryPrivateIpAddress"
    ]
   }
  },
  "Bigip1InstanceId": {
   "Description": "Instance Id of BIG-IP in Amazon",
   "Value": {
    "Ref": "Bigip1Instance"
   }
  },
  "Bigip1ManagementEipAddress": {
   "Condition": "usePublicIP",
   "Description": "IP address of the management port on BIG-IP",
   "Value": {
    "Ref": "Bigip1ManagementEipAddress"
   }
  },
  "Bigip1ManagementInterface": {
   "Description": "Management interface ID on BIG-IP",
   "Value": {
    "Ref": "Bigip1ManagementInterface"
   }
  },
  "Bigip1ManagementInterfacePrivateIp": {
   "Description": "Internally routable IP of the management interface on BIG-IP",
   "Value": {
    "Fn::GetAtt": [
     "Bigip1ManagementInterface",
     "PrimaryPrivateIpAddress"
    ]
   }
  },
  "Bigip1Url": {
   "Condition": "usePublicIP",
   "Description": "BIG-IP Management GUI",
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Fn::GetAtt": [
        "Bigip1Instance",
        "PublicIp"
       ]
      }
     ]
    ]
   }
  },
  "Bigip1VipEipAddress": {
   "Condition": "usePublicIP",
   "Description": "EIP address for VIP",
   "Value": {
    "Fn::Join": [
     "",
     [
      "http://",
      {
       "Ref": "Bigip1VipEipAddress"
      },
      ":80"
     ]
    ]
   }
  },
  "Bigip1VipPrivateIp": {
   "Description": "Secondary IP 1 on BIG-IP1's External Interface.",
   "Value": {
    "Fn::Select": [
     "0",
     {
      "Fn::GetAtt": [
       "Bigip1subnet1Az1Interface",
       "SecondaryPrivateIpAddresses"
      ]
     }
    ]
   }
  },
  "Bigip1subnet1Az1Interface": {
   "Description": "External interface Id on BIG-IP",
   "Value": {
    "Ref": "Bigip1subnet1Az1Interface"
   }
  },
  "Bigip1subnet1Az1SelfEipAddress": {
   "Condition": "usePublicIP",
   "Description": "IP Address of the External interface attached to BIG-IP",
   "Value": {
    "Ref": "Bigip1subnet1Az1SelfEipAddress"
   }
  },
  "Bigip2ExternalInterfacePrivateIp": {
   "Description": "Internally routable IP of the public interface on BIG-IP",
   "Value": {
    "Fn::GetAtt": [
     "Bigip2subnet1Az1Interface",
     "PrimaryPrivateIpAddress"
    ]
   }
  },
  "Bigip2InstanceId": {
   "Description": "Instance Id of BIG-IP in Amazon",
   "Value": {
    "Ref": "Bigip2Instance"
   }
  },
  "Bigip2ManagementEipAddress": {
   "Condition": "usePublicIP",
   "Description": "IP address of the management port on BIG-IP",
   "Value": {
    "Ref": "Bigip2ManagementEipAddress"
   }
  },
  "Bigip2ManagementInterface": {
   "Description": "Management interface ID on BIG-IP",
   "Value": {
    "Ref": "Bigip2ManagementInterface"
   }
  },
  "Bigip2ManagementInterfacePrivateIp": {
   "Description": "Internally routable IP of the management interface on BIG-IP",
   "Value": {
    "Fn::GetAtt": [
     "Bigip2ManagementInterface",
     "PrimaryPrivateIpAddress"
    ]
   }
  },
  "Bigip2Url": {
   "Condition": "usePublicIP",
   "Description": "BIG-IP Management GUI",
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Fn::GetAtt": [
        "Bigip2Instance",
        "PublicIp"
       ]
      }
     ]
    ]
   }
  },
  "Bigip2VipPrivateIp": {
   "Description": "Secondary IP 1 on BIG-IP2's External Interface.",
   "Value": {
    "Fn::Select": [
     "0",
     {
      "Fn::GetAtt": [
       "Bigip2subnet1Az1Interface",
       "SecondaryPrivateIpAddresses"
      ]
     }
    ]
   }
  },
  "Bigip2subnet1Az1Interface": {
   "Description": "External interface Id on BIG-IP",
   "Value": {
    "Ref": "Bigip2subnet1Az1Interface"
   }
  },
  "Bigip2subnet1Az1SelfEipAddress": {
   "Condition": "usePublicIP",
   "Description": "IP Address of the External interface attached to BIG-IP",
   "Value": {
    "Ref": "Bigip2subnet1Az1SelfEipAddress"
   }
  },
  "availabilityZone1": {
   "Description": "Availability Zone",
   "Value": {
    "Fn::GetAtt": [
     "Bigip1Instance",
     "AvailabilityZone"
    ]
   }
  },
  "availabilityZone2": {
   "Description": "Availability Zone",
   "Value": {
    "Fn::GetAtt": [
     "Bigip2Instance",
     "AvailabilityZone"
    ]
   }
  },
  "bigipExternalSecurityGroup": {
   "Description": "Public or External Security Group",
   "Value": {
    "Ref": "bigipExternalSecurityGroup"
   }
  },
  "bigipManagementSecurityGroup": {
   "Description": "Management Security Group",
   "Value": {
    "Ref": "bigipManagementSecurityGroup"
   }
  }
 },
 "Parameters": {
  "Vpc": {
   "ConstraintDescription": "This must be an existing VPC within the working region.",
   "Type": "AWS::EC2::VPC::Id"
  },
  "allowPhoneHome": {
   "AllowedValues": [
    "Yes",
    "No"
   ],
   "Default": "Yes",
   "Description": "This deployment can send anonymous device statistics to F5 to help us determine how to improve our solutions. If you select **No** statistics are not sent.",
   "Type": "String"
  },
  "allowUsageAnalytics": {
   "AllowedValues": [
    "Yes",
    "No"
   ],
   "Default": "Yes",
   "Description": "This deployment can send anonymous template statistics to F5 to help us determine how to improve our solutions. If you select **No** statistics are not sent.",
   "Type": "String"
  },
  "application": {
   "Default": "f5app",
   "Description": "Name of the Application Tag",
   "Type": "String"
  },
  "bigIpModules": {
   "Default": "ltm:nominal",
   "Description": "Comma separated list of modules and levels to provision, for example: ltm:nominal,asm:nominal",
   "Type": "String"
  },
  "costcenter": {
   "Default": "f5costcenter",
   "Description": "Name of the Cost Center Tag",
   "Type": "String"
  },
  "customImageId": {
   "ConstraintDescription": "Must be a valid AMI Id",
   "Default": "OPTIONAL",
   "Description": "If you would like to deploy using a custom BIG-IP image, provide the AMI Id.  **Note**: Unless specifically required, leave the default of **OPTIONAL**",
   "MaxLength": 255,
   "MinLength": 1,
   "Type": "String"
  },
  "declarationUrl": {
   "AllowedPattern": "^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$|^none$",
   "Default": "none",
   "Description": "URL for the AS3 declaration JSON file to be deployed. Leave as **none** to deploy without a service configuration.",
   "Type": "String"
  },
  "environment": {
   "Default": "f5env",
   "Description": "Name of the Environment Tag",
   "Type": "String"
  },
  "group": {
   "Default": "f5group",
   "Description": "Name of the Group Tag",
   "Type": "String"
  },
  "imageName": {
   "AllowedValues": [
    "Good25Mbps",
    "Good200Mbps",
    "Good1000Mbps",
    "Good5000Mbps",
    "Good10000Mbps",
    "Good16vCPU",
    "Better25Mbps",
    "Better200Mbps",
    "Better1000Mbps",
    "Better5000Mbps",
    "Better10000Mbps",
    "Best25Mbps",
    "Best200Mbps",
    "Best1000Mbps",
    "Best5000Mbps",
    "Best10000Mbps",
    "AdvancedWaf25Mbps",
    "AdvancedWaf200Mbps"
   ],
   "ConstraintDescription": "Must be a valid F5 BIG-IP VE image type",
   "Default": "Best1000Mbps",
   "Description": "F5 BIG-IP Performance Type",
   "Type": "String"
  },
  "instanceType": {
   "AllowedValues": [
    "m5.xlarge",
    "m5.4xlarge",
    "m5.large",
    "m5.12xlarge",
    "m4.xlarge",
    "m4.large",
    "m4.4xlarge",
    "m4.2xlarge",
    "m4.16xlarge",
    "m4.10xlarge",
    "m3.xlarge",
    "m3.medium",
    "m3.large",
    "m3.2xlarge",
    "cc2.8xlarge",
    "c5.xlarge",
    "c5.large",
    "c5.4xlarge",
    "c5.9xlarge",
    "c4.xlarge",
    "c4.8xlarge",
    "c4.4xlarge",
    "c4.2xlarge",
    "c3.xlarge",
    "c3.8xlarge",
    "c3.4xlarge",
    "c3.2xlarge",
    "c5n.2xlarge",
    "c5n.4xlarge"
   ],
   "ConstraintDescription": "Must be a valid EC2 instance type for BIG-IP",
   "Default": "m5.xlarge",
   "Description": "Size of the F5 BIG-IP Virtual Instance",
   "Type": "String"
  },
  "managementSubnetAz1": {
   "ConstraintDescription": "The subnet ID must be within an existing VPC",
   "Description": "Management Subnet ID",
   "Type": "AWS::EC2::Subnet::Id"
  },
  "ntpServer": {
   "Default": "0.pool.ntp.org",
   "Description": "NTP server for this implementation",
   "Type": "String"
  },
  "owner": {
   "Default": "f5owner",
   "Description": "Name of the Owner Tag",
   "Type": "String"
  },
  "provisionPublicIP": {
   "AllowedValues": [
    "Yes",
    "No"
   ],
   "Default": "Yes",
   "Description": "Whether or not to provision Public IP Addresses for the BIG-IP Network Interfaces. By Default no Public IP addresses are provisioned.",
   "Type": "String"
  },
  "restrictedSrcAddress": {
   "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
   "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x.",
   "Description": " The IP address range used to SSH and access managment GUI on the EC2 instances",
   "MaxLength": "18",
   "MinLength": "9",
   "Type": "String"
  },
  "restrictedSrcAddressApp": {
   "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
   "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x.",
   "Description": " The IP address range that can be used to access web traffic (80/443) to the EC2 instances",
   "MaxLength": "18",
   "MinLength": "9",
   "Type": "String"
  },
  "sshKey": {
   "Description": "EC2 KeyPair to enable SSH access to the BIG-IP instance",
   "Type": "AWS::EC2::KeyPair::KeyName"
  },
  "subnet1Az1": {
   "ConstraintDescription": "The subnet ID must be within an existing VPC",
   "Description": "Public or External subnet",
   "Type": "AWS::EC2::Subnet::Id"
  },
  "timezone": {
   "Default": "UTC",
   "Description": "Enter the Olson timezone string from /usr/share/zoneinfo. The default is 'UTC'. See the TZ column here (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) for legal values. For example, 'US/Eastern'.",
   "Type": "String"
  }
 },
 "Resources": {
  "Bigip1Instance": {
   "Metadata": {
    "AWS::CloudFormation::Init": {
     "config": {
      "commands": {
       "000-disable-1nicautoconfig": {
        "command": "/usr/bin/setdb provision.1nicautoconfig disable"
       },
       "001-rest-provision-extramb": {
        "command": "/usr/bin/setdb provision.extramb 1000"
       },
       "002-rest-use-extramb": {
        "command": "/usr/bin/setdb restjavad.useextramb true"
       },
       "003-rest-post": {
        "command": "/usr/bin/curl -s -f -u admin: -H \"Content-Type: application/json\" -d '{\"maxMessageBodySize\":134217728}' -X POST http://localhost:8100/mgmt/shared/server/messaging/settings/8100 | jq ."
       },
       "010-install-libs": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "mkdir -p /var/log/cloud/aws;",
           "nohup /config/installCloudLibs.sh",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "020-generate-password": {
        "command": {
         "Fn::Join": [
          "",
          [
           "nohup /config/waitThenRun.sh",
           " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           " --signal PASSWORD_CREATED",
           " --file f5-rest-node",
           " --cl-args '/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/generatePassword --file /config/cloud/aws/.adminPassword --encrypt'",
           " --log-level silly",
           " -o /var/log/cloud/aws/generatePassword.log",
           " &>> /var/log/cloud/aws/install.log < /dev/null",
           " &"
          ]
         ]
        }
       },
       "030-create-admin-user": {
        "command": {
         "Fn::Join": [
          "",
          [
           "nohup /config/waitThenRun.sh",
           " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           " --wait-for PASSWORD_CREATED",
           " --signal ADMIN_CREATED",
           " --file /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/createUser.sh",
           " --cl-args '--user srv_user",
           " --password-file /config/cloud/aws/.adminPassword",
           " --password-encrypted",
           "'",
           " --log-level silly",
           " -o /var/log/cloud/aws/createUser.log",
           " &>> /var/log/cloud/aws/install.log < /dev/null",
           " &"
          ]
         ]
        }
       },
       "040-network-config": {
        "command": {
         "Fn::Join": [
          "",
          [
           "GATEWAY_MAC=`ifconfig eth1 | egrep ether | awk '{print tolower($2)}'`; ",
           "GATEWAY_CIDR_BLOCK=`/usr/bin/curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC}/subnet-ipv4-cidr-block`; ",
           "GATEWAY_NET=${GATEWAY_CIDR_BLOCK%/*}; ",
           "GATEWAY_PREFIX=${GATEWAY_CIDR_BLOCK#*/}; ",
           "GATEWAY=`echo ${GATEWAY_NET} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`; ",
           "nohup /config/waitThenRun.sh ",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/network.js ",
           "--host localhost ",
           "-o /var/log/cloud/aws/network.log ",
           "--log-level silly ",
           "--wait-for ADMIN_CREATED ",
           "--signal NETWORK_CONFIG_DONE ",
           "--vlan name:external,nic:1.1 ",
           "--default-gw ${GATEWAY} ",
           "--self-ip 'name:external-self,address:",
           {
            "Fn::GetAtt": [
             "Bigip1subnet1Az1Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "/'${GATEWAY_PREFIX}',vlan:external,allow:tcp:4353 udp:1026' ",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "050-onboard-BIG-IP": {
        "command": {
         "Fn::If": [
          "optin",
          {
           "Fn::Join": [
            " ",
            [
             "REGION=\"",
             {
              "Ref": "AWS::Region"
             },
             "\";",
             "DEPLOYMENTID=`echo \"",
             {
              "Ref": "AWS::StackId"
             },
             "\"|sha512sum|cut -d \" \" -f 1`;",
             "CUSTOMERID=`echo \"",
             {
              "Ref": "AWS::AccountId"
             },
             "\"|sha512sum|cut -d \" \" -f 1`;",
             "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth1`;",
             "nohup /config/waitThenRun.sh",
             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
             "--install-ilx-package file:///var/config/rest/downloads/f5-appsvcs-3.26.1-1.noarch.rpm --install-ilx-package file:///var/config/rest/downloads/f5-cloud-failover-1.8.0-0.noarch.rpm",
             "--wait-for NETWORK_CONFIG_DONE",
             "--signal ONBOARD_DONE",
             "-o /var/log/cloud/aws/onboard.log",
             "--log-level silly",
             "--no-reboot",
             "--host localhost",
             "--hostname `/usr/bin/curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/hostname`",
             "--ntp ",
             {
              "Ref": "ntpServer"
             },
             "--tz ",
             {
              "Ref": "timezone"
             },
             "--dns ${NAME_SERVER}",
             "--modules ",
             {
              "Ref": "bigIpModules"
             },
             "--metrics \"cloudName:aws,region:${REGION},bigIpVersion:16.0.1.1-0.0.6,customerId:${CUSTOMERID},deploymentId:${DEPLOYMENTID},templateName:f5-existing-stack-same-az-cluster-payg-2nic-bigip.template,templateVersion:5.12.0,licenseType:hourly\"",
             "-d tm.tcpudptxchecksum:software-only ",
             "--ping",
             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          },
          {
           "Fn::Join": [
            " ",
            [
             "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth1`;",
             "nohup /config/waitThenRun.sh",
             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
             "--install-ilx-package file:///var/config/rest/downloads/f5-appsvcs-3.26.1-1.noarch.rpm --install-ilx-package file:///var/config/rest/downloads/f5-cloud-failover-1.8.0-0.noarch.rpm",
             "--wait-for NETWORK_CONFIG_DONE",
             "--signal ONBOARD_DONE",
             "-o /var/log/cloud/aws/onboard.log",
             "--log-level silly",
             "--no-reboot",
             "--host localhost",
             "--hostname `/usr/bin/curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/hostname`",
             "--ntp ",
             {
              "Ref": "ntpServer"
             },
             "--tz ",
             {
              "Ref": "timezone"
             },
             "--dns ${NAME_SERVER}",
             "--modules ",
             {
              "Ref": "bigIpModules"
             },
             "-d tm.tcpudptxchecksum:software-only ",
             "--ping",
             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          }
         ]
        }
       },
       "055-custom-config": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           "--file /config/cloud/aws/custom-config.sh",
           "--cwd /config/cloud/aws",
           "-o /var/log/cloud/aws/custom-config.log",
           "--log-level silly",
           "--wait-for ONBOARD_DONE",
           "--signal CUSTOM_CONFIG_DONE",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "060-cluster": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "HOSTNAME=`/usr/bin/curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/hostname`;",
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/cluster.js",
           "--wait-for CUSTOM_CONFIG_DONE",
           "--signal CLUSTER_DONE",
           "-o /var/log/cloud/aws/cluster.log",
           "--log-level silly",
           "--host localhost",
           "--delete-remote-primary-creds",
           "--user srv_user",
           "--delete-local-creds",
           "--password-url file:///config/cloud/aws/.adminPassword",
           "--password-encrypted",
           "--cloud aws",
           "--provider-options 's3Bucket:",
           {
            "Ref": "S3Bucket"
           },
           "'",
           "--primary",
           "--config-sync-ip",
           {
            "Fn::GetAtt": [
             "Bigip1subnet1Az1Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "--create-group",
           "--device-group same_az_failover_group",
           "--sync-type sync-failover",
           "--network-failover",
           "--device ${HOSTNAME}",
           "--auto-sync",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "065-cfe": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           "--file /config/cloud/aws/cfe-config.sh",
           "--cwd /config/cloud/aws",
           "-o /var/log/cloud/aws/cfe-config.log",
           "--log-level silly",
           "--wait-for CLUSTER_DONE",
           "--signal CFE_CONFIG_DONE",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "070-rm-password": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           "--file /config/cloud/aws/rm-srv-user.sh",
           "-o /var/log/cloud/aws/rm-srv-user.log",
           "--log-level silly",
           "--wait-for CFE_CONFIG_DONE",
           "--signal SRV_USER_REMOVED",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       }
      },
      "files": {
       "/config/cloud/aws/cfe-config.sh": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "source /config/cloud/aws/onboard_config_vars\n",
           "cfe_file_loc=\"/config/cloud/cfe_config.json\"\n",
           "cfe_response_code=$(/usr/bin/curl -skvvu ${adminUsername}:$passwd -w \"%{http_code}\" -X POST -H \"Content-Type: application/json\" https://localhost:${managementGuiPort}/mgmt/shared/cloud-failover/declare -d @$cfe_file_loc -o /dev/null)\n",
           "if [[ $cfe_response_code == 200 || $cfe_response_code == 502 ]]; then\n",
           "    echo \"Deployment of CFE application succeeded.\"\n",
           "    cfe_deployed=\"yes\"\n",
           "else\n",
           "    echo \"Failed to deploy CFE application; continuing...\"\n",
           "fi\n",
           "#Disable built-in script\nmount -o remount,rw /usr\n",
           "mv /usr/libexec/aws/aws-failover-tgactive.sh /usr/libexec/aws/aws-failover-tgactive.sh.disabled\n",
           "mv /usr/libexec/aws/aws-failover-tgrefresh.sh /usr/libexec/aws/aws-failover-tgrefresh.sh.disabled\n",
           "mount -o remount,ro /usr\n"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/custom-config.sh": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "EXTIP='",
           {
            "Fn::GetAtt": [
             "Bigip1subnet1Az1Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "'\n",
           "EXTPRIVIP='",
           {
            "Fn::Select": [
             "0",
             {
              "Fn::GetAtt": [
               "Bigip1subnet1Az1Interface",
               "SecondaryPrivateIpAddresses"
              ]
             }
            ]
           },
           "'\n",
           "HOSTNAME=`/usr/bin/curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/hostname`\n",
           "PEER_EXTPRIVIP='",
           {
            "Fn::Select": [
             "0",
             {
              "Fn::GetAtt": [
               "Bigip2subnet1Az1Interface",
               "SecondaryPrivateIpAddresses"
              ]
             }
            ]
           },
           "'\n",
           "PROGNAME=$(basename $0)\n",
           "function error_exit {\n",
           "echo \"${PROGNAME}: ${1:-\\\"Unknown Error\\\"}\" 1>&2\n",
           "exit 1\n",
           "}\n",
           "declare -a tmsh=()\n",
           "echo 'starting custom-config.sh'\n",
           "source /config/cloud/aws/onboard_config_vars\n",
           "if [[ $allowPhoneHome == \"No\" ]]; then\n",
           "    tmsh+=(\n",
           "    \"tmsh modify sys software update auto-phonehome disabled\")\n",
           "fi\n",
           "tmsh+=(\n",
           "\"tmsh modify sys db dhclient.mgmt { value disable }\"\n",
           "\"tmsh modify cm device ${HOSTNAME} unicast-address { { effective-ip ${EXTIP} effective-port 1026 ip ${EXTIP} } }\"\n",
           "\"tmsh save /sys config\")\n",
           "for CMD in \"${tmsh[@]}\"\n",
           "do\n",
           "  \"/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/waitForMcp.sh\"\n",
           "    if $CMD;then\n",
           "        echo \"command $CMD successfully executed.\"\n",
           "    else\n",
           "        error_exit \"$LINENO: An error has occurred while executing $CMD. Aborting!\"\n",
           "    fi\n",
           "done\n",
           "date\n",
           "### START CUSTOM CONFIGURATION\n",
           "deployed=\"no\"\n",
           "url_regex=\"(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$\"\n",
           "file_loc=\"/config/cloud/custom_config\"\n",
           "if [[ $declarationUrl =~ $url_regex ]]; then\n",
           "  response_code=$(/usr/bin/curl -sk -w \"%{http_code}\" $declarationUrl -o $file_loc)\n",
           "  if [[ $response_code == 200 ]]; then\n",
           "    echo \"Custom config download complete; checking for valid JSON.\"\n",
           "    cat $file_loc | jq .class\n",
           "    if [[ $? == 0 ]]; then\n",
           "      response_code=$(/usr/bin/curl -skvvu ${adminUsername}:$passwd -w \"%{http_code}\" -X POST -H \"Content-Type: application/json\" -H \"Expect:\" https://localhost:${managementGuiPort}/mgmt/shared/appsvcs/declare -d @$file_loc -o /dev/null)\n",
           "      if [[ $response_code == 200 || $response_code == 502 ]]; then\n",
           "        echo \"Deployment of custom application succeeded.\"\n",
           "        deployed=\"yes\"\n",
           "      else\n",
           "         echo \"Failed to deploy custom application; continuing...\"\n",
           "      fi\n",
           "    else\n",
           "      echo \"Custom config was not valid JSON, continuing...\"\n",
           "    fi\n",
           "  else\n",
           "    echo \"Failed to download custom config; continuing...\"\n",
           "  fi\n",
           "else\n",
           "  echo \"Custom config was not a URL, continuing...\"\n",
           "fi\n",
           "### END CUSTOM CONFIGURATION"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/getNameServer.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "INTERFACE=$1",
           "INTERFACE_MAC=`ifconfig ${INTERFACE} | egrep ether | awk '{print tolower($2)}'`",
           "VPC_CIDR_BLOCK=`/usr/bin/curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${INTERFACE_MAC}/vpc-ipv4-cidr-block`",
           "VPC_NET=${VPC_CIDR_BLOCK%/*}",
           "NAME_SERVER=`echo ${VPC_NET} | awk -F. '{ printf \"%d.%d.%d.%d\", $1, $2, $3, $4+2 }'`",
           "echo $NAME_SERVER"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/onboard_config_vars": {
        "content": {
         "Fn::Join": [
          "",
          [
           "",
           "#!/bin/bash\n",
           "# Generated from 5.12.0\n",
           "hostname=`/usr/bin/curl http://169.254.169.254/latest/meta-data/hostname`\n",
           "region='",
           {
            "Ref": "AWS::Region"
           },
           "'\n",
           "adminUsername='srv_user'\n",
           "managementGuiPort='443'\n",
           "timezone='",
           {
            "Ref": "timezone"
           },
           "'\n",
           "ntpServer='",
           {
            "Ref": "ntpServer"
           },
           "'\n",
           "declarationUrl='",
           {
            "Ref": "declarationUrl"
           },
           "'\n",
           "allowPhoneHome='",
           {
            "Ref": "allowPhoneHome"
           },
           "'\n",
           "passwd=$(f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/decryptDataFromFile.js --data-file /config/cloud/aws/.adminPassword)\n"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/rm-srv-user.sh": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "PROGNAME=$(basename $0)\n",
           "function error_exit {\n",
           "echo \"${PROGNAME}: ${1:-\"Unknown Error\"}\" 1>&2\n",
           "exit 1\n",
           "}\n",
           "date\n",
           "echo 'starting rm-srv-user.sh'\n",
           "declare -a tmsh=()\n",
           "tmsh+=(\"rm /config/cloud/aws/.adminPassword\")\n",
           "for CMD in \"${tmsh[@]}\"\n",
           "do\n",
           "  if $CMD;then\n",
           "      echo \"command $CMD successfully executed.\"\n",
           "  else\n",
           "      error_exit \"$LINENO: An error has occurred while executing $CMD. Aborting!\"\n",
           "  fi\n",
           "done\n",
           "date\n",
           "flag=true\n",
           "while $flag\n",
           "do\n",
           "response=$(tmsh show cm sync-status)\n",
           "if echo $response | grep 'All devices in the device group are in sync' ; then\n",
           "flag=false\n",
           "tmsh delete auth user srv_user\n",
           "fi\n",
           "done\n"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/cfe_config.json": {
        "content": {
         "Fn::Join": [
          "",
          [
           "{\n",
           "    \"class\":\"Cloud_Failover\",\n",
           "    \"controls\":{\n",
           "      \"class\":\"Controls\",\n",
           "      \"logLevel\":\"silly\"\n",
           "    },\n",
           "    \"environment\":\"aws\",\n",
           "    \"externalStorage\":{\n",
           "      \"scopingTags\":{\n",
           "      \"f5_cloud_failover_label\":\"",
           {
            "Ref": "AWS::StackName"
           },
           "\"\n",
           "      }\n",
           "    },\n",
           "    \"failoverAddresses\":{\n",
           "      \"scopingTags\":{\n",
           "      \"f5_cloud_failover_label\":\"",
           {
            "Ref": "AWS::StackName"
           },
           "\"\n",
           "      }\n",
           "    },\n",
           "    \"failoverRoutes\":{\n",
           "      \"scopingTags\":{\n",
           "      \"f5_cloud_failover_label\":\"",
           {
            "Ref": "AWS::StackName"
           },
           "\"\n",
           "      },\n",
           "      \"scopingAddressRanges\":[\n",
           "           {\n",
           "             \"range\":\"192.0.2.0\\/24\"\n",
           "           }\n",
           "       ],\n",
           "      \"defaultNextHopAddresses\":{\n",
           "        \"discoveryType\":\"static\",\n",
           "        \"items\":[\n",
           "              \"",
           {
            "Fn::GetAtt": [
             "Bigip1subnet1Az1Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "\",\n",
           "              \"",
           {
            "Fn::GetAtt": [
             "Bigip2subnet1Az1Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "\"\n",
           "         ]\n",
           "       }\n",
           "     }\n",
           "}"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/f5-cloud-libs-aws.tar.gz": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "http://cdn.f5.com/product/cloudsolutions/f5-cloud-libs-aws/v2.10.0/f5-cloud-libs-aws.tar.gz"
       },
       "/config/cloud/f5-cloud-libs.tar.gz": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "http://cdn.f5.com/product/cloudsolutions/f5-cloud-libs/v4.25.0/f5-cloud-libs.tar.gz"
       },
       "/config/installCloudLibs.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "#!/bin/bash",
           "echo about to execute",
           "checks=0",
           "while [ $checks -lt 120 ]; do echo checking mcpd",
           "    tmsh -a show sys mcp-state field-fmt | grep -q running",
           "    if [ $? == 0 ]; then",
           "        echo mcpd ready",
           "        break",
           "    fi",
           "    echo mcpd not ready yet",
           "    let checks=checks+1",
           "    sleep 10",
           "done",
           "echo loading verifyHash script",
           "#if ! tmsh load sys config merge file /config/verifyHash; then",
           "#    echo cannot validate signature of /config/verifyHash",
           "#    exit",
           "#fi",
           "#echo loaded verifyHash",
           "#declare -a filesToVerify=(\"/config/cloud/f5-cloud-libs.tar.gz\" \"/config/cloud/f5-cloud-libs-aws.tar.gz\" \"/var/config/rest/downloads/f5-appsvcs-3.26.1-1.noarch.rpm\"  \"/var/config/rest/downloads/f5-cloud-failover-1.8.0-0.noarch.rpm\")",
           "#for fileToVerify in \"${filesToVerify[@]}\"",
           "#do",
           "#    echo verifying \"$fileToVerify\"",
           "#    if ! tmsh run cli script verifyHash \"$fileToVerify\"; then",
           "#        echo \"$fileToVerify\" is not valid",
           "#        exit 1",
           "#    fi",
           "#    echo verified \"$fileToVerify\"",
           "#done",
           "mkdir -p /config/cloud/aws/node_modules/@f5devcentral",
           "echo expanding f5-cloud-libs.tar.gz",
           "tar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
           "echo installing dependencies",
           "tar xvfz /config/cloud/f5-cloud-libs-aws.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
           "echo cloud libs install complete",
           "touch /config/cloud/cloudLibsReady"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/verifyHash": {
        "content": "cli script /Common/verifyHash {\nproc script::run {} {\n        if {[catch {\n            set hashes(f5-cloud-libs.tar.gz) 04cd9b161f619bf0f06f52466f7e1891912737b8b50bda4fe521edd6f7f54818c705d87f745c4f37964c9ab80bcb6f755596917d8b83bffca124e87d7f5efabd\n            set hashes(f5-cloud-libs-aws.tar.gz) 091ea7b18aca7f18a0ec377a6886d5d666cc81349eafa5725ab0758ddcc17c10e03737195384eafd63c117d25913c15a11284d2cc3b221d7ba3c31422172142b\n            set hashes(f5-cloud-libs-azure.tar.gz) e7973a1fe85b5a832c5ecd1cfce66b43b84e42cf2a06b2751734f79812de187ee1ad8730a129cb08198a452157c466bb87180c17dfd2e09b49be6efe9e9a57fe\n            set hashes(f5-cloud-libs-gce.tar.gz) cd95a5cc36c39f80f95476ad000f7dcc21a9fef414c8edac82be2e491c0fa9eba51b145f75ba0f3c0dae48e1c731432217b3bb700f71fe1912152dbe439e8967\n            set hashes(f5-cloud-libs-openstack.tar.gz) 5c83fe6a93a6fceb5a2e8437b5ed8cc9faf4c1621bfc9e6a0779f6c2137b45eab8ae0e7ed745c8cf821b9371245ca29749ca0b7e5663949d77496b8728f4b0f9\n            set hashes(f5-cloud-libs-consul.tar.gz) a32aab397073df92cbbba5067e5823e9b5fafca862a258b60b6b40aa0975c3989d1e110f706177b2ffbe4dde65305a260a5856594ce7ad4ef0c47b694ae4a513\n            set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0\n            set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034\n            set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe\n            set hashes(f5.http.v1.2.0rc7.tmpl) 21f413342e9a7a281a0f0e1301e745aa86af21a697d2e6fdc21dd279734936631e92f34bf1c2d2504c201f56ccd75c5c13baa2fe7653213689ec3c9e27dff77d\n            set hashes(f5.aws_advanced_ha.v1.3.0rc1.tmpl) 9e55149c010c1d395abdae3c3d2cb83ec13d31ed39424695e88680cf3ed5a013d626b326711d3d40ef2df46b72d414b4cb8e4f445ea0738dcbd25c4c843ac39d\n            set hashes(f5.aws_advanced_ha.v1.4.0rc1.tmpl) de068455257412a949f1eadccaee8506347e04fd69bfb645001b76f200127668e4a06be2bbb94e10fefc215cfc3665b07945e6d733cbe1a4fa1b88e881590396\n            set hashes(f5.aws_advanced_ha.v1.4.0rc2.tmpl) 6ab0bffc426df7d31913f9a474b1a07860435e366b07d77b32064acfb2952c1f207beaed77013a15e44d80d74f3253e7cf9fbbe12a90ec7128de6facd097d68f\n            set hashes(f5.aws_advanced_ha.v1.4.0rc3.tmpl) 2f2339b4bc3a23c9cfd42aae2a6de39ba0658366f25985de2ea53410a745f0f18eedc491b20f4a8dba8db48970096e2efdca7b8efffa1a83a78e5aadf218b134\n            set hashes(f5.aws_advanced_ha.v1.4.0rc4.tmpl) 2418ac8b1f1884c5c096cbac6a94d4059aaaf05927a6a4508fd1f25b8cc6077498839fbdda8176d2cf2d274a27e6a1dae2a1e3a0a9991bc65fc74fc0d02ce963\n            set hashes(f5.aws_advanced_ha.v1.4.0rc5.tmpl) 5e582187ae1a6323e095d41eddd41151d6bd38eb83c634410d4527a3d0e246a8fc62685ab0849de2ade62b0275f51264d2deaccbc16b773417f847a4a1ea9bc4\n            set hashes(asm-policy.tar.gz) 2d39ec60d006d05d8a1567a1d8aae722419e8b062ad77d6d9a31652971e5e67bc4043d81671ba2a8b12dd229ea46d205144f75374ed4cae58cefa8f9ab6533e6\n            set hashes(deploy_waf.sh) 1a3a3c6274ab08a7dc2cb73aedc8d2b2a23cd9e0eb06a2e1534b3632f250f1d897056f219d5b35d3eed1207026e89989f754840fd92969c515ae4d829214fb74\n            set hashes(f5.policy_creator.tmpl) 06539e08d115efafe55aa507ecb4e443e83bdb1f5825a9514954ef6ca56d240ed00c7b5d67bd8f67b815ee9dd46451984701d058c89dae2434c89715d375a620\n            set hashes(f5.service_discovery.tmpl) 4811a95372d1dbdbb4f62f8bcc48d4bc919fa492cda012c81e3a2fe63d7966cc36ba8677ed049a814a930473234f300d3f8bced2b0db63176d52ac99640ce81b\n            set hashes(f5.cloud_logger.v1.0.0.tmpl) 64a0ed3b5e32a037ba4e71d460385fe8b5e1aecc27dc0e8514b511863952e419a89f4a2a43326abb543bba9bc34376afa114ceda950d2c3bd08dab735ff5ad20\n            set hashes(f5-appsvcs-3.5.1-5.noarch.rpm) ba71c6e1c52d0c7077cdb25a58709b8fb7c37b34418a8338bbf67668339676d208c1a4fef4e5470c152aac84020b4ccb8074ce387de24be339711256c0fa78c8\n            set hashes(f5-appsvcs-3.18.0-4.noarch.rpm) e72ee8005a27070ac399ab097e8aa507a72aae4721d7491589cfeb821db3ef86cbc979e796ab319ec727bb51400ccda813c4b9eb4a6b3d1220a396b582f8f400\n            set hashes(f5-appsvcs-3.20.0-3.noarch.rpm) d4bba8892a2068bb53f88c6090dc65f17707abca35a7ed2fff39980057fe7f7a2ebf710ab2284a1d83d70b7746beabad9df603017c0fd8728f7457661c95ac8d\n            set hashes(f5-appsvcs-3.25.0-3.noarch.rpm) 26f19bdaaa81cbe0421b3e08c09987f9dd0c54b05a626d6a21a836b34248d2d9d83095f0daad8e7a4a068e9ef99b89fbcd246ae8b617ac2b2456599157d0e8b3\n            set hashes(f5-appsvcs-3.26.1-1.noarch.rpm) b460e11679d38a96549b5041def27b419f1a41c8f788f9f8c7a034aa5cb5a8c9fd151c7c439bebd093fcd85cd8657f1c064551d9337566f9fc7e9506c55dc02c\n            set hashes(f5-cloud-failover-1.1.0-0.noarch.rpm) 15a440c299f9e4af86a3d0f5b0d75b0054385b95e47c3ef116d2e0bfb0041a26dcbf549028e2a26d2c718ec61446bd657be38fbbcd9db781efe5414c174ac68c\n            set hashes(f5-cloud-failover-1.3.0-0.noarch.rpm) 19681eb33d9f910c913f8180199485eb653b4b5ebeaae0b90a6ce8341d7a22fed8d21815b5ba148c468852d20cc26fad4c4242e50ecc184f1f8770dacced6f6a\n            set hashes(f5-cloud-failover-1.4.0-0.noarch.rpm) 49e9108a070e0c8713aeb7b330662358542e61b7c53a9d45108d37a9bf5246f9e4aaae10cc61064801dcccd20bfd5108347b0f694510e7ece07f96c45ba683b0\n            set hashes(f5-cloud-failover-1.5.0-0.noarch.rpm) 33a7e2d047106bcce681757a65240bfacedd48e13567e05fdb23a4b269d266aa5001f81158c3964dc297f0428db31c9df428002898d190285b349c59422a573b\n            set hashes(f5-cloud-failover-1.6.1-1.noarch.rpm) c1b842da21b8d1ba21b6eb63c8598a9ea9986d5daddc21e4d280e1d6b09d3db1de8ac7de5c84edf07b43e4af03daf8fe747a4048f6573d955206352cde2cec65\n            set hashes(f5-cloud-failover-1.7.1-1.noarch.rpm) 14ff0cd2bb49780cc0ae3021c4fc8fcc096e3fce2258096a4aa026d6d37de728ca7345bfe3a79031e336e74d25a2b40ff28324c2c752bf0ee71b7fc89b6fc8fe\n            set hashes(f5-cloud-failover-1.8.0-0.noarch.rpm) 23086d1cbf3cb24eac7eba2305156c600fa21f1b896321a2fa5225d331d7e41471edb3f5368144d86848a4520b1e005c014485ff451e7da6429053f58bfe8ce4\n\n            set file_path [lindex $tmsh::argv 1]\n            set file_name [file tail $file_path]\n\n            if {![info exists hashes($file_name)]} {\n                tmsh::log err \"No hash found for $file_name\"\n                exit 1\n            }\n\n            set expected_hash $hashes($file_name)\n            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]\n            if { $expected_hash eq $computed_hash } {\n                exit 0\n            }\n            tmsh::log err \"Hash does not match for $file_path\"\n            exit 1\n        }]} {\n            tmsh::log err {Unexpected error in verifyHash}\n            exit 1\n        }\n    }\n    script-signature YZI5vbfbZnV3u5PpMWKe1pVWhxjlpbl5lZ8ebUSaQiqGBErB87g55GApChfe4KGB49FMIXTZ9DCGNg3A9OV3VZNMwpNKLs57EvqFzPLwBXO7cMOS2mIIVByG4wUO3bOt72oQY9TuRQDPPVNoDe6Ptv1LH+9GCUWSsTpCEuUvl/N7j/HHRmlWT2DEorv8ZcINWfrIx7Oa5PGADR6sKJooAInwp6JFO+AQFTtCNzVJyEicck2N8yrVSTUqsMVN2Ycamw+xdKWUT2IDyeCodGBh/38jxfCO2ZzmHwVpeIj57VPpiGMiW0vdHQzQyw/Oz+amGdeABJ1/8oNw4XtZF4HdvA==\n    signing-key /Common/f5-irule\n}",
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/waitThenRun.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "#!/bin/bash",
           "while true; do echo \"waiting for cloud libs install to complete\"",
           "    if [ -f /config/cloud/cloudLibsReady ]; then",
           "        break",
           "    else",
           "        sleep 10",
           "    fi",
           "done",
           "\"$@\""
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/var/config/rest/downloads/f5-appsvcs-3.26.1-1.noarch.rpm": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "http://cdn.f5.com/product/cloudsolutions/f5-appsvcs-extension/v3.26.1/f5-appsvcs-3.26.1-1.noarch.rpm"
       },
       "/var/config/rest/downloads/f5-cloud-failover-1.8.0-0.noarch.rpm": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "https://github.com/F5Networks/f5-cloud-failover-extension/releases/download/v1.8.0/f5-cloud-failover-1.8.0-0.noarch.rpm"
       }
      }
     }
    }
   },
   "Properties": {
    "BlockDeviceMappings": [
     {
      "DeviceName": "/dev/xvda",
      "Ebs": {
       "DeleteOnTermination": true,
       "VolumeSize": 100,
       "VolumeType": "gp2"
      }
     },
     {
      "DeviceName": "/dev/xvdb",
      "NoDevice": {}
     }
    ],
    "IamInstanceProfile": {
     "Ref": "bigipServiceDiscoveryProfile"
    },
    "ImageId": {
     "Fn::If": [
      "noCustomImageId",
      {
       "Fn::FindInMap": [
        "BigipRegionMap",
        {
         "Ref": "AWS::Region"
        },
        {
         "Ref": "imageName"
        }
       ]
      },
      {
       "Ref": "customImageId"
      }
     ]
    },
    "InstanceType": {
     "Ref": "instanceType"
    },
    "KeyName": {
     "Ref": "sshKey"
    },
    "NetworkInterfaces": [
     {
      "Description": "Management Interface",
      "DeviceIndex": "0",
      "NetworkInterfaceId": {
       "Ref": "Bigip1ManagementInterface"
      }
     },
     {
      "Description": "Public or External Interface",
      "DeviceIndex": "1",
      "NetworkInterfaceId": {
       "Ref": "Bigip1subnet1Az1Interface"
      }
     }
    ],
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "application"
      }
     },
     {
      "Key": "Costcenter",
      "Value": {
       "Ref": "costcenter"
      }
     },
     {
      "Key": "Environment",
      "Value": {
       "Ref": "environment"
      }
     },
     {
      "Key": "Group",
      "Value": {
       "Ref": "group"
      }
     },
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "Big-IP1: ",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     },
     {
      "Key": "Owner",
      "Value": {
       "Ref": "owner"
      }
     }
    ],
    "UserData": {
     "Fn::Base64": {
      "Fn::Join": [
       "",
       [
        "#!/bin/bash\n",
        "/opt/aws/apitools/cfn-init/bin/cfn-init -v -s ",
        {
         "Ref": "AWS::StackId"
        },
        " -r ",
        "Bigip1Instance",
        " --region ",
        {
         "Ref": "AWS::Region"
        },
        "\n"
       ]
      ]
     }
    }
   },
   "Type": "AWS::EC2::Instance"
  },
  "Bigip1ManagementEipAddress": {
   "Condition": "usePublicIP",
   "Properties": {
    "Domain": "vpc"
   },
   "Type": "AWS::EC2::EIP"
  },
  "Bigip1ManagementEipAssociation": {
   "Condition": "usePublicIP",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "Bigip1ManagementEipAddress",
      "AllocationId"
     ]
    },
    "NetworkInterfaceId": {
     "Ref": "Bigip1ManagementInterface"
    }
   },
   "Type": "AWS::EC2::EIPAssociation"
  },
  "Bigip1ManagementInterface": {
   "Properties": {
    "Description": "Management Interface for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipManagementSecurityGroup"
     }
    ],
    "SubnetId": {
     "Ref": "managementSubnetAz1"
    }
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip1VipEipAddress": {
   "Condition": "usePublicIP",
   "Properties": {
    "Domain": "vpc"
   },
   "Type": "AWS::EC2::EIP"
  },
  "Bigip1VipEipAssociation": {
   "Condition": "usePublicIP",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "Bigip1VipEipAddress",
      "AllocationId"
     ]
    },
    "NetworkInterfaceId": {
     "Ref": "Bigip1subnet1Az1Interface"
    },
    "PrivateIpAddress": {
     "Fn::Select": [
      "0",
      {
       "Fn::GetAtt": [
        "Bigip1subnet1Az1Interface",
        "SecondaryPrivateIpAddresses"
       ]
      }
     ]
    }
   },
   "Type": "AWS::EC2::EIPAssociation"
  },
  "Bigip1subnet1Az1Interface": {
   "Properties": {
    "Description": "Public External Interface for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipExternalSecurityGroup"
     }
    ],
    "SecondaryPrivateIpAddressCount": 1,
    "SubnetId": {
     "Ref": "subnet1Az1"
    },
    "Tags": [
     {
      "Key": "f5_cloud_failover_label",
      "Value": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "Key": "f5_cloud_failover_nic_map",
      "Value": "external"
     }
    ]
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip1subnet1Az1SelfEipAddress": {
   "Condition": "usePublicIP",
   "Properties": {
    "Domain": "vpc"
   },
   "Type": "AWS::EC2::EIP"
  },
  "Bigip1subnet1Az1SelfEipAssociation": {
   "Condition": "usePublicIP",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "Bigip1subnet1Az1SelfEipAddress",
      "AllocationId"
     ]
    },
    "NetworkInterfaceId": {
     "Ref": "Bigip1subnet1Az1Interface"
    },
    "PrivateIpAddress": {
     "Fn::GetAtt": [
      "Bigip1subnet1Az1Interface",
      "PrimaryPrivateIpAddress"
     ]
    }
   },
   "Type": "AWS::EC2::EIPAssociation"
  },
  "Bigip2Instance": {
   "DependsOn": "Bigip1Instance",
   "Metadata": {
    "AWS::CloudFormation::Init": {
     "config": {
      "commands": {
       "000-disable-1nicautoconfig": {
        "command": "/usr/bin/setdb provision.1nicautoconfig disable"
       },
       "001-rest-provision-extramb": {
        "command": "/usr/bin/setdb provision.extramb 1000"
       },
       "002-rest-use-extramb": {
        "command": "/usr/bin/setdb restjavad.useextramb true"
       },
       "003-rest-post": {
        "command": "/usr/bin/curl -s -f -u admin: -H \"Content-Type: application/json\" -d '{\"maxMessageBodySize\":134217728}' -X POST http://localhost:8100/mgmt/shared/server/messaging/settings/8100 | jq ."
       },
       "010-install-libs": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "mkdir -p /var/log/cloud/aws;",
           "nohup /config/installCloudLibs.sh",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "020-generate-password": {
        "command": {
         "Fn::Join": [
          "",
          [
           "nohup /config/waitThenRun.sh",
           " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           " --signal PASSWORD_CREATED",
           " --file f5-rest-node",
           " --cl-args '/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/generatePassword --file /config/cloud/aws/.adminPassword --encrypt'",
           " --log-level silly",
           " -o /var/log/cloud/aws/generatePassword.log",
           " &>> /var/log/cloud/aws/install.log < /dev/null",
           " &"
          ]
         ]
        }
       },
       "030-create-admin-user": {
        "command": {
         "Fn::Join": [
          "",
          [
           "nohup /config/waitThenRun.sh",
           " f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           " --wait-for PASSWORD_CREATED",
           " --signal ADMIN_CREATED",
           " --file /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/createUser.sh",
           " --cl-args '--user srv_user",
           " --password-file /config/cloud/aws/.adminPassword",
           " --password-encrypted",
           "'",
           " --log-level silly",
           " -o /var/log/cloud/aws/createUser.log",
           " &>> /var/log/cloud/aws/install.log < /dev/null",
           " &"
          ]
         ]
        }
       },
       "040-network-config": {
        "command": {
         "Fn::Join": [
          "",
          [
           "GATEWAY_MAC=`ifconfig eth1 | egrep ether | awk '{print tolower($2)}'`; ",
           "GATEWAY_CIDR_BLOCK=`/usr/bin/curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC}/subnet-ipv4-cidr-block`; ",
           "GATEWAY_NET=${GATEWAY_CIDR_BLOCK%/*}; ",
           "GATEWAY_PREFIX=${GATEWAY_CIDR_BLOCK#*/}; ",
           "GATEWAY=`echo ${GATEWAY_NET} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`; ",
           "nohup /config/waitThenRun.sh ",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/network.js ",
           "--host localhost ",
           "-o /var/log/cloud/aws/network.log ",
           "--log-level silly ",
           "--wait-for ADMIN_CREATED ",
           "--signal NETWORK_CONFIG_DONE ",
           "--vlan name:external,nic:1.1 ",
           "--default-gw ${GATEWAY} ",
           "--self-ip 'name:external-self,address:",
           {
            "Fn::GetAtt": [
             "Bigip2subnet1Az1Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "/'${GATEWAY_PREFIX}',vlan:external,allow:tcp:4353 udp:1026' ",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "050-onboard-BIG-IP": {
        "command": {
         "Fn::If": [
          "optin",
          {
           "Fn::Join": [
            " ",
            [
             "REGION=\"",
             {
              "Ref": "AWS::Region"
             },
             "\";",
             "DEPLOYMENTID=`echo \"",
             {
              "Ref": "AWS::StackId"
             },
             "\"|sha512sum|cut -d \" \" -f 1`;",
             "CUSTOMERID=`echo \"",
             {
              "Ref": "AWS::AccountId"
             },
             "\"|sha512sum|cut -d \" \" -f 1`;",
             "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth1`;",
             "nohup /config/waitThenRun.sh",
             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
             "--install-ilx-package file:///var/config/rest/downloads/f5-appsvcs-3.26.1-1.noarch.rpm --install-ilx-package file:///var/config/rest/downloads/f5-cloud-failover-1.8.0-0.noarch.rpm",
             "--wait-for NETWORK_CONFIG_DONE",
             "--signal ONBOARD_DONE",
             "-o /var/log/cloud/aws/onboard.log",
             "--log-level silly",
             "--no-reboot",
             "--host localhost",
             "--hostname `/usr/bin/curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/hostname`",
             "--ntp ",
             {
              "Ref": "ntpServer"
             },
             "--tz ",
             {
              "Ref": "timezone"
             },
             "--dns ${NAME_SERVER}",
             "--modules ",
             {
              "Ref": "bigIpModules"
             },
             "--metrics \"cloudName:aws,region:${REGION},bigIpVersion:16.0.1.1-0.0.6,customerId:${CUSTOMERID},deploymentId:${DEPLOYMENTID},templateName:f5-existing-stack-same-az-cluster-payg-2nic-bigip.template,templateVersion:5.12.0,licenseType:hourly\"",
             "-d tm.tcpudptxchecksum:software-only ",
             "--ping",
             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          },
          {
           "Fn::Join": [
            " ",
            [
             "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth1`;",
             "nohup /config/waitThenRun.sh",
             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
             "--install-ilx-package file:///var/config/rest/downloads/f5-appsvcs-3.26.1-1.noarch.rpm --install-ilx-package file:///var/config/rest/downloads/f5-cloud-failover-1.8.0-0.noarch.rpm",
             "--wait-for NETWORK_CONFIG_DONE",
             "--signal ONBOARD_DONE",
             "-o /var/log/cloud/aws/onboard.log",
             "--log-level silly",
             "--no-reboot",
             "--host localhost",
             "--hostname `/usr/bin/curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/hostname`",
             "--ntp ",
             {
              "Ref": "ntpServer"
             },
             "--tz ",
             {
              "Ref": "timezone"
             },
             "--dns ${NAME_SERVER}",
             "--modules ",
             {
              "Ref": "bigIpModules"
             },
             "-d tm.tcpudptxchecksum:software-only ",
             "--ping",
             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          }
         ]
        }
       },
       "055-custom-config": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           "--file /config/cloud/aws/custom-config.sh",
           "--cwd /config/cloud/aws",
           "-o /var/log/cloud/aws/custom-config.log",
           "--log-level silly",
           "--wait-for ONBOARD_DONE",
           "--signal CUSTOM_CONFIG_DONE",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "060-cluster": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/cluster.js",
           "--wait-for CUSTOM_CONFIG_DONE",
           "--signal CLUSTER_DONE",
           "-o /var/log/cloud/aws/cluster.log",
           "--log-level silly",
           "--host localhost",
           "--delete-remote-primary-creds",
           "--user srv_user",
           "--delete-local-creds",
           "--password-url file:///config/cloud/aws/.adminPassword",
           "--password-encrypted",
           "--cloud aws",
           "--provider-options 's3Bucket:",
           {
            "Ref": "S3Bucket"
           },
           "'",
           "--config-sync-ip",
           {
            "Fn::GetAtt": [
             "Bigip2subnet1Az1Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "--join-group",
           "--device-group same_az_failover_group",
           "--remote-host ",
           {
            "Fn::GetAtt": [
             "Bigip1ManagementInterface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "065-cfe": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           "--file /config/cloud/aws/cfe-config.sh",
           "--cwd /config/cloud/aws",
           "-o /var/log/cloud/aws/cfe-config.log",
           "--log-level silly",
           "--wait-for CLUSTER_DONE",
           "--signal CFE_CONFIG_DONE",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "070-rm-password": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           "--file /config/cloud/aws/rm-srv-user.sh",
           "-o /var/log/cloud/aws/rm-srv-user.log",
           "--log-level silly",
           "--wait-for CFE_CONFIG_DONE",
           "--signal SRV_USER_REMOVED",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       }
      },
      "files": {
       "/config/cloud/aws/cfe-config.sh": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "source /config/cloud/aws/onboard_config_vars\n",
           "cfe_file_loc=\"/config/cloud/cfe_config.json\"\n",
           "cfe_response_code=$(/usr/bin/curl -skvvu ${adminUsername}:$passwd -w \"%{http_code}\" -X POST -H \"Content-Type: application/json\" https://localhost:${managementGuiPort}/mgmt/shared/cloud-failover/declare -d @$cfe_file_loc -o /dev/null)\n",
           "if [[ $cfe_response_code == 200 || $cfe_response_code == 502 ]]; then\n",
           "    echo \"Deployment of CFE application succeeded.\"\n",
           "    cfe_deployed=\"yes\"\n",
           "else\n",
           "    echo \"Failed to deploy CFE application; continuing...\"\n",
           "fi\n",
           "#Disable built-in script\nmount -o remount,rw /usr\n",
           "mv /usr/libexec/aws/aws-failover-tgactive.sh /usr/libexec/aws/aws-failover-tgactive.sh.disabled\n",
           "mv /usr/libexec/aws/aws-failover-tgrefresh.sh /usr/libexec/aws/aws-failover-tgrefresh.sh.disabled\n",
           "mount -o remount,ro /usr\n"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/custom-config.sh": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "EXTIP='",
           {
            "Fn::GetAtt": [
             "Bigip2subnet1Az1Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "'\n",
           "EXTPRIVIP='",
           {
            "Fn::Select": [
             "0",
             {
              "Fn::GetAtt": [
               "Bigip2subnet1Az1Interface",
               "SecondaryPrivateIpAddresses"
              ]
             }
            ]
           },
           "'\n",
           "HOSTNAME=`/usr/bin/curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/hostname`\n",
           "PROGNAME=$(basename $0)\n",
           "function error_exit {\n",
           "echo \"${PROGNAME}: ${1:-\\\"Unknown Error\\\"}\" 1>&2\n",
           "exit 1\n",
           "}\n",
           "declare -a tmsh=()\n",
           "echo 'starting custom-config.sh'\n",
           "source /config/cloud/aws/onboard_config_vars\n",
           "if [[ $allowPhoneHome == \"No\" ]]; then\n",
           "    tmsh+=(\n",
           "    \"tmsh modify sys software update auto-phonehome disabled\")\n",
           "fi\n",
           "tmsh+=(\n",
           "\"tmsh modify sys db dhclient.mgmt { value disable }\"\n",
           "\"tmsh modify cm device ${HOSTNAME} unicast-address { { effective-ip ${EXTIP} effective-port 1026 ip ${EXTIP} } }\"\n",
           "\"tmsh create ltm virtual-address ",
           {
            "Fn::Select": [
             "0",
             {
              "Fn::GetAtt": [
               "Bigip2subnet1Az1Interface",
               "SecondaryPrivateIpAddresses"
              ]
             }
            ]
           },
           " address ",
           {
            "Fn::Select": [
             "0",
             {
              "Fn::GetAtt": [
               "Bigip2subnet1Az1Interface",
               "SecondaryPrivateIpAddresses"
              ]
             }
            ]
           },
           "\"\n",
           "\"tmsh save /sys config\")\n",
           "for CMD in \"${tmsh[@]}\"\n",
           "do\n",
           "  \"/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/waitForMcp.sh\"\n",
           "    if $CMD;then\n",
           "        echo \"command $CMD successfully executed.\"\n",
           "    else\n",
           "        error_exit \"$LINENO: An error has occurred while executing $CMD. Aborting!\"\n",
           "    fi\n",
           "done\n",
           "date\n",
           "### END CUSTOM CONFIGURATION"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/getNameServer.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "INTERFACE=$1",
           "INTERFACE_MAC=`ifconfig ${INTERFACE} | egrep ether | awk '{print tolower($2)}'`",
           "VPC_CIDR_BLOCK=`/usr/bin/curl -s -f --retry 20 http://169.254.169.254/latest/meta-data/network/interfaces/macs/${INTERFACE_MAC}/vpc-ipv4-cidr-block`",
           "VPC_NET=${VPC_CIDR_BLOCK%/*}",
           "NAME_SERVER=`echo ${VPC_NET} | awk -F. '{ printf \"%d.%d.%d.%d\", $1, $2, $3, $4+2 }'`",
           "echo $NAME_SERVER"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/onboard_config_vars": {
        "content": {
         "Fn::Join": [
          "",
          [
           "",
           "#!/bin/bash\n",
           "# Generated from 5.12.0\n",
           "hostname=`/usr/bin/curl http://169.254.169.254/latest/meta-data/hostname`\n",
           "region='",
           {
            "Ref": "AWS::Region"
           },
           "'\n",
           "adminUsername='srv_user'\n",
           "managementGuiPort='443'\n",
           "timezone='",
           {
            "Ref": "timezone"
           },
           "'\n",
           "ntpServer='",
           {
            "Ref": "ntpServer"
           },
           "'\n",
           "declarationUrl='",
           {
            "Ref": "declarationUrl"
           },
           "'\n",
           "allowPhoneHome='",
           {
            "Ref": "allowPhoneHome"
           },
           "'\n",
           "passwd=$(f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/decryptDataFromFile.js --data-file /config/cloud/aws/.adminPassword)\n"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/rm-srv-user.sh": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "PROGNAME=$(basename $0)\n",
           "function error_exit {\n",
           "echo \"${PROGNAME}: ${1:-\"Unknown Error\"}\" 1>&2\n",
           "exit 1\n",
           "}\n",
           "date\n",
           "echo 'starting rm-srv-user.sh'\n",
           "declare -a tmsh=()\n",
           "tmsh+=(\"rm /config/cloud/aws/.adminPassword\")\n",
           "for CMD in \"${tmsh[@]}\"\n",
           "do\n",
           "  if $CMD;then\n",
           "      echo \"command $CMD successfully executed.\"\n",
           "  else\n",
           "      error_exit \"$LINENO: An error has occurred while executing $CMD. Aborting!\"\n",
           "  fi\n",
           "done\n",
           "date\n",
           "flag=true\n",
           "while $flag\n",
           "do\n",
           "response=$(tmsh show cm sync-status)\n",
           "if echo $response | grep 'All devices in the device group are in sync' ; then\n",
           "flag=false\n",
           "tmsh delete auth user srv_user\n",
           "fi\n",
           "done\n"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/cfe_config.json": {
        "content": {
         "Fn::Join": [
          "",
          [
           "{\n",
           "    \"class\":\"Cloud_Failover\",\n",
           "    \"controls\":{\n",
           "      \"class\":\"Controls\",\n",
           "      \"logLevel\":\"silly\"\n",
           "    },\n",
           "    \"environment\":\"aws\",\n",
           "    \"externalStorage\":{\n",
           "      \"scopingTags\":{\n",
           "      \"f5_cloud_failover_label\":\"",
           {
            "Ref": "AWS::StackName"
           },
           "\"\n",
           "      }\n",
           "    },\n",
           "    \"failoverAddresses\":{\n",
           "      \"scopingTags\":{\n",
           "      \"f5_cloud_failover_label\":\"",
           {
            "Ref": "AWS::StackName"
           },
           "\"\n",
           "      }\n",
           "    },\n",
           "    \"failoverRoutes\":{\n",
           "      \"scopingTags\":{\n",
           "      \"f5_cloud_failover_label\":\"",
           {
            "Ref": "AWS::StackName"
           },
           "\"\n",
           "      },\n",
           "      \"scopingAddressRanges\":[\n",
           "           {\n",
           "             \"range\":\"192.0.2.0\\/24\"\n",
           "           }\n",
           "       ],\n",
           "      \"defaultNextHopAddresses\":{\n",
           "        \"discoveryType\":\"static\",\n",
           "        \"items\":[\n",
           "              \"",
           {
            "Fn::GetAtt": [
             "Bigip1subnet1Az1Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "\",\n",
           "              \"",
           {
            "Fn::GetAtt": [
             "Bigip2subnet1Az1Interface",
             "PrimaryPrivateIpAddress"
            ]
           },
           "\"\n",
           "         ]\n",
           "       }\n",
           "     }\n",
           "}"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/f5-cloud-libs-aws.tar.gz": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "http://cdn.f5.com/product/cloudsolutions/f5-cloud-libs-aws/v2.10.0/f5-cloud-libs-aws.tar.gz"
       },
       "/config/cloud/f5-cloud-libs.tar.gz": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "http://cdn.f5.com/product/cloudsolutions/f5-cloud-libs/v4.25.0/f5-cloud-libs.tar.gz"
       },
       "/config/installCloudLibs.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "#!/bin/bash",
           "echo about to execute",
           "checks=0",
           "while [ $checks -lt 120 ]; do echo checking mcpd",
           "    tmsh -a show sys mcp-state field-fmt | grep -q running",
           "    if [ $? == 0 ]; then",
           "        echo mcpd ready",
           "        break",
           "    fi",
           "    echo mcpd not ready yet",
           "    let checks=checks+1",
           "    sleep 10",
           "done",
           "echo loading verifyHash script",
           "#if ! tmsh load sys config merge file /config/verifyHash; then",
           "#    echo cannot validate signature of /config/verifyHash",
           "#    exit",
           "#fi",
           "#echo loaded verifyHash",
           "#declare -a filesToVerify=(\"/config/cloud/f5-cloud-libs.tar.gz\" \"/config/cloud/f5-cloud-libs-aws.tar.gz\" \"/var/config/rest/downloads/f5-appsvcs-3.26.1-1.noarch.rpm\"  \"/var/config/rest/downloads/f5-cloud-failover-1.8.0-0.noarch.rpm\")",
           "#for fileToVerify in \"${filesToVerify[@]}\"",
           "#do",
           "#    echo verifying \"$fileToVerify\"",
           "#    if ! tmsh run cli script verifyHash \"$fileToVerify\"; then",
           "#        echo \"$fileToVerify\" is not valid",
           "#        exit 1",
           "#    fi",
           "#    echo verified \"$fileToVerify\"",
           "#done",
           "mkdir -p /config/cloud/aws/node_modules/@f5devcentral",
           "echo expanding f5-cloud-libs.tar.gz",
           "tar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
           "echo installing dependencies",
           "tar xvfz /config/cloud/f5-cloud-libs-aws.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
           "echo cloud libs install complete",
           "touch /config/cloud/cloudLibsReady"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/verifyHash": {
        "content": "cli script /Common/verifyHash {\nproc script::run {} {\n        if {[catch {\n            set hashes(f5-cloud-libs.tar.gz) 04cd9b161f619bf0f06f52466f7e1891912737b8b50bda4fe521edd6f7f54818c705d87f745c4f37964c9ab80bcb6f755596917d8b83bffca124e87d7f5efabd\n            set hashes(f5-cloud-libs-aws.tar.gz) 091ea7b18aca7f18a0ec377a6886d5d666cc81349eafa5725ab0758ddcc17c10e03737195384eafd63c117d25913c15a11284d2cc3b221d7ba3c31422172142b\n            set hashes(f5-cloud-libs-azure.tar.gz) e7973a1fe85b5a832c5ecd1cfce66b43b84e42cf2a06b2751734f79812de187ee1ad8730a129cb08198a452157c466bb87180c17dfd2e09b49be6efe9e9a57fe\n            set hashes(f5-cloud-libs-gce.tar.gz) cd95a5cc36c39f80f95476ad000f7dcc21a9fef414c8edac82be2e491c0fa9eba51b145f75ba0f3c0dae48e1c731432217b3bb700f71fe1912152dbe439e8967\n            set hashes(f5-cloud-libs-openstack.tar.gz) 5c83fe6a93a6fceb5a2e8437b5ed8cc9faf4c1621bfc9e6a0779f6c2137b45eab8ae0e7ed745c8cf821b9371245ca29749ca0b7e5663949d77496b8728f4b0f9\n            set hashes(f5-cloud-libs-consul.tar.gz) a32aab397073df92cbbba5067e5823e9b5fafca862a258b60b6b40aa0975c3989d1e110f706177b2ffbe4dde65305a260a5856594ce7ad4ef0c47b694ae4a513\n            set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0\n            set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034\n            set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe\n            set hashes(f5.http.v1.2.0rc7.tmpl) 21f413342e9a7a281a0f0e1301e745aa86af21a697d2e6fdc21dd279734936631e92f34bf1c2d2504c201f56ccd75c5c13baa2fe7653213689ec3c9e27dff77d\n            set hashes(f5.aws_advanced_ha.v1.3.0rc1.tmpl) 9e55149c010c1d395abdae3c3d2cb83ec13d31ed39424695e88680cf3ed5a013d626b326711d3d40ef2df46b72d414b4cb8e4f445ea0738dcbd25c4c843ac39d\n            set hashes(f5.aws_advanced_ha.v1.4.0rc1.tmpl) de068455257412a949f1eadccaee8506347e04fd69bfb645001b76f200127668e4a06be2bbb94e10fefc215cfc3665b07945e6d733cbe1a4fa1b88e881590396\n            set hashes(f5.aws_advanced_ha.v1.4.0rc2.tmpl) 6ab0bffc426df7d31913f9a474b1a07860435e366b07d77b32064acfb2952c1f207beaed77013a15e44d80d74f3253e7cf9fbbe12a90ec7128de6facd097d68f\n            set hashes(f5.aws_advanced_ha.v1.4.0rc3.tmpl) 2f2339b4bc3a23c9cfd42aae2a6de39ba0658366f25985de2ea53410a745f0f18eedc491b20f4a8dba8db48970096e2efdca7b8efffa1a83a78e5aadf218b134\n            set hashes(f5.aws_advanced_ha.v1.4.0rc4.tmpl) 2418ac8b1f1884c5c096cbac6a94d4059aaaf05927a6a4508fd1f25b8cc6077498839fbdda8176d2cf2d274a27e6a1dae2a1e3a0a9991bc65fc74fc0d02ce963\n            set hashes(f5.aws_advanced_ha.v1.4.0rc5.tmpl) 5e582187ae1a6323e095d41eddd41151d6bd38eb83c634410d4527a3d0e246a8fc62685ab0849de2ade62b0275f51264d2deaccbc16b773417f847a4a1ea9bc4\n            set hashes(asm-policy.tar.gz) 2d39ec60d006d05d8a1567a1d8aae722419e8b062ad77d6d9a31652971e5e67bc4043d81671ba2a8b12dd229ea46d205144f75374ed4cae58cefa8f9ab6533e6\n            set hashes(deploy_waf.sh) 1a3a3c6274ab08a7dc2cb73aedc8d2b2a23cd9e0eb06a2e1534b3632f250f1d897056f219d5b35d3eed1207026e89989f754840fd92969c515ae4d829214fb74\n            set hashes(f5.policy_creator.tmpl) 06539e08d115efafe55aa507ecb4e443e83bdb1f5825a9514954ef6ca56d240ed00c7b5d67bd8f67b815ee9dd46451984701d058c89dae2434c89715d375a620\n            set hashes(f5.service_discovery.tmpl) 4811a95372d1dbdbb4f62f8bcc48d4bc919fa492cda012c81e3a2fe63d7966cc36ba8677ed049a814a930473234f300d3f8bced2b0db63176d52ac99640ce81b\n            set hashes(f5.cloud_logger.v1.0.0.tmpl) 64a0ed3b5e32a037ba4e71d460385fe8b5e1aecc27dc0e8514b511863952e419a89f4a2a43326abb543bba9bc34376afa114ceda950d2c3bd08dab735ff5ad20\n            set hashes(f5-appsvcs-3.5.1-5.noarch.rpm) ba71c6e1c52d0c7077cdb25a58709b8fb7c37b34418a8338bbf67668339676d208c1a4fef4e5470c152aac84020b4ccb8074ce387de24be339711256c0fa78c8\n            set hashes(f5-appsvcs-3.18.0-4.noarch.rpm) e72ee8005a27070ac399ab097e8aa507a72aae4721d7491589cfeb821db3ef86cbc979e796ab319ec727bb51400ccda813c4b9eb4a6b3d1220a396b582f8f400\n            set hashes(f5-appsvcs-3.20.0-3.noarch.rpm) d4bba8892a2068bb53f88c6090dc65f17707abca35a7ed2fff39980057fe7f7a2ebf710ab2284a1d83d70b7746beabad9df603017c0fd8728f7457661c95ac8d\n            set hashes(f5-appsvcs-3.25.0-3.noarch.rpm) 26f19bdaaa81cbe0421b3e08c09987f9dd0c54b05a626d6a21a836b34248d2d9d83095f0daad8e7a4a068e9ef99b89fbcd246ae8b617ac2b2456599157d0e8b3\n            set hashes(f5-appsvcs-3.26.1-1.noarch.rpm) b460e11679d38a96549b5041def27b419f1a41c8f788f9f8c7a034aa5cb5a8c9fd151c7c439bebd093fcd85cd8657f1c064551d9337566f9fc7e9506c55dc02c\n            set hashes(f5-cloud-failover-1.1.0-0.noarch.rpm) 15a440c299f9e4af86a3d0f5b0d75b0054385b95e47c3ef116d2e0bfb0041a26dcbf549028e2a26d2c718ec61446bd657be38fbbcd9db781efe5414c174ac68c\n            set hashes(f5-cloud-failover-1.3.0-0.noarch.rpm) 19681eb33d9f910c913f8180199485eb653b4b5ebeaae0b90a6ce8341d7a22fed8d21815b5ba148c468852d20cc26fad4c4242e50ecc184f1f8770dacced6f6a\n            set hashes(f5-cloud-failover-1.4.0-0.noarch.rpm) 49e9108a070e0c8713aeb7b330662358542e61b7c53a9d45108d37a9bf5246f9e4aaae10cc61064801dcccd20bfd5108347b0f694510e7ece07f96c45ba683b0\n            set hashes(f5-cloud-failover-1.5.0-0.noarch.rpm) 33a7e2d047106bcce681757a65240bfacedd48e13567e05fdb23a4b269d266aa5001f81158c3964dc297f0428db31c9df428002898d190285b349c59422a573b\n            set hashes(f5-cloud-failover-1.6.1-1.noarch.rpm) c1b842da21b8d1ba21b6eb63c8598a9ea9986d5daddc21e4d280e1d6b09d3db1de8ac7de5c84edf07b43e4af03daf8fe747a4048f6573d955206352cde2cec65\n            set hashes(f5-cloud-failover-1.7.1-1.noarch.rpm) 14ff0cd2bb49780cc0ae3021c4fc8fcc096e3fce2258096a4aa026d6d37de728ca7345bfe3a79031e336e74d25a2b40ff28324c2c752bf0ee71b7fc89b6fc8fe\n            set hashes(f5-cloud-failover-1.8.0-0.noarch.rpm) 23086d1cbf3cb24eac7eba2305156c600fa21f1b896321a2fa5225d331d7e41471edb3f5368144d86848a4520b1e005c014485ff451e7da6429053f58bfe8ce4\n\n            set file_path [lindex $tmsh::argv 1]\n            set file_name [file tail $file_path]\n\n            if {![info exists hashes($file_name)]} {\n                tmsh::log err \"No hash found for $file_name\"\n                exit 1\n            }\n\n            set expected_hash $hashes($file_name)\n            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]\n            if { $expected_hash eq $computed_hash } {\n                exit 0\n            }\n            tmsh::log err \"Hash does not match for $file_path\"\n            exit 1\n        }]} {\n            tmsh::log err {Unexpected error in verifyHash}\n            exit 1\n        }\n    }\n    script-signature YZI5vbfbZnV3u5PpMWKe1pVWhxjlpbl5lZ8ebUSaQiqGBErB87g55GApChfe4KGB49FMIXTZ9DCGNg3A9OV3VZNMwpNKLs57EvqFzPLwBXO7cMOS2mIIVByG4wUO3bOt72oQY9TuRQDPPVNoDe6Ptv1LH+9GCUWSsTpCEuUvl/N7j/HHRmlWT2DEorv8ZcINWfrIx7Oa5PGADR6sKJooAInwp6JFO+AQFTtCNzVJyEicck2N8yrVSTUqsMVN2Ycamw+xdKWUT2IDyeCodGBh/38jxfCO2ZzmHwVpeIj57VPpiGMiW0vdHQzQyw/Oz+amGdeABJ1/8oNw4XtZF4HdvA==\n    signing-key /Common/f5-irule\n}",
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/waitThenRun.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "#!/bin/bash",
           "while true; do echo \"waiting for cloud libs install to complete\"",
           "    if [ -f /config/cloud/cloudLibsReady ]; then",
           "        break",
           "    else",
           "        sleep 10",
           "    fi",
           "done",
           "\"$@\""
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/var/config/rest/downloads/f5-appsvcs-3.26.1-1.noarch.rpm": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "http://cdn.f5.com/product/cloudsolutions/f5-appsvcs-extension/v3.26.1/f5-appsvcs-3.26.1-1.noarch.rpm"
       },
       "/var/config/rest/downloads/f5-cloud-failover-1.8.0-0.noarch.rpm": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "https://github.com/F5Networks/f5-cloud-failover-extension/releases/download/v1.8.0/f5-cloud-failover-1.8.0-0.noarch.rpm"
       }
      }
     }
    }
   },
   "Properties": {
    "BlockDeviceMappings": [
     {
      "DeviceName": "/dev/xvda",
      "Ebs": {
       "DeleteOnTermination": true,
       "VolumeSize": 100,
       "VolumeType": "gp2"
      }
     },
     {
      "DeviceName": "/dev/xvdb",
      "NoDevice": {}
     }
    ],
    "IamInstanceProfile": {
     "Ref": "bigipServiceDiscoveryProfile"
    },
    "ImageId": {
     "Fn::If": [
      "noCustomImageId",
      {
       "Fn::FindInMap": [
        "BigipRegionMap",
        {
         "Ref": "AWS::Region"
        },
        {
         "Ref": "imageName"
        }
       ]
      },
      {
       "Ref": "customImageId"
      }
     ]
    },
    "InstanceType": {
     "Ref": "instanceType"
    },
    "KeyName": {
     "Ref": "sshKey"
    },
    "NetworkInterfaces": [
     {
      "Description": "Management Interface",
      "DeviceIndex": "0",
      "NetworkInterfaceId": {
       "Ref": "Bigip2ManagementInterface"
      }
     },
     {
      "Description": "Public or External Interface",
      "DeviceIndex": "1",
      "NetworkInterfaceId": {
       "Ref": "Bigip2subnet1Az1Interface"
      }
     }
    ],
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "application"
      }
     },
     {
      "Key": "Costcenter",
      "Value": {
       "Ref": "costcenter"
      }
     },
     {
      "Key": "Environment",
      "Value": {
       "Ref": "environment"
      }
     },
     {
      "Key": "Group",
      "Value": {
       "Ref": "group"
      }
     },
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "Big-IP2: ",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     },
     {
      "Key": "Owner",
      "Value": {
       "Ref": "owner"
      }
     }
    ],
    "UserData": {
     "Fn::Base64": {
      "Fn::Join": [
       "",
       [
        "#!/bin/bash\n",
        "/opt/aws/apitools/cfn-init/bin/cfn-init -v -s ",
        {
         "Ref": "AWS::StackId"
        },
        " -r ",
        "Bigip2Instance",
        " --region ",
        {
         "Ref": "AWS::Region"
        },
        "\n"
       ]
      ]
     }
    }
   },
   "Type": "AWS::EC2::Instance"
  },
  "Bigip2ManagementEipAddress": {
   "Condition": "usePublicIP",
   "Properties": {
    "Domain": "vpc"
   },
   "Type": "AWS::EC2::EIP"
  },
  "Bigip2ManagementEipAssociation": {
   "Condition": "usePublicIP",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "Bigip2ManagementEipAddress",
      "AllocationId"
     ]
    },
    "NetworkInterfaceId": {
     "Ref": "Bigip2ManagementInterface"
    }
   },
   "Type": "AWS::EC2::EIPAssociation"
  },
  "Bigip2ManagementInterface": {
   "Properties": {
    "Description": "Management Interface for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipManagementSecurityGroup"
     }
    ],
    "SubnetId": {
     "Ref": "managementSubnetAz1"
    }
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip2subnet1Az1Interface": {
   "Properties": {
    "Description": "Public External Interface for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipExternalSecurityGroup"
     }
    ],
    "SecondaryPrivateIpAddressCount": 1,
    "SubnetId": {
     "Ref": "subnet1Az1"
    },
    "Tags": [
     {
      "Key": "f5_cloud_failover_label",
      "Value": {
       "Ref": "AWS::StackName"
      }
     },
     {
      "Key": "f5_cloud_failover_nic_map",
      "Value": "external"
     }
    ]
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip2subnet1Az1SelfEipAddress": {
   "Condition": "usePublicIP",
   "Properties": {
    "Domain": "vpc"
   },
   "Type": "AWS::EC2::EIP"
  },
  "Bigip2subnet1Az1SelfEipAssociation": {
   "Condition": "usePublicIP",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "Bigip2subnet1Az1SelfEipAddress",
      "AllocationId"
     ]
    },
    "NetworkInterfaceId": {
     "Ref": "Bigip2subnet1Az1Interface"
    },
    "PrivateIpAddress": {
     "Fn::GetAtt": [
      "Bigip2subnet1Az1Interface",
      "PrimaryPrivateIpAddress"
     ]
    }
   },
   "Type": "AWS::EC2::EIPAssociation"
  },
  "S3Bucket": {
   "Properties": {
    "AccessControl": "BucketOwnerFullControl",
    "Tags": [
     {
      "Key": "f5_cloud_failover_label",
      "Value": {
       "Ref": "AWS::StackName"
      }
     }
    ]
   },
   "Type": "AWS::S3::Bucket"
  },
  "bigipExternalSecurityGroup": {
   "Properties": {
    "GroupDescription": "Public or external interface rules",
    "SecurityGroupIngress": [
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddressApp"
      },
      "FromPort": 80,
      "IpProtocol": "tcp",
      "ToPort": 80
     },
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddressApp"
      },
      "FromPort": 443,
      "IpProtocol": "tcp",
      "ToPort": 443
     }
    ],
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "application"
      }
     },
     {
      "Key": "Costcenter",
      "Value": {
       "Ref": "costcenter"
      }
     },
     {
      "Key": "Environment",
      "Value": {
       "Ref": "environment"
      }
     },
     {
      "Key": "Group",
      "Value": {
       "Ref": "group"
      }
     },
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "Bigip External Security Group:",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     },
     {
      "Key": "Owner",
      "Value": {
       "Ref": "owner"
      }
     }
    ],
    "VpcId": {
     "Ref": "Vpc"
    }
   },
   "Type": "AWS::EC2::SecurityGroup"
  },
  "bigipManagementSecurityGroup": {
   "Properties": {
    "GroupDescription": "BIG-IP management interface policy",
    "SecurityGroupIngress": [
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddress"
      },
      "FromPort": 22,
      "IpProtocol": "tcp",
      "ToPort": 22
     },
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddress"
      },
      "FromPort": 443,
      "IpProtocol": "tcp",
      "ToPort": 443
     }
    ],
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "application"
      }
     },
     {
      "Key": "Costcenter",
      "Value": {
       "Ref": "costcenter"
      }
     },
     {
      "Key": "Environment",
      "Value": {
       "Ref": "environment"
      }
     },
     {
      "Key": "Group",
      "Value": {
       "Ref": "group"
      }
     },
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "Bigip Management Security Group:",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     },
     {
      "Key": "Owner",
      "Value": {
       "Ref": "owner"
      }
     }
    ],
    "VpcId": {
     "Ref": "Vpc"
    }
   },
   "Type": "AWS::EC2::SecurityGroup"
  },
  "bigipSecurityGroupIngressConfigSync": {
   "Properties": {
    "FromPort": 4353,
    "GroupId": {
     "Ref": "bigipExternalSecurityGroup"
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Ref": "bigipExternalSecurityGroup"
    },
    "ToPort": 4353
   },
   "Type": "AWS::EC2::SecurityGroupIngress"
  },
  "bigipSecurityGroupIngressHa": {
   "Properties": {
    "FromPort": 1026,
    "GroupId": {
     "Ref": "bigipExternalSecurityGroup"
    },
    "IpProtocol": "udp",
    "SourceSecurityGroupId": {
     "Ref": "bigipExternalSecurityGroup"
    },
    "ToPort": 1026
   },
   "Type": "AWS::EC2::SecurityGroupIngress"
  },
  "bigipSecurityGroupIngressManagmentSame": {
   "Properties": {
    "FromPort": 443,
    "GroupId": {
     "Ref": "bigipManagementSecurityGroup"
    },
    "IpProtocol": "tcp",
    "SourceSecurityGroupId": {
     "Ref": "bigipManagementSecurityGroup"
    },
    "ToPort": 443
   },
   "Type": "AWS::EC2::SecurityGroupIngress"
  },
  "bigipServiceDiscoveryAccessRole": {
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "ec2.amazonaws.com"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Path": "/",
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "ec2:DescribeInstances",
          "ec2:DescribeInstanceStatus",
          "ec2:DescribeAddresses",
          "ec2:AssociateAddress",
          "ec2:DisassociateAddress",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeNetworkInterfaceAttribute",
          "ec2:DescribeRouteTables",
          "ec2:ReplaceRoute",
          "ec2:assignprivateipaddresses",
          "sts:AssumeRole",
          "s3:ListAllMyBuckets",
          "ec2:UnassignPrivateIpAddresses"
         ],
         "Effect": "Allow",
         "Resource": [
          "*"
         ]
        },
        {
         "Action": [
          "s3:ListBucket",
          "s3:GetBucketTagging"
         ],
         "Effect": "Allow",
         "Resource": {
          "Fn::Join": [
           "",
           [
            "arn:*:s3:::",
            {
             "Ref": "S3Bucket"
            }
           ]
          ]
         }
        },
        {
         "Action": [
          "s3:PutObject",
          "s3:GetObject",
          "s3:DeleteObject"
         ],
         "Effect": "Allow",
         "Resource": {
          "Fn::Join": [
           "",
           [
            "arn:*:s3:::",
            {
             "Ref": "S3Bucket"
            },
            "/*"
           ]
          ]
         }
        },
        {
         "Action": [
          "ec2:CreateRoute",
          "ec2:ReplaceRoute"
         ],
         "Effect": "Allow",
         "Resource": {
          "Fn::Join": [
           "",
           [
            "arn:*:ec2:",
            {
             "Ref": "AWS::Region"
            },
            ":",
            {
             "Ref": "AWS::AccountId"
            },
            ":route-table/*"
           ]
          ]
         }
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "BigipServiceDiscoveryPolicy"
     }
    ]
   },
   "Type": "AWS::IAM::Role"
  },
  "bigipServiceDiscoveryProfile": {
   "Properties": {
    "Path": "/",
    "Roles": [
     {
      "Ref": "bigipServiceDiscoveryAccessRole"
     }
    ]
   },
   "Type": "AWS::IAM::InstanceProfile"
  }
 }
}
