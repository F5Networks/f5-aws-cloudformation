{
 "AWSTemplateFormatVersion": "2010-09-09",
 "Conditions": {
  "noCustomImageId": {
   "Fn::Equals": [
    "OPTIONAL",
    {
     "Ref": "customImageId"
    }
   ]
  },
  "optin": {
   "Fn::Equals": [
    "Yes",
    {
     "Ref": "allowUsageAnalytics"
    }
   ]
  },
  "useDynamicExternalIpAddr": {
   "Fn::Or": [
    {
     "Fn::Equals": [
      "DYNAMIC",
      {
       "Ref": "subnet1Az1Address"
      }
     ]
    },
    {
     "Fn::Equals": [
      "",
      {
       "Ref": "subnet1Az1Address"
      }
     ]
    }
   ]
  },
  "useDynamicInternalIpAddr": {
   "Fn::Or": [
    {
     "Fn::Equals": [
      "DYNAMIC",
      {
       "Ref": "subnet2Az1Address"
      }
     ]
    },
    {
     "Fn::Equals": [
      "",
      {
       "Ref": "subnet2Az1Address"
      }
     ]
    }
   ]
  },
  "useDynamicManagementIpAddr": {
   "Fn::Or": [
    {
     "Fn::Equals": [
      "DYNAMIC",
      {
       "Ref": "managementSubnetAz1Address"
      }
     ]
    },
    {
     "Fn::Equals": [
      "",
      {
       "Ref": "managementSubnetAz1Address"
      }
     ]
    }
   ]
  },
  "usePublicIP": {
   "Fn::Equals": [
    "Yes",
    {
     "Ref": "provisionPublicIP"
    }
   ]
  },
  "useStaticExternalIpAddr": {
   "Fn::Not": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        "DYNAMIC",
        {
         "Ref": "subnet1Az1Address"
        }
       ]
      },
      {
       "Fn::Equals": [
        "",
        {
         "Ref": "subnet1Az1Address"
        }
       ]
      }
     ]
    }
   ]
  },
  "useStaticInternalIpAddr": {
   "Fn::Not": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        "DYNAMIC",
        {
         "Ref": "subnet2Az1Address"
        }
       ]
      },
      {
       "Fn::Equals": [
        "",
        {
         "Ref": "subnet2Az1Address"
        }
       ]
      }
     ]
    }
   ]
  },
  "useStaticManagementIpAddr": {
   "Fn::Not": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        "DYNAMIC",
        {
         "Ref": "managementSubnetAz1Address"
        }
       ]
      },
      {
       "Fn::Equals": [
        "",
        {
         "Ref": "managementSubnetAz1Address"
        }
       ]
      }
     ]
    }
   ]
  }
 },
 "Description": "Template v6.1.0: AWS CloudFormation Template for creating a 3NIC BIG-IP in an existing VPC **WARNING** This template creates Amazon EC2 Instances. You will be billed for the AWS resources used if you create a stack from this template.",
 "Mappings": {
  "BigipRegionMap": {
   "af-south-1": {
    "AdvancedWaf200Mbps": "ami-0c0973070b9cbc226",
    "AdvancedWaf25Mbps": "ami-024c79d6452392861",
    "AdvancedWaf3000Mbps": "ami-00d21bbda0b482e05",
    "Best10000Mbps": "ami-0a34fef0abd2cd687",
    "Best1000Mbps": "ami-0f8965db564ad8f28",
    "Best200Mbps": "ami-0d19230717348aaab",
    "Best25Mbps": "ami-010dd291c2d96f16f",
    "Best5000Mbps": "ami-063675bc6cc33d326",
    "Better10000Mbps": "ami-008438e7aa8c81edf",
    "Better1000Mbps": "ami-0b5a964ae36416f4d",
    "Better200Mbps": "ami-0226ec81e980ba2f7",
    "Better25Mbps": "ami-07b76659dec7b66a0",
    "Better5000Mbps": "ami-0d0c0c6e9abe7330e",
    "Good10000Mbps": "ami-0b7d1175f8b70ec4b",
    "Good1000Mbps": "ami-09d0f1c9771613cb3",
    "Good200Mbps": "ami-017211948cfba68e1",
    "Good25Mbps": "ami-053becd2593dbd560",
    "Good5000Mbps": "ami-0d41f0bf8ed6cd815",
    "PerAppVeAwaf200Mbps": "ami-077cc679b081eacf6",
    "PerAppVeAwaf25Mbps": "ami-02de5652d5cd645fe"
   },
   "ap-east-1": {
    "AdvancedWaf200Mbps": "ami-0bd62c22a1284d4c5",
    "AdvancedWaf25Mbps": "ami-0228473471bb4170c",
    "AdvancedWaf3000Mbps": "ami-0a7c60bfc3f0a947d",
    "Best10000Mbps": "ami-00c85160aa9b4750a",
    "Best1000Mbps": "ami-0eefade3bbd2d065d",
    "Best200Mbps": "ami-0d812af9d65df84ba",
    "Best25Mbps": "ami-000fc03136e7b87f8",
    "Best5000Mbps": "ami-03bbe25e4afd6d021",
    "Better10000Mbps": "ami-0736e016a21dc3786",
    "Better1000Mbps": "ami-0461bfff26084b836",
    "Better200Mbps": "ami-07dd34c453670899d",
    "Better25Mbps": "ami-07d3502a1884558b7",
    "Better5000Mbps": "ami-070f4eee2b5bf211e",
    "Good10000Mbps": "ami-06f203a6e2b5c9558",
    "Good1000Mbps": "ami-029923883bedee456",
    "Good200Mbps": "ami-02b76155078aed288",
    "Good25Mbps": "ami-0a1a0dff6721a39ab",
    "Good5000Mbps": "ami-0ccdd9f4bf550579b",
    "PerAppVeAwaf200Mbps": "ami-0cf5d62588121ce04",
    "PerAppVeAwaf25Mbps": "ami-02a03347740a0584a"
   },
   "ap-northeast-1": {
    "AdvancedWaf200Mbps": "ami-086ad11f704f0f83c",
    "AdvancedWaf25Mbps": "ami-002065c341201c734",
    "AdvancedWaf3000Mbps": "ami-049e9b92a9cedfc70",
    "Best10000Mbps": "ami-06555553bfe62b695",
    "Best1000Mbps": "ami-078c98c3a6bcd8ff3",
    "Best200Mbps": "ami-0fb41506b87f4508b",
    "Best25Mbps": "ami-03f43ab50a5159a06",
    "Best5000Mbps": "ami-01bfb1eb68e4c2b00",
    "Better10000Mbps": "ami-0b05830c264445c02",
    "Better1000Mbps": "ami-0e9560008b9deaa8a",
    "Better200Mbps": "ami-07f9ff07c50052da0",
    "Better25Mbps": "ami-0ab828e66b9d2144e",
    "Better5000Mbps": "ami-03f023fc8fe7a4444",
    "Good10000Mbps": "ami-0b36cf7a7b059ae0b",
    "Good1000Mbps": "ami-098e035d6558ac823",
    "Good200Mbps": "ami-082e62ef7b3081f5d",
    "Good25Mbps": "ami-03238b771b545e332",
    "Good5000Mbps": "ami-0b3f664922786e7ad",
    "PerAppVeAwaf200Mbps": "ami-062c7a5b0b1b568c9",
    "PerAppVeAwaf25Mbps": "ami-0764c6230d7c9043f"
   },
   "ap-northeast-2": {
    "AdvancedWaf200Mbps": "ami-0143a99c69831ecc4",
    "AdvancedWaf25Mbps": "ami-059615beb84e7265b",
    "AdvancedWaf3000Mbps": "ami-0347c7939a1e0b016",
    "Best10000Mbps": "ami-046f9bc0f5b3b3e3f",
    "Best1000Mbps": "ami-0bf5c56983d9d65da",
    "Best200Mbps": "ami-06296168e78824e04",
    "Best25Mbps": "ami-04f833d93bfc30f2a",
    "Best5000Mbps": "ami-076a124c72f7adcda",
    "Better10000Mbps": "ami-01ceb9e52f89e78e3",
    "Better1000Mbps": "ami-00b33ad21a463805c",
    "Better200Mbps": "ami-01ea9c48b36018abd",
    "Better25Mbps": "ami-03d404e4315b72327",
    "Better5000Mbps": "ami-05ed054c39fb474d6",
    "Good10000Mbps": "ami-0a5ebe968b65881ca",
    "Good1000Mbps": "ami-0fd79725cbfa5a049",
    "Good200Mbps": "ami-0cdc909f7d14fff46",
    "Good25Mbps": "ami-01ff813f03c2f8d99",
    "Good5000Mbps": "ami-07e47979ced26f59c",
    "PerAppVeAwaf200Mbps": "ami-0716ab18d78e62150",
    "PerAppVeAwaf25Mbps": "ami-0e0f1e624ec10d437"
   },
   "ap-northeast-3": {
    "AdvancedWaf200Mbps": "ami-04da6a60999e19823",
    "AdvancedWaf25Mbps": "ami-06c6dbe7a4deefe0b",
    "AdvancedWaf3000Mbps": "ami-04bbb8c28d7a393a9",
    "Best10000Mbps": "ami-060fd20b085454256",
    "Best1000Mbps": "ami-0f3d9e41b19ad8fb0",
    "Best200Mbps": "ami-002dca3ecb3467d3f",
    "Best25Mbps": "ami-0951bf74999faaec1",
    "Best5000Mbps": "ami-09b892b9858fed312",
    "Better10000Mbps": "ami-0eb2f9769f7893df3",
    "Better1000Mbps": "ami-022476c83bf1ed664",
    "Better200Mbps": "ami-0b2f32fa5a28dfb91",
    "Better25Mbps": "ami-047cfefbdaf646b32",
    "Better5000Mbps": "ami-06eea82ffba7625be",
    "Good10000Mbps": "ami-000f93f58467afd54",
    "Good1000Mbps": "ami-06f960e3740e61270",
    "Good200Mbps": "ami-094116a08a3b2c5c1",
    "Good25Mbps": "ami-06874ebac77b99476",
    "Good5000Mbps": "ami-0b467eacdb7b8fc73",
    "PerAppVeAwaf200Mbps": "ami-08395804c08dbdb68",
    "PerAppVeAwaf25Mbps": "ami-039c4eda6edf6e3b3"
   },
   "ap-south-1": {
    "AdvancedWaf200Mbps": "ami-0bd6df6eb225d8e9b",
    "AdvancedWaf25Mbps": "ami-0bb6f5c3d894a15ea",
    "AdvancedWaf3000Mbps": "ami-0ac0d6091b9028b35",
    "Best10000Mbps": "ami-070c28da29e27eaa9",
    "Best1000Mbps": "ami-08a0cdb0bbe0c3c92",
    "Best200Mbps": "ami-09203d807a60bdfad",
    "Best25Mbps": "ami-0d33efe532f327351",
    "Best5000Mbps": "ami-09fbe8f93af5f2c31",
    "Better10000Mbps": "ami-029fccf036ca65d63",
    "Better1000Mbps": "ami-0d274c9dce38cf3da",
    "Better200Mbps": "ami-01452ed91e9e2389e",
    "Better25Mbps": "ami-0e6bba51414371803",
    "Better5000Mbps": "ami-073adf225459781b4",
    "Good10000Mbps": "ami-0024333554fb00f5b",
    "Good1000Mbps": "ami-0a230004852595186",
    "Good200Mbps": "ami-071f6ada3a64ea464",
    "Good25Mbps": "ami-0d9e542cc7c5bc6c7",
    "Good5000Mbps": "ami-099787d99eef391d5",
    "PerAppVeAwaf200Mbps": "ami-09d1143249d6d3659",
    "PerAppVeAwaf25Mbps": "ami-03c30be8022a8ee81"
   },
   "ap-southeast-1": {
    "AdvancedWaf200Mbps": "ami-0c2addf05caa19ca1",
    "AdvancedWaf25Mbps": "ami-0d8faf7d6322a7e3a",
    "AdvancedWaf3000Mbps": "ami-048d77f24405d2aed",
    "Best10000Mbps": "ami-0958cd8c2a95b5fee",
    "Best1000Mbps": "ami-00ef24535918f6e91",
    "Best200Mbps": "ami-0c76b68a3f63534a0",
    "Best25Mbps": "ami-0b18133f70e37728e",
    "Best5000Mbps": "ami-08d94f1b2035d1297",
    "Better10000Mbps": "ami-059d6f107552661fa",
    "Better1000Mbps": "ami-0eceda3de5101734c",
    "Better200Mbps": "ami-02c91d84440e00cd5",
    "Better25Mbps": "ami-021ca57b715c775d2",
    "Better5000Mbps": "ami-0fc08b0c99903de1f",
    "Good10000Mbps": "ami-05e2eba6172886fef",
    "Good1000Mbps": "ami-09279f0a27fdf40c4",
    "Good200Mbps": "ami-0f729dcab5f0e22a0",
    "Good25Mbps": "ami-09f9ce02cec37dbc5",
    "Good5000Mbps": "ami-09caf2e7e99e87972",
    "PerAppVeAwaf200Mbps": "ami-059e22326eb053ba9",
    "PerAppVeAwaf25Mbps": "ami-0fe3d30353320bd43"
   },
   "ap-southeast-2": {
    "AdvancedWaf200Mbps": "ami-03f5f3dd15e3757c3",
    "AdvancedWaf25Mbps": "ami-0259bc2c5c7165b7a",
    "AdvancedWaf3000Mbps": "ami-0c00494a2dab355c5",
    "Best10000Mbps": "ami-0543c34bac59e9742",
    "Best1000Mbps": "ami-0a083d6e4bb2c3676",
    "Best200Mbps": "ami-02b557d0d2295773e",
    "Best25Mbps": "ami-0e60e8320d40fd646",
    "Best5000Mbps": "ami-0ab7faf9453593aca",
    "Better10000Mbps": "ami-0fe630a506ada1a0c",
    "Better1000Mbps": "ami-09274253fc331a50c",
    "Better200Mbps": "ami-0282b6a90f5ef248f",
    "Better25Mbps": "ami-03d1be90759ef0e3b",
    "Better5000Mbps": "ami-016c5bc5d20f4189e",
    "Good10000Mbps": "ami-0cb0753744388a96f",
    "Good1000Mbps": "ami-04161016b7685dfae",
    "Good200Mbps": "ami-09c0d74b14dd8dbfc",
    "Good25Mbps": "ami-0c0b02138c9ec4e23",
    "Good5000Mbps": "ami-0d41d3bb0b67124c7",
    "PerAppVeAwaf200Mbps": "ami-0ea45634c35a94124",
    "PerAppVeAwaf25Mbps": "ami-04615d4f5244f00ee"
   },
   "ca-central-1": {
    "AdvancedWaf200Mbps": "ami-03c5603cdea9a88f6",
    "AdvancedWaf25Mbps": "ami-00fbfd75ce476de69",
    "AdvancedWaf3000Mbps": "ami-093df7d301cf26a29",
    "Best10000Mbps": "ami-06cb6e6c239f49fc8",
    "Best1000Mbps": "ami-01a6f647754e6b13e",
    "Best200Mbps": "ami-06bce699c35811a81",
    "Best25Mbps": "ami-04fe239fdf525d0cf",
    "Best5000Mbps": "ami-0cebce5e33b23f96a",
    "Better10000Mbps": "ami-0c2277ebe03592c59",
    "Better1000Mbps": "ami-0f53a9126bd5ebf39",
    "Better200Mbps": "ami-0d14a4cc57b9435b7",
    "Better25Mbps": "ami-08ab475506c56bd8b",
    "Better5000Mbps": "ami-0a86e7105cce30028",
    "Good10000Mbps": "ami-0b493b69ceb14841c",
    "Good1000Mbps": "ami-02fcba9522d5d3073",
    "Good200Mbps": "ami-01f6a5a523224eb58",
    "Good25Mbps": "ami-0c0b13798aeb2d038",
    "Good5000Mbps": "ami-003a68dedd77cd4e5",
    "PerAppVeAwaf200Mbps": "ami-0e4d8faade3e70865",
    "PerAppVeAwaf25Mbps": "ami-0f07343e2b530bc4c"
   },
   "eu-central-1": {
    "AdvancedWaf200Mbps": "ami-02841faa3d1c76908",
    "AdvancedWaf25Mbps": "ami-07ad6519bc9efc880",
    "AdvancedWaf3000Mbps": "ami-087ecc6c568e1a76f",
    "Best10000Mbps": "ami-08bceaa0211f1d8af",
    "Best1000Mbps": "ami-041ac3456ac786f41",
    "Best200Mbps": "ami-02fe410c82bc13d39",
    "Best25Mbps": "ami-084641c0e6eacf26f",
    "Best5000Mbps": "ami-090e6a3bbaaf989f6",
    "Better10000Mbps": "ami-015a4ba8f299a78a1",
    "Better1000Mbps": "ami-001da6769cc99db8a",
    "Better200Mbps": "ami-0b55e6458f014acf2",
    "Better25Mbps": "ami-083213dd281240b28",
    "Better5000Mbps": "ami-0f43847669b56537f",
    "Good10000Mbps": "ami-0af0d7e170a223f75",
    "Good1000Mbps": "ami-0b5a1ac5a4e13aaf3",
    "Good200Mbps": "ami-061fcff2b9ec48177",
    "Good25Mbps": "ami-0044ccc1362d2c722",
    "Good5000Mbps": "ami-0dae8919a6bfe0934",
    "PerAppVeAwaf200Mbps": "ami-0d2502bf50b39ca46",
    "PerAppVeAwaf25Mbps": "ami-0e9e0cb86c55c928f"
   },
   "eu-north-1": {
    "AdvancedWaf200Mbps": "ami-0dcd8c4f018c8c8b2",
    "AdvancedWaf25Mbps": "ami-0dc6f99afc815e85a",
    "AdvancedWaf3000Mbps": "ami-09de2069cdcbef76e",
    "Best10000Mbps": "ami-04c78127e4c8c3830",
    "Best1000Mbps": "ami-06fc39ec34a4a67eb",
    "Best200Mbps": "ami-09557481840f31e17",
    "Best25Mbps": "ami-012778e5cae7d8274",
    "Best5000Mbps": "ami-059b4068408eb78dd",
    "Better10000Mbps": "ami-0fe77d7df443b55f4",
    "Better1000Mbps": "ami-0300b1c98772058a7",
    "Better200Mbps": "ami-0e945bb625b04443e",
    "Better25Mbps": "ami-0694c9c0bb2aead18",
    "Better5000Mbps": "ami-055cdeeee377992d4",
    "Good10000Mbps": "ami-08029e0a633b912c1",
    "Good1000Mbps": "ami-0f0f15c9425f20db5",
    "Good200Mbps": "ami-0bba778d85a4276e9",
    "Good25Mbps": "ami-02dfac5bb86cf5f87",
    "Good5000Mbps": "ami-02b2809a880e17924",
    "PerAppVeAwaf200Mbps": "ami-00fd8e4899408f533",
    "PerAppVeAwaf25Mbps": "ami-09bc786bf67e9ed6c"
   },
   "eu-south-1": {
    "AdvancedWaf200Mbps": "ami-00026ce1c04770edc",
    "AdvancedWaf25Mbps": "ami-0923a6627ee45886c",
    "AdvancedWaf3000Mbps": "ami-0511ff621ba7327bf",
    "Best10000Mbps": "ami-0d073d43d250bef58",
    "Best1000Mbps": "ami-029f1acc8bce67d8d",
    "Best200Mbps": "ami-055d5719f49532484",
    "Best25Mbps": "ami-064d030a041f73a82",
    "Best5000Mbps": "ami-0c9da898656cb716e",
    "Better10000Mbps": "ami-0c93560396996a22b",
    "Better1000Mbps": "ami-00e7a2ca077ccdf16",
    "Better200Mbps": "ami-0f40198f5654dac99",
    "Better25Mbps": "ami-07d08804b09b832e7",
    "Better5000Mbps": "ami-08cee4090fc24c362",
    "Good10000Mbps": "ami-03c1a6c15d74241ec",
    "Good1000Mbps": "ami-00e3875fbad915833",
    "Good200Mbps": "ami-0f690676c96a6786d",
    "Good25Mbps": "ami-0984c8a8ac3422999",
    "Good5000Mbps": "ami-0a0f4cf28e43ec5ba",
    "PerAppVeAwaf200Mbps": "ami-0ee6fb140879deec7",
    "PerAppVeAwaf25Mbps": "ami-062b04ce6f41a4d67"
   },
   "eu-west-1": {
    "AdvancedWaf200Mbps": "ami-00a14a8ebea848a93",
    "AdvancedWaf25Mbps": "ami-0e27373b62d12692b",
    "AdvancedWaf3000Mbps": "ami-03588a8e0f81f0d31",
    "Best10000Mbps": "ami-02fb86ccccd6049a4",
    "Best1000Mbps": "ami-0b794d7efdba3e1c6",
    "Best200Mbps": "ami-0266d1c00996a0aa4",
    "Best25Mbps": "ami-0fddd3605816549b5",
    "Best5000Mbps": "ami-0ecefcb478ad6501b",
    "Better10000Mbps": "ami-0edf1712e1f79a0ca",
    "Better1000Mbps": "ami-07e72198e2ebcb3e4",
    "Better200Mbps": "ami-0998b48fb246b4803",
    "Better25Mbps": "ami-053fe5ff17c82df3a",
    "Better5000Mbps": "ami-0de939c8541f1458a",
    "Good10000Mbps": "ami-0a20a19e27318e4f4",
    "Good1000Mbps": "ami-0bfc2b3fa6184e5b7",
    "Good200Mbps": "ami-045a45c2c1e9815c1",
    "Good25Mbps": "ami-045264d74a7ecf388",
    "Good5000Mbps": "ami-01957d1c3661b1b3f",
    "PerAppVeAwaf200Mbps": "ami-097e6b90e836d82b7",
    "PerAppVeAwaf25Mbps": "ami-0f345a9d5eb041d6d"
   },
   "eu-west-2": {
    "AdvancedWaf200Mbps": "ami-0f7843cb5947d2391",
    "AdvancedWaf25Mbps": "ami-01995d28d8f5be811",
    "AdvancedWaf3000Mbps": "ami-03740eca5be212a4c",
    "Best10000Mbps": "ami-0ca7736097ca9a135",
    "Best1000Mbps": "ami-06f9d0ebb5329fca8",
    "Best200Mbps": "ami-0fd96f8ae15a4a486",
    "Best25Mbps": "ami-061409601b7bd0c40",
    "Best5000Mbps": "ami-0b0fd9bd0b5867a3c",
    "Better10000Mbps": "ami-0bc315db4fc10f6d0",
    "Better1000Mbps": "ami-0dde9e2b85341d654",
    "Better200Mbps": "ami-05792f180505e94d3",
    "Better25Mbps": "ami-0f041b892059ece5a",
    "Better5000Mbps": "ami-00621d0d972a41718",
    "Good10000Mbps": "ami-0fe3ffa7f5027d768",
    "Good1000Mbps": "ami-019f4b0434653ca4f",
    "Good200Mbps": "ami-03d2c446ed841d1c3",
    "Good25Mbps": "ami-032233b02c615cdfa",
    "Good5000Mbps": "ami-0369254644a8bb431",
    "PerAppVeAwaf200Mbps": "ami-052cd8cef239d44e3",
    "PerAppVeAwaf25Mbps": "ami-052afce15d99fdb47"
   },
   "eu-west-3": {
    "AdvancedWaf200Mbps": "ami-0a9676fea3200b94d",
    "AdvancedWaf25Mbps": "ami-0de0c93f7175453e1",
    "AdvancedWaf3000Mbps": "ami-03e6c9519784aad6e",
    "Best10000Mbps": "ami-0b81c19fba115739c",
    "Best1000Mbps": "ami-063dbd6e6e8e53dfb",
    "Best200Mbps": "ami-0b6299d6645d8c86e",
    "Best25Mbps": "ami-05f7a45845fe9e4a8",
    "Best5000Mbps": "ami-0a14970f236d5dcd2",
    "Better10000Mbps": "ami-0195132ee3f5c28f7",
    "Better1000Mbps": "ami-0dfae7f5bea1d24bb",
    "Better200Mbps": "ami-09cb39c782528f691",
    "Better25Mbps": "ami-0d2d7ff48e05c4442",
    "Better5000Mbps": "ami-0c3a6e5bf2b1daece",
    "Good10000Mbps": "ami-0db1379f0f7245fff",
    "Good1000Mbps": "ami-0270f24084a9ba00f",
    "Good200Mbps": "ami-02549b93eb1f10be1",
    "Good25Mbps": "ami-043ea44063bf356bf",
    "Good5000Mbps": "ami-015e177dcfc0117a1",
    "PerAppVeAwaf200Mbps": "ami-001954ac51fdba349",
    "PerAppVeAwaf25Mbps": "ami-0b88dd23c481c1a68"
   },
   "me-south-1": {
    "AdvancedWaf200Mbps": "ami-09f47ee9249825620",
    "AdvancedWaf25Mbps": "ami-0156bc2c240537727",
    "AdvancedWaf3000Mbps": "ami-09e7010080b8266a6",
    "Best10000Mbps": "ami-0d801a8521b2be6ed",
    "Best1000Mbps": "ami-0a6b2c2ac9a377cea",
    "Best200Mbps": "ami-0534c6bb7d7a485d2",
    "Best25Mbps": "ami-096cd73a3e1a79648",
    "Best5000Mbps": "ami-0dcec68c229666026",
    "Better10000Mbps": "ami-083fbe7acc77a61c0",
    "Better1000Mbps": "ami-0abfc530ff2bf8375",
    "Better200Mbps": "ami-0f583243994628d3c",
    "Better25Mbps": "ami-0fbac2a47fc86365c",
    "Better5000Mbps": "ami-0076708f6d727ee93",
    "Good10000Mbps": "ami-066e80285f35fa88e",
    "Good1000Mbps": "ami-0763ebe76e773f99d",
    "Good200Mbps": "ami-085f9aec030321566",
    "Good25Mbps": "ami-094b108479a286f6e",
    "Good5000Mbps": "ami-01b5dfdc82ab951a2",
    "PerAppVeAwaf200Mbps": "ami-05977356f74bde37d",
    "PerAppVeAwaf25Mbps": "ami-0f3165ecdc7a09094"
   },
   "sa-east-1": {
    "AdvancedWaf200Mbps": "ami-0152e42b1ccc387d3",
    "AdvancedWaf25Mbps": "ami-084685c6f29386b53",
    "AdvancedWaf3000Mbps": "ami-0e2db2844109662f8",
    "Best10000Mbps": "ami-033e69228b7fa05d3",
    "Best1000Mbps": "ami-012fa1259185c5142",
    "Best200Mbps": "ami-05a37ec8a1cb5bc4e",
    "Best25Mbps": "ami-076e8663b567336f5",
    "Best5000Mbps": "ami-0c75ccbbd9811de37",
    "Better10000Mbps": "ami-0c7ace520db2cc302",
    "Better1000Mbps": "ami-042e012aeb4dfa4f3",
    "Better200Mbps": "ami-0049c93b0a4fd4b0f",
    "Better25Mbps": "ami-088fe17b8d13d0031",
    "Better5000Mbps": "ami-00700bdcc8ae95eab",
    "Good10000Mbps": "ami-0eb161b70b9af7a5d",
    "Good1000Mbps": "ami-0400ffa342cc02084",
    "Good200Mbps": "ami-06239af79386b0642",
    "Good25Mbps": "ami-0268b7dfa2ba02336",
    "Good5000Mbps": "ami-0cb96f157ca503080",
    "PerAppVeAwaf200Mbps": "ami-03c4dd9ed7bb8b4dd",
    "PerAppVeAwaf25Mbps": "ami-0b4963cece2734bf7"
   },
   "us-east-1": {
    "AdvancedWaf200Mbps": "ami-0530e6be2fc8d9e83",
    "AdvancedWaf25Mbps": "ami-08586db31e4b67424",
    "AdvancedWaf3000Mbps": "ami-0590fa04d8344f404",
    "Best10000Mbps": "ami-01a63d80f7a1c70d8",
    "Best1000Mbps": "ami-08ae2088cc946412c",
    "Best200Mbps": "ami-066d13a1fa1c39306",
    "Best25Mbps": "ami-048c736d280a4edcd",
    "Best5000Mbps": "ami-044a89800da6e998a",
    "Better10000Mbps": "ami-0de9ee18a0efcd4c7",
    "Better1000Mbps": "ami-00d7f0271ac5e7e53",
    "Better200Mbps": "ami-065dab107dd393342",
    "Better25Mbps": "ami-0f794ab7cceb0cd07",
    "Better5000Mbps": "ami-0da3e3e2f41002df2",
    "Good10000Mbps": "ami-0a49ae7cf7a8200df",
    "Good1000Mbps": "ami-05754b8da67fce4f3",
    "Good200Mbps": "ami-0c52a63944e752791",
    "Good25Mbps": "ami-0208bbf74dbad7c04",
    "Good5000Mbps": "ami-08fe9ea08190c27d3",
    "PerAppVeAwaf200Mbps": "ami-01a101f71b9821760",
    "PerAppVeAwaf25Mbps": "ami-0226569652a8a2dcb"
   },
   "us-east-2": {
    "AdvancedWaf200Mbps": "ami-0f9b8232bf88e5862",
    "AdvancedWaf25Mbps": "ami-0fc89d05d4208ebb9",
    "AdvancedWaf3000Mbps": "ami-0db2ead84757e773b",
    "Best10000Mbps": "ami-09f8091f3bdbd29ab",
    "Best1000Mbps": "ami-0856fa969e51bbd92",
    "Best200Mbps": "ami-0b5357e1b34cf7c4d",
    "Best25Mbps": "ami-0643496689b45433d",
    "Best5000Mbps": "ami-0c7ca45478f8efc35",
    "Better10000Mbps": "ami-0250c8f83317a7a12",
    "Better1000Mbps": "ami-041d6498e85eb8b98",
    "Better200Mbps": "ami-065543c15c719e872",
    "Better25Mbps": "ami-01ac33c73933f13f3",
    "Better5000Mbps": "ami-0c6ff34529475325f",
    "Good10000Mbps": "ami-06a06b4d5bbba2c33",
    "Good1000Mbps": "ami-0171148680cb7e990",
    "Good200Mbps": "ami-0bdfef21677e05c23",
    "Good25Mbps": "ami-056b0dad20d3da095",
    "Good5000Mbps": "ami-03bd07aef89d3eafc",
    "PerAppVeAwaf200Mbps": "ami-03623db3d032547c7",
    "PerAppVeAwaf25Mbps": "ami-09c2542f497fb55b0"
   },
   "us-gov-east-1": {
    "AdvancedWaf200Mbps": "ami-0a34f1861c1b5501e",
    "AdvancedWaf25Mbps": "ami-043422feba1bceba2",
    "AdvancedWaf3000Mbps": "ami-048d2bf31bdda7d7a",
    "Best10000Mbps": "ami-0cec831d6c5efbfb7",
    "Best1000Mbps": "ami-01edcd3b1c2e037c1",
    "Best200Mbps": "ami-08e2d80817b9473c6",
    "Best25Mbps": "ami-060b01517ae9df4c0",
    "Best5000Mbps": "ami-098de2c1ac2f69ba4",
    "Better10000Mbps": "ami-08fb83003f7df9473",
    "Better1000Mbps": "ami-022f2a859d925ed8a",
    "Better200Mbps": "ami-0c4eea7cafac34276",
    "Better25Mbps": "ami-05e7b68922c7de598",
    "Better5000Mbps": "ami-0da883da4a1177ce6",
    "Good10000Mbps": "ami-0badb86ba83f99609",
    "Good1000Mbps": "ami-0ccb59e5c13e87d61",
    "Good200Mbps": "ami-084d3b860acaac695",
    "Good25Mbps": "ami-057b16a4916d031ff",
    "Good5000Mbps": "ami-06d2ba450ca416105",
    "PerAppVeAwaf200Mbps": "ami-0fc29513ea2f768b1",
    "PerAppVeAwaf25Mbps": "ami-096f2caee42716ff5"
   },
   "us-gov-west-1": {
    "AdvancedWaf200Mbps": "ami-03046d828edbb2b9d",
    "AdvancedWaf25Mbps": "ami-0e3275684fd4aaacd",
    "AdvancedWaf3000Mbps": "ami-0e1537c2781f17ac1",
    "Best10000Mbps": "ami-0d74330e24eda7d8e",
    "Best1000Mbps": "ami-00cd82a8a66c19635",
    "Best200Mbps": "ami-02c31a58044302431",
    "Best25Mbps": "ami-022223d912cd89999",
    "Best5000Mbps": "ami-0a036992697a5269b",
    "Better10000Mbps": "ami-05e9ce6eb7f1b8a16",
    "Better1000Mbps": "ami-082de314fedee593a",
    "Better200Mbps": "ami-0370622c316e56673",
    "Better25Mbps": "ami-0918910b4bc15a25b",
    "Better5000Mbps": "ami-063027b34d18b2a89",
    "Good10000Mbps": "ami-09fe3c733dc48194e",
    "Good1000Mbps": "ami-0ac8f9fefc18b4238",
    "Good200Mbps": "ami-025e85fe46e468609",
    "Good25Mbps": "ami-0dea019609c5b09b3",
    "Good5000Mbps": "ami-0b59949f07a0c27e9",
    "PerAppVeAwaf200Mbps": "ami-0542696855b501d38",
    "PerAppVeAwaf25Mbps": "ami-0dfce6fbe01152016"
   },
   "us-west-1": {
    "AdvancedWaf200Mbps": "ami-02b5c0770b88a916b",
    "AdvancedWaf25Mbps": "ami-088453c9e8c2794f9",
    "AdvancedWaf3000Mbps": "ami-084e93258cde8e6e0",
    "Best10000Mbps": "ami-0f6ab8d64dbc912bc",
    "Best1000Mbps": "ami-06952f316fbc4bf44",
    "Best200Mbps": "ami-018d25e0f6fc89a9f",
    "Best25Mbps": "ami-0500eeeb40f83b006",
    "Best5000Mbps": "ami-0f8679bfd0e56203d",
    "Better10000Mbps": "ami-093e16588543112bf",
    "Better1000Mbps": "ami-033fbf9d92ad46864",
    "Better200Mbps": "ami-0f556d63cc6ad5aef",
    "Better25Mbps": "ami-017f3f54dc0eb203c",
    "Better5000Mbps": "ami-0a21ce78d7f969c7f",
    "Good10000Mbps": "ami-0f505f128a92d6fb5",
    "Good1000Mbps": "ami-0e7b0faf164d2f0f5",
    "Good200Mbps": "ami-07422ee6d9d53cb25",
    "Good25Mbps": "ami-08ea40c5bd38547c2",
    "Good5000Mbps": "ami-09f2080cc4dc176a8",
    "PerAppVeAwaf200Mbps": "ami-00646fdd02f65e78b",
    "PerAppVeAwaf25Mbps": "ami-0ea320ec88a437d5c"
   },
   "us-west-2": {
    "AdvancedWaf200Mbps": "ami-00665ee7689c90861",
    "AdvancedWaf25Mbps": "ami-0c163c7a07a285d0f",
    "AdvancedWaf3000Mbps": "ami-0b35ccd9406f1407d",
    "Best10000Mbps": "ami-011c5e1ee7cf0a28f",
    "Best1000Mbps": "ami-04c9f40f04918d2b0",
    "Best200Mbps": "ami-0550460dd9aacf4e2",
    "Best25Mbps": "ami-0f732e141070ed5ee",
    "Best5000Mbps": "ami-0ed5408c4bd9d05d1",
    "Better10000Mbps": "ami-0bd6cb6e6225846f2",
    "Better1000Mbps": "ami-04011e09789fb1063",
    "Better200Mbps": "ami-07f2d76a7d92693d7",
    "Better25Mbps": "ami-0b0ccb633f3037cd2",
    "Better5000Mbps": "ami-04e86352bba72a4ff",
    "Good10000Mbps": "ami-0a66324c124013682",
    "Good1000Mbps": "ami-078fb8ad1fe4c3c33",
    "Good200Mbps": "ami-0563309d0e708f2e7",
    "Good25Mbps": "ami-031ff224df7abcdf5",
    "Good5000Mbps": "ami-062626fdcd291ffda",
    "PerAppVeAwaf200Mbps": "ami-07c926fb87ab04089",
    "PerAppVeAwaf25Mbps": "ami-0efa41b2ab66183b5"
   }
  }
 },
 "Metadata": {
  "AWS::CloudFormation::Interface": {
   "ParameterGroups": [
    {
     "Label": {
      "default": "NETWORKING CONFIGURATION"
     },
     "Parameters": [
      "Vpc",
      "managementSubnetAz1",
      "managementSubnetAz1Address",
      "managementSubnetAz2",
      "subnet1Az1",
      "subnet1Az1Address",
      "subnet1Az2",
      "subnet2Az1",
      "subnet2Az1Address",
      "subnet2Az2",
      "availabilityZone1",
      "availabilityZone2",
      "numberOfAdditionalNics",
      "additionalNicLocation",
      "provisionPublicIP"
     ]
    },
    {
     "Label": {
      "default": "INSTANCE CONFIGURATION"
     },
     "Parameters": [
      "imageName",
      "customImageId",
      "instanceType",
      "applicationInstanceType",
      "licenseKey1",
      "licenseKey2",
      "managementGuiPort",
      "sshKey",
      "restrictedSrcAddress",
      "restrictedSrcAddressApp",
      "ntpServer",
      "timezone",
      "bigIpModules"
     ]
    },
    {
     "Label": {
      "default": "TAGS"
     },
     "Parameters": [
      "application",
      "environment",
      "group",
      "owner",
      "costcenter"
     ]
    },
    {},
    {
     "Label": {
      "default": "TEMPLATE ANALYTICS"
     },
     "Parameters": [
      "allowUsageAnalytics",
      "allowPhoneHome"
     ]
    },
    {
     "Label": {
      "default": "VIRTUAL SERVICE CONFIGURATION"
     },
     "Parameters": [
      "declarationUrl"
     ]
    }
   ],
   "ParameterLabels": {
    "Vpc": {
     "default": "VPC"
    },
    "additionalNicLocation": {
     "default": "Additional NIC Location"
    },
    "allowPhoneHome": {
     "default": "Send Anonymous Device Statistics to F5"
    },
    "allowUsageAnalytics": {
     "default": "Send Anonymous Template Statistics to F5"
    },
    "application": {
     "default": "Application"
    },
    "applicationInstanceType": {
     "default": "Application Instance Type"
    },
    "availabilityZone1": {
     "default": "Availability Zone 1"
    },
    "availabilityZone2": {
     "default": "Availability Zone 2"
    },
    "bigIpModules": {
     "default": "BIG-IP Modules"
    },
    "costcenter": {
     "default": "Cost Center"
    },
    "customImageId": {
     "default": "Custom Image Id"
    },
    "declarationUrl": {
     "default": "AS3 Declaration URL"
    },
    "environment": {
     "default": "Environment"
    },
    "group": {
     "default": "Group"
    },
    "imageName": {
     "default": "BIG-IP Image Name"
    },
    "instanceType": {
     "default": "AWS Instance Size"
    },
    "licenseKey1": {
     "default": "License Key 1"
    },
    "licenseKey2": {
     "default": "License Key 2"
    },
    "managementGuiPort": {
     "default": "BIG-IP Management Port"
    },
    "managementSubnetAz1": {
     "default": "Management Subnet AZ1"
    },
    "managementSubnetAz1Address": {
     "default": "Management Subnet AZ1 Static IP Address"
    },
    "managementSubnetAz2": {
     "default": "Management Subnet AZ2"
    },
    "ntpServer": {
     "default": "NTP Server"
    },
    "numberOfAdditionalNics": {
     "default": "Number Of Additional NICs"
    },
    "owner": {
     "default": "Owner"
    },
    "provisionPublicIP": {
     "default": "Provision Public IP addresses for the BIG-IP interfaces"
    },
    "restrictedSrcAddress": {
     "default": "Source Address(es) for Management Access"
    },
    "restrictedSrcAddressApp": {
     "default": "Source Address(es) for Web Application Access (80/443)"
    },
    "sshKey": {
     "default": "SSH Key"
    },
    "subnet1Az1": {
     "default": "Subnet1 in AZ1"
    },
    "subnet1Az1Address": {
     "default": "Subnet1 AZ1 Static IP Addresses"
    },
    "subnet1Az2": {
     "default": "Subnet1 in AZ2"
    },
    "subnet2Az1": {
     "default": "Subnet2 in AZ1"
    },
    "subnet2Az1Address": {
     "default": "Subnet2 AZ1 Static IP Address"
    },
    "subnet2Az2": {
     "default": "Subnet2 in AZ2"
    },
    "timezone": {
     "default": "Timezone (Olson)"
    }
   }
  },
  "Version": "6.1.0"
 },
 "Outputs": {
  "Bigip1ExternalInterfacePrivateIp": {
   "Description": "Internally routable IP of the public interface on BIG-IP",
   "Value": {
    "Fn::If": [
     "useDynamicExternalIpAddr",
     {
      "Fn::GetAtt": [
       "Bigip1subnet1Az1Interface",
       "PrimaryPrivateIpAddress"
      ]
     },
     {
      "Fn::GetAtt": [
       "Bigip1Staticsubnet1Az1Interface",
       "PrimaryPrivateIpAddress"
      ]
     }
    ]
   }
  },
  "Bigip1InstanceId": {
   "Description": "Instance Id of BIG-IP in Amazon",
   "Value": {
    "Ref": "Bigip1Instance"
   }
  },
  "Bigip1InternalInterface": {
   "Description": "Internal interface ID on BIG-IP",
   "Value": {
    "Fn::If": [
     "useDynamicInternalIpAddr",
     {
      "Ref": "Bigip1InternalInterface"
     },
     {
      "Ref": "Bigip1StaticInternalInterface"
     }
    ]
   }
  },
  "Bigip1InternalInterfacePrivateIp": {
   "Description": "Internally routable IP of internal interface on BIG-IP",
   "Value": {
    "Fn::If": [
     "useDynamicInternalIpAddr",
     {
      "Fn::GetAtt": [
       "Bigip1InternalInterface",
       "PrimaryPrivateIpAddress"
      ]
     },
     {
      "Fn::GetAtt": [
       "Bigip1StaticInternalInterface",
       "PrimaryPrivateIpAddress"
      ]
     }
    ]
   }
  },
  "Bigip1ManagementEipAddress": {
   "Condition": "usePublicIP",
   "Description": "IP address of the management port on BIG-IP",
   "Value": {
    "Ref": "Bigip1ManagementEipAddress"
   }
  },
  "Bigip1ManagementInterface": {
   "Condition": "usePublicIP",
   "Description": "Management interface ID on BIG-IP",
   "Value": {
    "Fn::If": [
     "useDynamicManagementIpAddr",
     {
      "Ref": "Bigip1ManagementInterface"
     },
     {
      "Ref": "Bigip1StaticManagementInterface"
     }
    ]
   }
  },
  "Bigip1ManagementInterfacePrivateIp": {
   "Condition": "usePublicIP",
   "Description": "Internally routable IP of the management interface on BIG-IP",
   "Value": {
    "Fn::If": [
     "useDynamicManagementIpAddr",
     {
      "Fn::GetAtt": [
       "Bigip1ManagementInterface",
       "PrimaryPrivateIpAddress"
      ]
     },
     {
      "Fn::GetAtt": [
       "Bigip1StaticManagementInterface",
       "PrimaryPrivateIpAddress"
      ]
     }
    ]
   }
  },
  "Bigip1Url": {
   "Condition": "usePublicIP",
   "Description": "BIG-IP Management GUI",
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Fn::GetAtt": [
        "Bigip1Instance",
        "PublicIp"
       ]
      }
     ]
    ]
   }
  },
  "Bigip1VipEipAddress": {
   "Condition": "usePublicIP",
   "Description": "EIP address for VIP",
   "Value": {
    "Fn::Join": [
     "",
     [
      "http://",
      {
       "Ref": "Bigip1VipEipAddress"
      },
      ":80"
     ]
    ]
   }
  },
  "Bigip1VipPrivateIp": {
   "Condition": "usePublicIP",
   "Description": "VIP on External Interface Secondary IP 1",
   "Value": {
    "Fn::If": [
     "useDynamicExternalIpAddr",
     {
      "Fn::Select": [
       "0",
       {
        "Fn::GetAtt": [
         "Bigip1subnet1Az1Interface",
         "SecondaryPrivateIpAddresses"
        ]
       }
      ]
     },
     {
      "Fn::Select": [
       "0",
       {
        "Fn::GetAtt": [
         "Bigip1Staticsubnet1Az1Interface",
         "SecondaryPrivateIpAddresses"
        ]
       }
      ]
     }
    ]
   }
  },
  "Bigip1subnet1Az1Interface": {
   "Description": "External interface Id on BIG-IP",
   "Value": {
    "Fn::If": [
     "useDynamicExternalIpAddr",
     {
      "Ref": "Bigip1subnet1Az1Interface"
     },
     {
      "Ref": "Bigip1Staticsubnet1Az1Interface"
     }
    ]
   }
  },
  "Bigip1subnet1Az1SelfEipAddress": {
   "Condition": "usePublicIP",
   "Description": "IP Address of the External interface attached to BIG-IP",
   "Value": {
    "Ref": "Bigip1subnet1Az1SelfEipAddress"
   }
  },
  "availabilityZone1": {
   "Description": "Availability Zone",
   "Value": {
    "Fn::GetAtt": [
     "Bigip1Instance",
     "AvailabilityZone"
    ]
   }
  },
  "bigipExternalSecurityGroup": {
   "Description": "Public or External Security Group",
   "Value": {
    "Ref": "bigipExternalSecurityGroup"
   }
  },
  "bigipInternalSecurityGroup": {
   "Description": "Private or Internal Security Group",
   "Value": {
    "Ref": "bigipInternalSecurityGroup"
   }
  },
  "bigipManagementSecurityGroup": {
   "Description": "Management Security Group",
   "Value": {
    "Ref": "bigipManagementSecurityGroup"
   }
  }
 },
 "Parameters": {
  "Vpc": {
   "ConstraintDescription": "This must be an existing VPC within the working region.",
   "Type": "AWS::EC2::VPC::Id"
  },
  "allowPhoneHome": {
   "AllowedValues": [
    "Yes",
    "No"
   ],
   "Default": "Yes",
   "Description": "This deployment can send anonymous device statistics to F5 to help us determine how to improve our solutions. If you select **No** statistics are not sent.",
   "Type": "String"
  },
  "allowUsageAnalytics": {
   "AllowedValues": [
    "Yes",
    "No"
   ],
   "Default": "Yes",
   "Description": "This deployment can send anonymous template statistics to F5 to help us determine how to improve our solutions. If you select **No** statistics are not sent.",
   "Type": "String"
  },
  "application": {
   "Default": "f5app",
   "Description": "Name of the Application Tag",
   "Type": "String"
  },
  "bigIpModules": {
   "Default": "ltm:nominal",
   "Description": "Comma separated list of modules and levels to provision, for example: ltm:nominal,asm:nominal",
   "Type": "String"
  },
  "costcenter": {
   "Default": "f5costcenter",
   "Description": "Name of the Cost Center Tag",
   "Type": "String"
  },
  "customImageId": {
   "ConstraintDescription": "Must be a valid AMI Id",
   "Default": "OPTIONAL",
   "Description": "If you would like to deploy using a custom BIG-IP image, provide the AMI Id.  **Note**: Unless specifically required, leave the default of **OPTIONAL**",
   "MaxLength": 255,
   "MinLength": 1,
   "Type": "String"
  },
  "declarationUrl": {
   "AllowedPattern": "^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$|^none$",
   "Default": "none",
   "Description": "URL for the AS3 declaration JSON file to be deployed. Leave as **none** to deploy without a service configuration.",
   "Type": "String"
  },
  "environment": {
   "Default": "f5env",
   "Description": "Name of the Environment Tag",
   "Type": "String"
  },
  "group": {
   "Default": "f5group",
   "Description": "Name of the Group Tag",
   "Type": "String"
  },
  "imageName": {
   "AllowedValues": [
    "Good25Mbps",
    "Good200Mbps",
    "Good1000Mbps",
    "Good5000Mbps",
    "Good10000Mbps",
    "Good16vCPU",
    "Better25Mbps",
    "Better200Mbps",
    "Better1000Mbps",
    "Better5000Mbps",
    "Better10000Mbps",
    "Best25Mbps",
    "Best200Mbps",
    "Best1000Mbps",
    "Best5000Mbps",
    "Best10000Mbps",
    "AdvancedWaf25Mbps",
    "AdvancedWaf200Mbps",
    "PerAppVeAwaf25Mbps",
    "PerAppVeAwaf200Mbps",
    "PerAppVeLtm25Mbps",
    "PerAppVeLtm200Mbps"
   ],
   "ConstraintDescription": "Must be a valid F5 BIG-IP VE image type",
   "Default": "Best1000Mbps",
   "Description": "F5 BIG-IP Performance Type",
   "Type": "String"
  },
  "instanceType": {
   "AllowedValues": [
    "m5.xlarge",
    "m5.4xlarge",
    "m5.large",
    "m5.12xlarge",
    "m4.xlarge",
    "m4.large",
    "m4.4xlarge",
    "m4.2xlarge",
    "m4.16xlarge",
    "m4.10xlarge",
    "m3.xlarge",
    "m3.medium",
    "m3.large",
    "t3.large",
    "m3.2xlarge",
    "cc2.8xlarge",
    "c5.xlarge",
    "c5.large",
    "c5.4xlarge",
    "c5.9xlarge",
    "c4.xlarge",
    "c4.8xlarge",
    "c4.4xlarge",
    "c4.2xlarge",
    "c3.xlarge",
    "c3.8xlarge",
    "c3.4xlarge",
    "c3.2xlarge",
    "c5n.2xlarge",
    "c5n.4xlarge"
   ],
   "ConstraintDescription": "Must be a valid EC2 instance type for BIG-IP",
   "Default": "m5.xlarge",
   "Description": "Size of the F5 BIG-IP Virtual Instance",
   "Type": "String"
  },
  "managementSubnetAz1": {
   "ConstraintDescription": "The subnet ID must be within an existing VPC",
   "Description": "Management Subnet ID",
   "Type": "AWS::EC2::Subnet::Id"
  },
  "managementSubnetAz1Address": {
   "Default": "DYNAMIC",
   "Description": "Optional. If you want to assign a static IP address in the subnet, type it here.  Otherwise leave DYNAMIC and a dynamic address is assigned based on the subnet you specified.",
   "Type": "String"
  },
  "ntpServer": {
   "Default": "0.pool.ntp.org",
   "Description": "NTP server for this implementation",
   "Type": "String"
  },
  "owner": {
   "Default": "f5owner",
   "Description": "Name of the Owner Tag",
   "Type": "String"
  },
  "provisionPublicIP": {
   "AllowedValues": [
    "Yes",
    "No"
   ],
   "Default": "Yes",
   "Description": "Whether or not to provision Public IP Addresses for the BIG-IP Network Interfaces. By Default no Public IP addresses are provisioned.",
   "Type": "String"
  },
  "restrictedSrcAddress": {
   "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
   "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x.",
   "Description": " The IP address range used to SSH and access managment GUI on the EC2 instances",
   "MaxLength": "18",
   "MinLength": "9",
   "Type": "String"
  },
  "restrictedSrcAddressApp": {
   "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
   "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x.",
   "Description": " The IP address range that can be used to access web traffic (80/443) to the EC2 instances",
   "MaxLength": "18",
   "MinLength": "9",
   "Type": "String"
  },
  "sshKey": {
   "Description": "EC2 KeyPair to enable SSH access to the BIG-IP instance",
   "Type": "AWS::EC2::KeyPair::KeyName"
  },
  "subnet1Az1": {
   "ConstraintDescription": "The subnet ID must be within an existing VPC",
   "Description": "Public or External subnet",
   "Type": "AWS::EC2::Subnet::Id"
  },
  "subnet1Az1Address": {
   "Default": "DYNAMIC",
   "Description": "Optional. If you want to assign static IP address(es) in the subnet, type them here.  Separate multiple IP addresses with a comma (the first is the Primary IP address, all others are Secondary).  Otherwise leave DYNAMIC and a dynamic address is assigned based on the subnet you specified.",
   "Type": "String"
  },
  "subnet2Az1": {
   "ConstraintDescription": "The subnet ID must be within an existing VPC",
   "Description": "Private or Internal subnet ID",
   "Type": "AWS::EC2::Subnet::Id"
  },
  "subnet2Az1Address": {
   "Default": "DYNAMIC",
   "Description": "Optional. If you want to assign a static IP address in the subnet, type it here.  Otherwise leave DYNAMIC and a dynamic address is assigned based on the subnet you specified.",
   "Type": "String"
  },
  "timezone": {
   "Default": "UTC",
   "Description": "Enter the Olson timezone string from /usr/share/zoneinfo. The default is 'UTC'. See the TZ column here (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) for legal values. For example, 'US/Eastern'.",
   "Type": "String"
  }
 },
 "Resources": {
  "Bigip1Instance": {
   "Metadata": {
    "AWS::CloudFormation::Init": {
     "config": {
      "commands": {
       "000-disable-1nicautoconfig": {
        "command": "/usr/bin/setdb provision.1nicautoconfig disable"
       },
       "010-install-libs": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "mkdir -p /var/log/cloud/aws;",
           "nohup /config/installCloudLibs.sh",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "040-network-config": {
        "command": {
         "Fn::Join": [
          "",
          [
           "GATEWAY_MAC=`cat /config/cloud/net1_mac | awk '{print tolower($2)}'`\n",
           "sleep 30 && TOKEN=`/usr/bin/curl -sS --retry 20 -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 120'`\n",
           "GATEWAY_CIDR_BLOCK=`/usr/bin/curl -s -f --retry 20 -H 'X-aws-ec2-metadata-token: '$TOKEN'' http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC}/subnet-ipv4-cidr-block`; ",
           "GATEWAY_NET=${GATEWAY_CIDR_BLOCK%/*}; ",
           "GATEWAY_PREFIX=${GATEWAY_CIDR_BLOCK#*/}; ",
           "GATEWAY=`echo ${GATEWAY_NET} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`; ",
           "GATEWAY_MAC2=`cat /config/cloud/net2_mac | awk '{print tolower($2)}'`\n",
           "GATEWAY_CIDR_BLOCK2=`/usr/bin/curl -s -f --retry 20 -H 'X-aws-ec2-metadata-token: '$TOKEN'' http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC2}/subnet-ipv4-cidr-block`; ",
           "GATEWAY_PREFIX2=${GATEWAY_CIDR_BLOCK2#*/}; ",
           "nohup /config/waitThenRun.sh ",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/network.js ",
           "--host localhost ",
           "-o /var/log/cloud/aws/network.log ",
           "--log-level silly ",
           "--signal NETWORK_CONFIG_DONE ",
           "--vlan name:external,nic:1.1 ",
           "--default-gw ${GATEWAY} ",
           "--self-ip name:external-self,address:",
           {
            "Fn::If": [
             "useDynamicExternalIpAddr",
             {
              "Fn::GetAtt": [
               "Bigip1subnet1Az1Interface",
               "PrimaryPrivateIpAddress"
              ]
             },
             {
              "Fn::GetAtt": [
               "Bigip1Staticsubnet1Az1Interface",
               "PrimaryPrivateIpAddress"
              ]
             }
            ]
           },
           "/${GATEWAY_PREFIX},vlan:external ",
           "--vlan name:internal,nic:1.2 ",
           "--self-ip name:internal-self,address:",
           {
            "Fn::If": [
             "useDynamicInternalIpAddr",
             {
              "Fn::GetAtt": [
               "Bigip1InternalInterface",
               "PrimaryPrivateIpAddress"
              ]
             },
             {
              "Fn::GetAtt": [
               "Bigip1StaticInternalInterface",
               "PrimaryPrivateIpAddress"
              ]
             }
            ]
           },
           "/${GATEWAY_PREFIX2},vlan:internal ",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "050-onboard-BIG-IP": {
        "command": {
         "Fn::If": [
          "optin",
          {
           "Fn::Join": [
            " ",
            [
             "REGION=\"",
             {
              "Ref": "AWS::Region"
             },
             "\";",
             "DEPLOYMENTID=`echo \"",
             {
              "Ref": "AWS::StackId"
             },
             "\"|sha512sum|cut -d \" \" -f 1`;",
             "CUSTOMERID=`echo \"",
             {
              "Ref": "AWS::AccountId"
             },
             "\"|sha512sum|cut -d \" \" -f 1`;",
             "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth0`;",
             "nohup /config/waitThenRun.sh",
             "TOKEN=`/usr/bin/curl -sS --retry 20 -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 120'`;",
             "HOSTNAME=`/usr/bin/curl -sS --retry 20 -H 'X-aws-ec2-metadata-token: '$TOKEN'' http://169.254.169.254/latest/meta-data/hostname`;",
             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
             "--wait-for NETWORK_CONFIG_DONE",
             "--signal ONBOARD_DONE",
             "-o /var/log/cloud/aws/onboard.log",
             "--log-level silly",
             "--no-reboot",
             "--host localhost",
             "--hostname ${HOSTNAME}",
             "--ntp ",
             {
              "Ref": "ntpServer"
             },
             "--tz ",
             {
              "Ref": "timezone"
             },
             "--dns ${NAME_SERVER}",
             "--modules ",
             {
              "Ref": "bigIpModules"
             },
             "--metrics \"cloudName:aws,region:${REGION},bigIpVersion:16.1.3.1-0.0.11,customerId:${CUSTOMERID},deploymentId:${DEPLOYMENTID},templateName:f5-existing-stack-payg-3nic-bigip.template,templateVersion:6.1.0,licenseType:hourly\"",
             "-d tm.tcpudptxchecksum:software-only ",
             "--ping",
             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          },
          {
           "Fn::Join": [
            " ",
            [
             "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth0`;",
             "nohup /config/waitThenRun.sh",
             "TOKEN=`/usr/bin/curl -sS --retry 20 -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 120'`;",
             "HOSTNAME=`/usr/bin/curl -sS --retry 20 -H 'X-aws-ec2-metadata-token: '$TOKEN'' http://169.254.169.254/latest/meta-data/hostname`;",
             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
             "--wait-for NETWORK_CONFIG_DONE",
             "--signal ONBOARD_DONE",
             "-o /var/log/cloud/aws/onboard.log",
             "--log-level silly",
             "--no-reboot",
             "--host localhost",
             "--hostname ${HOSTNAME}",
             "--ntp ",
             {
              "Ref": "ntpServer"
             },
             "--tz ",
             {
              "Ref": "timezone"
             },
             "--dns ${NAME_SERVER}",
             "--modules ",
             {
              "Ref": "bigIpModules"
             },
             "-d tm.tcpudptxchecksum:software-only ",
             "--ping",
             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          }
         ]
        }
       },
       "055-custom-config": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           "--file /config/cloud/aws/custom-config.sh",
           "--cwd /config/cloud/aws",
           "-o /var/log/cloud/aws/custom-config.log",
           "--log-level silly",
           "--wait-for ONBOARD_DONE",
           "--signal CUSTOM_CONFIG_DONE",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "060-cluster": {
        "command": {
         "Fn::Join": [
          " ",
          []
         ]
        }
       },
       "065-cfe": {
        "command": {
         "Fn::Join": [
          " ",
          []
         ]
        }
       }
      },
      "files": {
       "/config/cloud/aws/custom-config.sh": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "TOKEN=`/usr/bin/curl -sS --retry 20 -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 120'`\n",
           "PROGNAME=$(basename $0)\n",
           "function error_exit {\n",
           "echo \"${PROGNAME}: ${1:-\\\"Unknown Error\\\"}\" 1>&2\n",
           "exit 1\n",
           "}\n",
           "declare -a tmsh=()\n",
           "echo 'starting custom-config.sh'\n",
           "source /config/cloud/aws/onboard_config_vars\n",
           "if [[ $allowPhoneHome == \"No\" ]]; then\n",
           "    tmsh+=(\n",
           "    \"tmsh modify sys software update auto-phonehome disabled\")\n",
           "fi\n",
           "tmsh+=(\n",
           "\"tmsh save /sys config\")\n",
           "for CMD in \"${tmsh[@]}\"\n",
           "do\n",
           "  \"/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/waitForMcp.sh\"\n",
           "    if $CMD;then\n",
           "        echo \"command $CMD successfully executed.\"\n",
           "    else\n",
           "        error_exit \"$LINENO: An error has occurred while executing $CMD. Aborting!\"\n",
           "    fi\n",
           "done\n",
           "date\n",
           "### START CUSTOM CONFIGURATION\n",
           "deployed=\"no\"\n",
           "url_regex=\"(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$\"\n",
           "file_loc=\"/config/cloud/custom_config\"\n",
           "if [[ $declarationUrl =~ $url_regex ]]; then\n",
           "  response_code=$(/usr/bin/curl -sk -w \"%{http_code}\" $declarationUrl -o $file_loc)\n",
           "  if [[ $response_code == 200 ]]; then\n",
           "    echo \"Custom config download complete; checking for valid JSON.\"\n",
           "    cat $file_loc | jq .class\n",
           "    if [[ $? == 0 ]]; then\n",
           "      response_code=$(/usr/bin/curl -svvu admin: -w \"%{http_code}\" -X POST -H \"Content-Type: application/json\" -H \"Expect:\" http://localhost:8100/mgmt/shared/appsvcs/declare -d @$file_loc -o /dev/null)\n",
           "      if [[ $response_code == 200 || $response_code == 502 ]]; then\n",
           "        echo \"Deployment of custom application succeeded.\"\n",
           "        deployed=\"yes\"\n",
           "      else\n",
           "         echo \"Failed to deploy custom application; continuing...\"\n",
           "      fi\n",
           "    else\n",
           "      echo \"Custom config was not valid JSON, continuing...\"\n",
           "    fi\n",
           "  else\n",
           "    echo \"Failed to download custom config; continuing...\"\n",
           "  fi\n",
           "else\n",
           "  echo \"Custom config was not a URL, continuing...\"\n",
           "fi\n",
           "### END CUSTOM CONFIGURATION"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/getNameServer.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "INTERFACE=$1",
           "INTERFACE_MAC=`ifconfig ${INTERFACE} | egrep ether | awk '{print tolower($2)}'`",
           "TOKEN=`/usr/bin/curl -sS --retry 20 -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 120'`",
           "VPC_CIDR_BLOCK=`/usr/bin/curl -s -f --retry 20 -H 'X-aws-ec2-metadata-token: '$TOKEN'' http://169.254.169.254/latest/meta-data/network/interfaces/macs/${INTERFACE_MAC}/vpc-ipv4-cidr-block`",
           "VPC_NET=${VPC_CIDR_BLOCK%/*}",
           "NAME_SERVER=`echo ${VPC_NET} | awk -F. '{ printf \"%d.%d.%d.%d\", $1, $2, $3, $4+2 }'`",
           "echo $NAME_SERVER"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/onboard_config_vars": {
        "content": {
         "Fn::Join": [
          "",
          [
           "",
           "#!/bin/bash\n",
           "# Generated from 6.1.0\n",
           "TOKEN=`/usr/bin/curl -sS --retry 20 -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 120'`\n",
           "HOSTNAME=`/usr/bin/curl -sS --retry 20 -H 'X-aws-ec2-metadata-token: '$TOKEN'' http://169.254.169.254/latest/meta-data/hostname`\n",
           "region='",
           {
            "Ref": "AWS::Region"
           },
           "'\n",
           "adminUsername='srv_user'\n",
           "timezone='",
           {
            "Ref": "timezone"
           },
           "'\n",
           "ntpServer='",
           {
            "Ref": "ntpServer"
           },
           "'\n",
           "declarationUrl='",
           {
            "Ref": "declarationUrl"
           },
           "'\n",
           "allowPhoneHome='",
           {
            "Ref": "allowPhoneHome"
           },
           "'\n",
           "passwd=$(f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/decryptDataFromFile.js --data-file /config/cloud/aws/.adminPassword)\n",
           "managementGuiPort='443'\n"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/f5-cloud-libs-aws.tar.gz": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "http://cdn.f5.com/product/cloudsolutions/f5-cloud-libs-aws/v2.10.1/f5-cloud-libs-aws.tar.gz"
       },
       "/config/cloud/f5-cloud-libs.tar.gz": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "http://cdn.f5.com/product/cloudsolutions/f5-cloud-libs/v4.27.1/f5-cloud-libs.tar.gz"
       },
       "/config/installCloudLibs.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "#!/bin/bash",
           "echo about to execute",
           "checks=0",
           "while [ $checks -lt 120 ]; do echo checking mcpd",
           "    tmsh -a show sys mcp-state field-fmt | grep -q running",
           "    if [ $? == 0 ]; then",
           "        echo mcpd ready",
           "        break",
           "    fi",
           "    echo mcpd not ready yet",
           "    let checks=checks+1",
           "    sleep 10",
           "done",
           "echo loading verifyHash script",
           "if ! tmsh load sys config merge file /config/verifyHash; then",
           "    echo cannot validate signature of /config/verifyHash",
           "    exit",
           "fi",
           "echo loaded verifyHash",
           "declare -a filesToVerify=(\"/config/cloud/f5-cloud-libs.tar.gz\" \"/config/cloud/f5-cloud-libs-aws.tar.gz\")",
           "for fileToVerify in \"${filesToVerify[@]}\"",
           "do",
           "    echo verifying \"$fileToVerify\"",
           "    if ! tmsh run cli script verifyHash \"$fileToVerify\"; then",
           "        echo \"$fileToVerify\" is not valid",
           "        exit 1",
           "    fi",
           "    echo verified \"$fileToVerify\"",
           "done",
           "mkdir -p /config/cloud/aws/node_modules/@f5devcentral",
           "echo expanding f5-cloud-libs.tar.gz",
           "tar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
           "echo installing dependencies",
           "tar xvfz /config/cloud/f5-cloud-libs-aws.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
           "echo cloud libs install complete",
           "touch /config/cloud/cloudLibsReady"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/verifyHash": {
        "content": "cli script /Common/verifyHash {\nproc script::run {} {\n        if {[catch {\n            set hashes(f5-cloud-libs.tar.gz) 32dbb0e602b8a9dc8b492e52dcd61b47ba62f4f70cdb2c6162694b8b6bdde6f2684d0747878a89e966dff78dbec02d98b682aa108cba5b024195561189c61c06\n            set hashes(f5-cloud-libs-aws.tar.gz) c2eadf04a910e28a52c21e1b9af9015b5a4e5a50501bc0dfbd354d03d08d5a82fe8c0326dd4138b835ff88fc17232e957b8f2d3fb031ed1809fd3d0b973afe09\n            set hashes(f5-cloud-libs-azure.tar.gz) 703bae0e774114b16528ca71bb2109db5f36623f8b8698588348677862ffa48559ba9698001d2f245860059a4fec588a15ee924317b967bf338cca66b0de6936\n            set hashes(f5-cloud-libs-gce.tar.gz) fd16ab827b3089e76d5c77c713a2eabe685707dba7207cfdf2778db2e96281fc8e3e4424fb20f584c44cb9722b4fbf352e7c364de5fed61a74bd138f974705b2\n            set hashes(f5-cloud-libs-openstack.tar.gz) 5c83fe6a93a6fceb5a2e8437b5ed8cc9faf4c1621bfc9e6a0779f6c2137b45eab8ae0e7ed745c8cf821b9371245ca29749ca0b7e5663949d77496b8728f4b0f9\n            set hashes(f5-cloud-libs-consul.tar.gz) a32aab397073df92cbbba5067e5823e9b5fafca862a258b60b6b40aa0975c3989d1e110f706177b2ffbe4dde65305a260a5856594ce7ad4ef0c47b694ae4a513\n            set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0\n            set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034\n            set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe\n            set hashes(f5.http.v1.2.0rc7.tmpl) 21f413342e9a7a281a0f0e1301e745aa86af21a697d2e6fdc21dd279734936631e92f34bf1c2d2504c201f56ccd75c5c13baa2fe7653213689ec3c9e27dff77d\n            set hashes(f5.aws_advanced_ha.v1.3.0rc1.tmpl) 9e55149c010c1d395abdae3c3d2cb83ec13d31ed39424695e88680cf3ed5a013d626b326711d3d40ef2df46b72d414b4cb8e4f445ea0738dcbd25c4c843ac39d\n            set hashes(f5.aws_advanced_ha.v1.4.0rc1.tmpl) de068455257412a949f1eadccaee8506347e04fd69bfb645001b76f200127668e4a06be2bbb94e10fefc215cfc3665b07945e6d733cbe1a4fa1b88e881590396\n            set hashes(f5.aws_advanced_ha.v1.4.0rc2.tmpl) 6ab0bffc426df7d31913f9a474b1a07860435e366b07d77b32064acfb2952c1f207beaed77013a15e44d80d74f3253e7cf9fbbe12a90ec7128de6facd097d68f\n            set hashes(f5.aws_advanced_ha.v1.4.0rc3.tmpl) 2f2339b4bc3a23c9cfd42aae2a6de39ba0658366f25985de2ea53410a745f0f18eedc491b20f4a8dba8db48970096e2efdca7b8efffa1a83a78e5aadf218b134\n            set hashes(f5.aws_advanced_ha.v1.4.0rc4.tmpl) 2418ac8b1f1884c5c096cbac6a94d4059aaaf05927a6a4508fd1f25b8cc6077498839fbdda8176d2cf2d274a27e6a1dae2a1e3a0a9991bc65fc74fc0d02ce963\n            set hashes(f5.aws_advanced_ha.v1.4.0rc5.tmpl) 5e582187ae1a6323e095d41eddd41151d6bd38eb83c634410d4527a3d0e246a8fc62685ab0849de2ade62b0275f51264d2deaccbc16b773417f847a4a1ea9bc4\n            set hashes(asm-policy.tar.gz) 2d39ec60d006d05d8a1567a1d8aae722419e8b062ad77d6d9a31652971e5e67bc4043d81671ba2a8b12dd229ea46d205144f75374ed4cae58cefa8f9ab6533e6\n            set hashes(deploy_waf.sh) 1a3a3c6274ab08a7dc2cb73aedc8d2b2a23cd9e0eb06a2e1534b3632f250f1d897056f219d5b35d3eed1207026e89989f754840fd92969c515ae4d829214fb74\n            set hashes(f5.policy_creator.tmpl) 06539e08d115efafe55aa507ecb4e443e83bdb1f5825a9514954ef6ca56d240ed00c7b5d67bd8f67b815ee9dd46451984701d058c89dae2434c89715d375a620\n            set hashes(f5.service_discovery.tmpl) 4811a95372d1dbdbb4f62f8bcc48d4bc919fa492cda012c81e3a2fe63d7966cc36ba8677ed049a814a930473234f300d3f8bced2b0db63176d52ac99640ce81b\n            set hashes(f5.cloud_logger.v1.0.0.tmpl) 64a0ed3b5e32a037ba4e71d460385fe8b5e1aecc27dc0e8514b511863952e419a89f4a2a43326abb543bba9bc34376afa114ceda950d2c3bd08dab735ff5ad20\n            set hashes(f5-appsvcs-3.5.1-5.noarch.rpm) ba71c6e1c52d0c7077cdb25a58709b8fb7c37b34418a8338bbf67668339676d208c1a4fef4e5470c152aac84020b4ccb8074ce387de24be339711256c0fa78c8\n            set hashes(f5-appsvcs-3.18.0-4.noarch.rpm) e72ee8005a27070ac399ab097e8aa507a72aae4721d7491589cfeb821db3ef86cbc979e796ab319ec727bb51400ccda813c4b9eb4a6b3d1220a396b582f8f400\n            set hashes(f5-appsvcs-3.20.0-3.noarch.rpm) d4bba8892a2068bb53f88c6090dc65f17707abca35a7ed2fff39980057fe7f7a2ebf710ab2284a1d83d70b7746beabad9df603017c0fd8728f7457661c95ac8d\n            set hashes(f5-appsvcs-3.25.0-3.noarch.rpm) 26f19bdaaa81cbe0421b3e08c09987f9dd0c54b05a626d6a21a836b34248d2d9d83095f0daad8e7a4a068e9ef99b89fbcd246ae8b617ac2b2456599157d0e8b3\n            set hashes(f5-appsvcs-3.26.1-1.noarch.rpm) b460e11679d38a96549b5041def27b419f1a41c8f788f9f8c7a034aa5cb5a8c9fd151c7c439bebd093fcd85cd8657f1c064551d9337566f9fc7e9506c55dc02c\n            set hashes(f5-appsvcs-3.31.0-6.noarch.rpm) 6506fde5d1c2e067662b513387dccda0281d3bbc604fc6dcf8e5740ae563748899f7f335e349006fe3f0e751cd70d4ef8be3701ae45dca305de649f259f090a9\n            set hashes(f5-cloud-failover-1.1.0-0.noarch.rpm) 15a440c299f9e4af86a3d0f5b0d75b0054385b95e47c3ef116d2e0bfb0041a26dcbf549028e2a26d2c718ec61446bd657be38fbbcd9db781efe5414c174ac68c\n            set hashes(f5-cloud-failover-1.3.0-0.noarch.rpm) 19681eb33d9f910c913f8180199485eb653b4b5ebeaae0b90a6ce8341d7a22fed8d21815b5ba148c468852d20cc26fad4c4242e50ecc184f1f8770dacced6f6a\n            set hashes(f5-cloud-failover-1.4.0-0.noarch.rpm) 49e9108a070e0c8713aeb7b330662358542e61b7c53a9d45108d37a9bf5246f9e4aaae10cc61064801dcccd20bfd5108347b0f694510e7ece07f96c45ba683b0\n            set hashes(f5-cloud-failover-1.5.0-0.noarch.rpm) 33a7e2d047106bcce681757a65240bfacedd48e13567e05fdb23a4b269d266aa5001f81158c3964dc297f0428db31c9df428002898d190285b349c59422a573b\n            set hashes(f5-cloud-failover-1.6.1-1.noarch.rpm) c1b842da21b8d1ba21b6eb63c8598a9ea9986d5daddc21e4d280e1d6b09d3db1de8ac7de5c84edf07b43e4af03daf8fe747a4048f6573d955206352cde2cec65\n            set hashes(f5-cloud-failover-1.7.1-1.noarch.rpm) 14ff0cd2bb49780cc0ae3021c4fc8fcc096e3fce2258096a4aa026d6d37de728ca7345bfe3a79031e336e74d25a2b40ff28324c2c752bf0ee71b7fc89b6fc8fe\n            set hashes(f5-cloud-failover-1.8.0-0.noarch.rpm) 23086d1cbf3cb24eac7eba2305156c600fa21f1b896321a2fa5225d331d7e41471edb3f5368144d86848a4520b1e005c014485ff451e7da6429053f58bfe8ce4\n            set hashes(f5-cloud-failover-1.9.0-0.noarch.rpm) 09c15377389ac18313370635fb99f9aff05970807cc60bff074f80f664023cfc0d9f5b7f2ed7a8f879deb2da84a034bb9fa9f4e95f9806d644af518db32f1425\n\n            set file_path [lindex $tmsh::argv 1]\n            set file_name [file tail $file_path]\n\n            if {![info exists hashes($file_name)]} {\n                tmsh::log err \"No hash found for $file_name\"\n                exit 1\n            }\n\n            set expected_hash $hashes($file_name)\n            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]\n            if { $expected_hash eq $computed_hash } {\n                exit 0\n            }\n            tmsh::log err \"Hash does not match for $file_path\"\n            exit 1\n        }]} {\n            tmsh::log err {Unexpected error in verifyHash}\n            exit 1\n        }\n    }\n    script-signature X7djuj51rcPDqOQfTUMmV6Qg8gSjD4UnhrHAMkP0oFDTSDigD+s49RMbK05inVzbq+wqjWC2Rlsz1bfreGy35DzIBQo0k8hCOr2JNXAOXOp45LfVgqq+c1NgjsHo54ogvHRixLxo2wo3QBX9SJzktr3zgj6BTHoU95R76497hmaeJ96EYz+3d78tO64ORbtzizlMV9xfBFYzgW0SPT644Rer65DstCMbQcDNqHv71BnKfshfu5Ta2qXUmn8ZNBOdcdSOng+E05/rURDEFU7NJ0j7mkn3UbY8F9WNKkyL+098FitD/l+gD3VpFaFwFKIOvorz8fWfWT+u4GQF3MvRdg==\n    signing-key /Common/f5-irule\n}",
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/waitThenRun.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "#!/bin/bash",
           "while true; do echo \"waiting for cloud libs install to complete\"",
           "    if [ -f /config/cloud/cloudLibsReady ]; then",
           "        break",
           "    else",
           "        sleep 10",
           "    fi",
           "done",
           "\"$@\""
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       }
      }
     }
    }
   },
   "Properties": {
    "BlockDeviceMappings": [
     {
      "DeviceName": "/dev/xvda",
      "Ebs": {
       "DeleteOnTermination": true,
       "VolumeSize": 100,
       "VolumeType": "gp2"
      }
     },
     {
      "DeviceName": "/dev/xvdb",
      "NoDevice": {}
     }
    ],
    "IamInstanceProfile": {
     "Ref": "bigipServiceDiscoveryProfile"
    },
    "ImageId": {
     "Fn::If": [
      "noCustomImageId",
      {
       "Fn::FindInMap": [
        "BigipRegionMap",
        {
         "Ref": "AWS::Region"
        },
        {
         "Ref": "imageName"
        }
       ]
      },
      {
       "Ref": "customImageId"
      }
     ]
    },
    "InstanceType": {
     "Ref": "instanceType"
    },
    "KeyName": {
     "Ref": "sshKey"
    },
    "NetworkInterfaces": [
     {
      "Description": "Management Interface",
      "DeviceIndex": "0",
      "NetworkInterfaceId": {
       "Fn::If": [
        "useDynamicManagementIpAddr",
        {
         "Ref": "Bigip1ManagementInterface"
        },
        {
         "Ref": "Bigip1StaticManagementInterface"
        }
       ]
      }
     },
     {
      "Description": "Public or External Interface",
      "DeviceIndex": "1",
      "NetworkInterfaceId": {
       "Fn::If": [
        "useDynamicExternalIpAddr",
        {
         "Ref": "Bigip1subnet1Az1Interface"
        },
        {
         "Ref": "Bigip1Staticsubnet1Az1Interface"
        }
       ]
      }
     },
     {
      "Description": "Private or Internal Interface",
      "DeviceIndex": "2",
      "NetworkInterfaceId": {
       "Fn::If": [
        "useDynamicInternalIpAddr",
        {
         "Ref": "Bigip1InternalInterface"
        },
        {
         "Ref": "Bigip1StaticInternalInterface"
        }
       ]
      }
     }
    ],
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "application"
      }
     },
     {
      "Key": "Costcenter",
      "Value": {
       "Ref": "costcenter"
      }
     },
     {
      "Key": "Environment",
      "Value": {
       "Ref": "environment"
      }
     },
     {
      "Key": "Group",
      "Value": {
       "Ref": "group"
      }
     },
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "Big-IP: ",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     },
     {
      "Key": "Owner",
      "Value": {
       "Ref": "owner"
      }
     }
    ],
    "UserData": {
     "Fn::Base64": {
      "Fn::Join": [
       "",
       [
        "#!/bin/bash\n",
        "mkdir -p /var/log/cloud /config/cloud /var/config/rest/downloads\n",
        "/usr/bin/setdb provision.extramb 1000\n",
        "/usr/bin/setdb restjavad.useextramb true\n",
        "cat << EOF >> /config/cloud/runtime-init-config.yaml\n",
        "controls:\n",
        "  logLevel: info\n",
        "  logFilename: /var/log/cloud/bigIpRuntimeInit.log\n",
        "pre_onboard_enabled:\n",
        "  - name: get_ifconfig\n",
        "    type: inline\n",
        "    commands:\n",
        "      - ifconfig eth1 | grep ether > /config/cloud/net1_mac || exit 0\n",
        "      - ifconfig eth2 | grep ether > /config/cloud/net2_mac || exit 0\n",
        "      - ifconfig eth3 | grep ether > /config/cloud/net3_mac || exit 0\n",
        "      - ifconfig eth4 | grep ether > /config/cloud/net4_mac || exit 0\n",
        "      - ifconfig eth5 | grep ether > /config/cloud/net5_mac || exit 0\n",
        "      - ifconfig eth6 | grep ether > /config/cloud/net6_mac || exit 0\n",
        "      - ifconfig eth7 | grep ether > /config/cloud/net7_mac || exit 0\n",
        "extension_packages:\n",
        "  install_operations:\n",
        "    - extensionType: as3\n",
        "      extensionVersion: 3.36.1\n",
        "      extensionHash: 48876a92d3d8fe7da70310882dc9fd1499d209579d798394715e18c12138daf3\n",
        "EOF\n",
        "/usr/bin/curl -fv --retry 1 --connect-timeout 5 -L http://cdn.f5.com/product/cloudsolutions/f5-bigip-runtime-init/v1.5.1/dist/f5-bigip-runtime-init-1.5.1-1.gz.run -o /var/config/rest/downloads/f5-bigip-runtime-init-1.5.1-1.gz.run\n",
        "bash /var/config/rest/downloads/f5-bigip-runtime-init-1.5.1-1.gz.run -- '--cloud aws'\n",
        "f5-bigip-runtime-init --config-file /config/cloud/runtime-init-config.yaml --skip-telemetry\n",
        "/opt/aws/apitools/cfn-init/bin/cfn-init -v -s ",
        {
         "Ref": "AWS::StackId"
        },
        " -r ",
        "Bigip1Instance",
        " --region ",
        {
         "Ref": "AWS::Region"
        },
        "\n"
       ]
      ]
     }
    }
   },
   "Type": "AWS::EC2::Instance"
  },
  "Bigip1InternalInterface": {
   "Condition": "useDynamicInternalIpAddr",
   "Properties": {
    "Description": "Internal Interface for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipInternalSecurityGroup"
     }
    ],
    "SubnetId": {
     "Ref": "subnet2Az1"
    }
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip1ManagementEipAddress": {
   "Condition": "usePublicIP",
   "Properties": {
    "Domain": "vpc"
   },
   "Type": "AWS::EC2::EIP"
  },
  "Bigip1ManagementEipAssociation": {
   "Condition": "usePublicIP",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "Bigip1ManagementEipAddress",
      "AllocationId"
     ]
    },
    "NetworkInterfaceId": {
     "Fn::If": [
      "useDynamicManagementIpAddr",
      {
       "Ref": "Bigip1ManagementInterface"
      },
      {
       "Ref": "Bigip1StaticManagementInterface"
      }
     ]
    }
   },
   "Type": "AWS::EC2::EIPAssociation"
  },
  "Bigip1ManagementInterface": {
   "Condition": "useDynamicManagementIpAddr",
   "Properties": {
    "Description": "Management Interface for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipManagementSecurityGroup"
     }
    ],
    "SubnetId": {
     "Ref": "managementSubnetAz1"
    }
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip1StaticInternalInterface": {
   "Condition": "useStaticInternalIpAddr",
   "Properties": {
    "Description": "Internal Interface for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipInternalSecurityGroup"
     }
    ],
    "PrivateIpAddress": {
     "Ref": "subnet2Az1Address"
    },
    "SubnetId": {
     "Ref": "subnet2Az1"
    }
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip1StaticManagementInterface": {
   "Condition": "useStaticManagementIpAddr",
   "Properties": {
    "Description": "Management Interface for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipManagementSecurityGroup"
     }
    ],
    "PrivateIpAddress": {
     "Ref": "managementSubnetAz1Address"
    },
    "SubnetId": {
     "Ref": "managementSubnetAz1"
    }
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip1Staticsubnet1Az1Interface": {
   "Condition": "useStaticExternalIpAddr",
   "Properties": {
    "Description": "Public External Interface for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipExternalSecurityGroup"
     }
    ],
    "PrivateIpAddresses": [
     {
      "Primary": true,
      "PrivateIpAddress": {
       "Fn::Select": [
        "0",
        {
         "Fn::Split": [
          ",",
          {
           "Ref": "subnet1Az1Address"
          }
         ]
        }
       ]
      }
     },
     {
      "Primary": false,
      "PrivateIpAddress": {
       "Fn::Select": [
        "1",
        {
         "Fn::Split": [
          ",",
          {
           "Ref": "subnet1Az1Address"
          }
         ]
        }
       ]
      }
     }
    ],
    "SubnetId": {
     "Ref": "subnet1Az1"
    }
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip1VipEipAddress": {
   "Condition": "usePublicIP",
   "Properties": {
    "Domain": "vpc"
   },
   "Type": "AWS::EC2::EIP"
  },
  "Bigip1VipEipAssociation": {
   "Condition": "usePublicIP",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "Bigip1VipEipAddress",
      "AllocationId"
     ]
    },
    "NetworkInterfaceId": {
     "Fn::If": [
      "useDynamicExternalIpAddr",
      {
       "Ref": "Bigip1subnet1Az1Interface"
      },
      {
       "Ref": "Bigip1Staticsubnet1Az1Interface"
      }
     ]
    },
    "PrivateIpAddress": {
     "Fn::If": [
      "useDynamicExternalIpAddr",
      {
       "Fn::Select": [
        "0",
        {
         "Fn::GetAtt": [
          "Bigip1subnet1Az1Interface",
          "SecondaryPrivateIpAddresses"
         ]
        }
       ]
      },
      {
       "Fn::Select": [
        "0",
        {
         "Fn::GetAtt": [
          "Bigip1Staticsubnet1Az1Interface",
          "SecondaryPrivateIpAddresses"
         ]
        }
       ]
      }
     ]
    }
   },
   "Type": "AWS::EC2::EIPAssociation"
  },
  "Bigip1subnet1Az1Interface": {
   "Condition": "useDynamicExternalIpAddr",
   "Properties": {
    "Description": "Public External Interface for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipExternalSecurityGroup"
     }
    ],
    "SecondaryPrivateIpAddressCount": 1,
    "SubnetId": {
     "Ref": "subnet1Az1"
    }
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip1subnet1Az1SelfEipAddress": {
   "Condition": "usePublicIP",
   "Properties": {
    "Domain": "vpc"
   },
   "Type": "AWS::EC2::EIP"
  },
  "Bigip1subnet1Az1SelfEipAssociation": {
   "Condition": "usePublicIP",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "Bigip1subnet1Az1SelfEipAddress",
      "AllocationId"
     ]
    },
    "NetworkInterfaceId": {
     "Fn::If": [
      "useDynamicExternalIpAddr",
      {
       "Ref": "Bigip1subnet1Az1Interface"
      },
      {
       "Ref": "Bigip1Staticsubnet1Az1Interface"
      }
     ]
    },
    "PrivateIpAddress": {
     "Fn::If": [
      "useDynamicExternalIpAddr",
      {
       "Fn::GetAtt": [
        "Bigip1subnet1Az1Interface",
        "PrimaryPrivateIpAddress"
       ]
      },
      {
       "Fn::GetAtt": [
        "Bigip1Staticsubnet1Az1Interface",
        "PrimaryPrivateIpAddress"
       ]
      }
     ]
    }
   },
   "Type": "AWS::EC2::EIPAssociation"
  },
  "bigipExternalSecurityGroup": {
   "Properties": {
    "GroupDescription": "Public or external interface rules",
    "SecurityGroupIngress": [
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddressApp"
      },
      "FromPort": 80,
      "IpProtocol": "tcp",
      "ToPort": 80
     },
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddressApp"
      },
      "FromPort": 443,
      "IpProtocol": "tcp",
      "ToPort": 443
     }
    ],
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "application"
      }
     },
     {
      "Key": "Costcenter",
      "Value": {
       "Ref": "costcenter"
      }
     },
     {
      "Key": "Environment",
      "Value": {
       "Ref": "environment"
      }
     },
     {
      "Key": "Group",
      "Value": {
       "Ref": "group"
      }
     },
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "Bigip External Security Group:",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     },
     {
      "Key": "Owner",
      "Value": {
       "Ref": "owner"
      }
     }
    ],
    "VpcId": {
     "Ref": "Vpc"
    }
   },
   "Type": "AWS::EC2::SecurityGroup"
  },
  "bigipInternalSecurityGroup": {
   "Properties": {
    "GroupDescription": "Allow All from Intra-VPC only",
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "application"
      }
     },
     {
      "Key": "Costcenter",
      "Value": {
       "Ref": "costcenter"
      }
     },
     {
      "Key": "Environment",
      "Value": {
       "Ref": "environment"
      }
     },
     {
      "Key": "Group",
      "Value": {
       "Ref": "group"
      }
     },
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "Bigip Internal Security Group:",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     },
     {
      "Key": "Owner",
      "Value": {
       "Ref": "owner"
      }
     }
    ],
    "VpcId": {
     "Ref": "Vpc"
    }
   },
   "Type": "AWS::EC2::SecurityGroup"
  },
  "bigipManagementSecurityGroup": {
   "Properties": {
    "GroupDescription": "BIG-IP management interface policy",
    "SecurityGroupIngress": [
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddress"
      },
      "FromPort": 22,
      "IpProtocol": "tcp",
      "ToPort": 22
     },
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddress"
      },
      "FromPort": 443,
      "IpProtocol": "tcp",
      "ToPort": 443
     }
    ],
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "application"
      }
     },
     {
      "Key": "Costcenter",
      "Value": {
       "Ref": "costcenter"
      }
     },
     {
      "Key": "Environment",
      "Value": {
       "Ref": "environment"
      }
     },
     {
      "Key": "Group",
      "Value": {
       "Ref": "group"
      }
     },
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "Bigip Management Security Group:",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     },
     {
      "Key": "Owner",
      "Value": {
       "Ref": "owner"
      }
     }
    ],
    "VpcId": {
     "Ref": "Vpc"
    }
   },
   "Type": "AWS::EC2::SecurityGroup"
  },
  "bigipServiceDiscoveryAccessRole": {
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "ec2.amazonaws.com"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Path": "/",
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "ec2:DescribeInstances",
          "ec2:DescribeInstanceStatus",
          "ec2:DescribeAddresses",
          "ec2:AssociateAddress",
          "ec2:DisassociateAddress",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeNetworkInterfaceAttribute",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSubnets",
          "ec2:AssignPrivateIpAddresses"
         ],
         "Effect": "Allow",
         "Resource": [
          "*"
         ]
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "BigipServiceDiscoveryPolicy"
     }
    ]
   },
   "Type": "AWS::IAM::Role"
  },
  "bigipServiceDiscoveryProfile": {
   "Properties": {
    "Path": "/",
    "Roles": [
     {
      "Ref": "bigipServiceDiscoveryAccessRole"
     }
    ]
   },
   "Type": "AWS::IAM::InstanceProfile"
  }
 }
}
