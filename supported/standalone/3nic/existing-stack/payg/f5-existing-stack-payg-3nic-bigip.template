{
 "AWSTemplateFormatVersion": "2010-09-09",
 "Conditions": {
  "noCustomImageId": {
   "Fn::Equals": [
    "OPTIONAL",
    {
     "Ref": "customImageId"
    }
   ]
  },
  "optin": {
   "Fn::Equals": [
    "Yes",
    {
     "Ref": "allowUsageAnalytics"
    }
   ]
  },
  "useDynamicExternalIpAddr": {
   "Fn::Or": [
    {
     "Fn::Equals": [
      "DYNAMIC",
      {
       "Ref": "subnet1Az1Address"
      }
     ]
    },
    {
     "Fn::Equals": [
      "",
      {
       "Ref": "subnet1Az1Address"
      }
     ]
    }
   ]
  },
  "useDynamicInternalIpAddr": {
   "Fn::Or": [
    {
     "Fn::Equals": [
      "DYNAMIC",
      {
       "Ref": "subnet2Az1Address"
      }
     ]
    },
    {
     "Fn::Equals": [
      "",
      {
       "Ref": "subnet2Az1Address"
      }
     ]
    }
   ]
  },
  "useDynamicManagementIpAddr": {
   "Fn::Or": [
    {
     "Fn::Equals": [
      "DYNAMIC",
      {
       "Ref": "managementSubnetAz1Address"
      }
     ]
    },
    {
     "Fn::Equals": [
      "",
      {
       "Ref": "managementSubnetAz1Address"
      }
     ]
    }
   ]
  },
  "usePublicIP": {
   "Fn::Equals": [
    "Yes",
    {
     "Ref": "provisionPublicIP"
    }
   ]
  },
  "useStaticExternalIpAddr": {
   "Fn::Not": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        "DYNAMIC",
        {
         "Ref": "subnet1Az1Address"
        }
       ]
      },
      {
       "Fn::Equals": [
        "",
        {
         "Ref": "subnet1Az1Address"
        }
       ]
      }
     ]
    }
   ]
  },
  "useStaticInternalIpAddr": {
   "Fn::Not": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        "DYNAMIC",
        {
         "Ref": "subnet2Az1Address"
        }
       ]
      },
      {
       "Fn::Equals": [
        "",
        {
         "Ref": "subnet2Az1Address"
        }
       ]
      }
     ]
    }
   ]
  },
  "useStaticManagementIpAddr": {
   "Fn::Not": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        "DYNAMIC",
        {
         "Ref": "managementSubnetAz1Address"
        }
       ]
      },
      {
       "Fn::Equals": [
        "",
        {
         "Ref": "managementSubnetAz1Address"
        }
       ]
      }
     ]
    }
   ]
  }
 },
 "Description": "Template v5.14.0: AWS CloudFormation Template for creating a 3NIC BIG-IP in an existing VPC **WARNING** This template creates Amazon EC2 Instances. You will be billed for the AWS resources used if you create a stack from this template.",
 "Mappings": {
  "BigipRegionMap": {
   "af-south-1": {
    "AdvancedWaf200Mbps": "ami-0e700fd51e3e90a90",
    "AdvancedWaf25Mbps": "ami-0d46b567b6e1901ad",
    "Best10000Mbps": "ami-0dff02d5fa472b7e6",
    "Best1000Mbps": "ami-0c6bf2284ae2109a4",
    "Best200Mbps": "ami-0a1bcc4f2b2e44f1f",
    "Best25Mbps": "ami-0c944ec9c126b2c68",
    "Best5000Mbps": "ami-041db808191a9275c",
    "Better10000Mbps": "ami-0928515dfbdee2872",
    "Better1000Mbps": "ami-051148e0777bdf444",
    "Better200Mbps": "ami-0b134920eaacdb148",
    "Better25Mbps": "ami-03646ebb49b4a8aae",
    "Better5000Mbps": "ami-072011b079abd54d1",
    "Good10000Mbps": "ami-0f999a928027460a2",
    "Good1000Mbps": "ami-0d9d83161f7637d58",
    "Good200Mbps": "ami-05962a44f0377e833",
    "Good25Mbps": "ami-08a5497562e9756a2",
    "Good5000Mbps": "ami-016cf9800e7767f91",
    "PerAppVeAwaf200Mbps": "ami-06bea2f38677a8b52",
    "PerAppVeAwaf25Mbps": "ami-0cacf6dd8e3afe19c"
   },
   "ap-east-1": {
    "AdvancedWaf200Mbps": "ami-033db38b000d1c455",
    "AdvancedWaf25Mbps": "ami-0c694567b39683c0d",
    "Best10000Mbps": "ami-09f83a5c74cdafe47",
    "Best1000Mbps": "ami-054f42bd23074b43c",
    "Best200Mbps": "ami-04940c163cd607ce0",
    "Best25Mbps": "ami-094a3e776a07ceab8",
    "Best5000Mbps": "ami-09a785c54a7160cfa",
    "Better10000Mbps": "ami-0d8699c742f2d52f8",
    "Better1000Mbps": "ami-01cb18ea0124fe459",
    "Better200Mbps": "ami-00f134f6b9f3c1dc4",
    "Better25Mbps": "ami-07ae7c1272fbdd1bd",
    "Better5000Mbps": "ami-001daf2000de8eb94",
    "Good10000Mbps": "ami-0c8b93eebcbcaefab",
    "Good1000Mbps": "ami-02251fb2aec8406be",
    "Good200Mbps": "ami-0f460e4b2a880e851",
    "Good25Mbps": "ami-056c13ca03c397b33",
    "Good5000Mbps": "ami-0dbb5a66e8fa2481a",
    "PerAppVeAwaf200Mbps": "ami-0f4a71797fa050f09",
    "PerAppVeAwaf25Mbps": "ami-0923d894d1fa29356"
   },
   "ap-northeast-1": {
    "AdvancedWaf200Mbps": "ami-07123c6d0cf755938",
    "AdvancedWaf25Mbps": "ami-07afbd8614fa4fc0c",
    "Best10000Mbps": "ami-087b76addad4d42cd",
    "Best1000Mbps": "ami-076d31259be081c90",
    "Best200Mbps": "ami-0901116eb08cd90eb",
    "Best25Mbps": "ami-092c65d41f19fdd64",
    "Best5000Mbps": "ami-059c8d3ce9f14c414",
    "Better10000Mbps": "ami-01a4799065b8ff08e",
    "Better1000Mbps": "ami-05b97a812f340f348",
    "Better200Mbps": "ami-0deb7fa8f6c2887fb",
    "Better25Mbps": "ami-01aeaf0c3b804163c",
    "Better5000Mbps": "ami-00348a531f399f91c",
    "Good10000Mbps": "ami-0e7a148ccc6a1672b",
    "Good1000Mbps": "ami-09633fdf26c1b2ac4",
    "Good200Mbps": "ami-0ebf4a51d7f98eeb3",
    "Good25Mbps": "ami-00f39c3d6b082d292",
    "Good5000Mbps": "ami-0bd0bf1e0b3b2b730",
    "PerAppVeAwaf200Mbps": "ami-0740a7f539f794869",
    "PerAppVeAwaf25Mbps": "ami-03ae0c1a1998cebd9"
   },
   "ap-northeast-2": {
    "AdvancedWaf200Mbps": "ami-00767191b41014a4d",
    "AdvancedWaf25Mbps": "ami-0907601e4fcf2a4cc",
    "Best10000Mbps": "ami-0b9c5da117979cfb0",
    "Best1000Mbps": "ami-0fdbf5f5d64c7946d",
    "Best200Mbps": "ami-035ea920f4997e9ef",
    "Best25Mbps": "ami-07b6c796743011b41",
    "Best5000Mbps": "ami-0b1f8509675297dee",
    "Better10000Mbps": "ami-076890ce278faaf0f",
    "Better1000Mbps": "ami-01554121423783d1b",
    "Better200Mbps": "ami-006fc09b358d2bace",
    "Better25Mbps": "ami-05d950436274fb160",
    "Better5000Mbps": "ami-05b86e07f7694c65d",
    "Good10000Mbps": "ami-0dfb275a4a7f5f640",
    "Good1000Mbps": "ami-062abecfa87c1472d",
    "Good200Mbps": "ami-0799adffb6464c7d5",
    "Good25Mbps": "ami-07328c2a7388ab685",
    "Good5000Mbps": "ami-0c66ef4adb1f0b772",
    "PerAppVeAwaf200Mbps": "ami-0a8e4bfe119fefa54",
    "PerAppVeAwaf25Mbps": "ami-02191415058e118b8"
   },
   "ap-northeast-3": {
    "AdvancedWaf200Mbps": "ami-0162ecd6f49fa3e2f",
    "AdvancedWaf25Mbps": "ami-08f73df3ea97dcb93",
    "Best10000Mbps": "ami-0d7237ed1261c9665",
    "Best1000Mbps": "ami-0eed2cb73e1a52a04",
    "Best200Mbps": "ami-009e7e0c7f06125bb",
    "Best25Mbps": "ami-07ae1f4495d3f9086",
    "Best5000Mbps": "ami-0300c3c63ce2973ba",
    "Better10000Mbps": "ami-0782dd6baa651f399",
    "Better1000Mbps": "ami-0b5067a978b5e5dbc",
    "Better200Mbps": "ami-0f677f17000f31df4",
    "Better25Mbps": "ami-0f797f4d1bc2a53e1",
    "Better5000Mbps": "ami-052d8bc0290dd4f93",
    "Good10000Mbps": "ami-03c6539e82bc44119",
    "Good1000Mbps": "ami-0df4d6da1af5543d4",
    "Good200Mbps": "ami-02296d1606f0116fb",
    "Good25Mbps": "ami-0bd3d365a129a76e9",
    "Good5000Mbps": "ami-08289dbd028999b8f",
    "PerAppVeAwaf200Mbps": "ami-0abc7f5a1133016fe",
    "PerAppVeAwaf25Mbps": "ami-03e890997b5d250e9"
   },
   "ap-south-1": {
    "AdvancedWaf200Mbps": "ami-05bbb377a78dd22cc",
    "AdvancedWaf25Mbps": "ami-0183fa18754833b2b",
    "Best10000Mbps": "ami-0aa3e1aa236f6c233",
    "Best1000Mbps": "ami-07a4e31ec85433dcd",
    "Best200Mbps": "ami-0fb13e196be84e75d",
    "Best25Mbps": "ami-0d4f9a134d8b8bd4a",
    "Best5000Mbps": "ami-0b7f9c3ec22b130c9",
    "Better10000Mbps": "ami-0e0a1645b560cb183",
    "Better1000Mbps": "ami-0b6d09234124f3d78",
    "Better200Mbps": "ami-0e0fed635e9ec7c02",
    "Better25Mbps": "ami-0c94377e176aecee3",
    "Better5000Mbps": "ami-05d2598dfce0c553f",
    "Good10000Mbps": "ami-09801fb2c16d8da74",
    "Good1000Mbps": "ami-0b86c7d4bc7b7d0bd",
    "Good200Mbps": "ami-0f370f4db965fe9ca",
    "Good25Mbps": "ami-093e2688bc368bf03",
    "Good5000Mbps": "ami-0e385c88302d00df3",
    "PerAppVeAwaf200Mbps": "ami-0b5d5fbd8f527dd2d",
    "PerAppVeAwaf25Mbps": "ami-0e5351c49690183a0"
   },
   "ap-southeast-1": {
    "AdvancedWaf200Mbps": "ami-04cbc005a3667f2e9",
    "AdvancedWaf25Mbps": "ami-0347b1bc457f19085",
    "Best10000Mbps": "ami-096b3332f700f5b86",
    "Best1000Mbps": "ami-0f173611ace8cd796",
    "Best200Mbps": "ami-0b3178ee44c0e57ae",
    "Best25Mbps": "ami-0aa50627f36cafb1e",
    "Best5000Mbps": "ami-096f1194822c0fa46",
    "Better10000Mbps": "ami-03b6b6d9c991f7a35",
    "Better1000Mbps": "ami-04a1aae1e45ac1766",
    "Better200Mbps": "ami-0ba4a187da0815534",
    "Better25Mbps": "ami-091c6033846fd272f",
    "Better5000Mbps": "ami-060a32b1e10853213",
    "Good10000Mbps": "ami-0f5ae8bbf4f5dc701",
    "Good1000Mbps": "ami-0b331eb332bd587e9",
    "Good200Mbps": "ami-0146f2c4e75c6a95f",
    "Good25Mbps": "ami-04e63b0ebdbb837c6",
    "Good5000Mbps": "ami-03e123e5b86f1babb",
    "PerAppVeAwaf200Mbps": "ami-04a9c7a0905e5492e",
    "PerAppVeAwaf25Mbps": "ami-0f6c8a00912b66c02"
   },
   "ap-southeast-2": {
    "AdvancedWaf200Mbps": "ami-09215dfc4c2cb97d9",
    "AdvancedWaf25Mbps": "ami-04ca7b12e10cb0e33",
    "Best10000Mbps": "ami-0dd6daeeea2d14452",
    "Best1000Mbps": "ami-00b5f72cc88aaf93e",
    "Best200Mbps": "ami-0ef1d6eb56de03770",
    "Best25Mbps": "ami-0650626c61df2ca56",
    "Best5000Mbps": "ami-0765ef8ce1fca1ba7",
    "Better10000Mbps": "ami-01313578524fb602c",
    "Better1000Mbps": "ami-05e1a696c3a03a729",
    "Better200Mbps": "ami-0c236e8b0ff9b92b2",
    "Better25Mbps": "ami-07552d15c4fba4760",
    "Better5000Mbps": "ami-0fc1252259a8c7837",
    "Good10000Mbps": "ami-0eb88202787c04b96",
    "Good1000Mbps": "ami-09a002853111de16e",
    "Good200Mbps": "ami-083a41eedcfd6d38e",
    "Good25Mbps": "ami-0df110d0b2b3ddc13",
    "Good5000Mbps": "ami-001c7dd967a737619",
    "PerAppVeAwaf200Mbps": "ami-0994eea914daf0cca",
    "PerAppVeAwaf25Mbps": "ami-0d79146c81a32f7d0"
   },
   "ca-central-1": {
    "AdvancedWaf200Mbps": "ami-0f71d72cb000398dd",
    "AdvancedWaf25Mbps": "ami-0322f00bccb246c53",
    "Best10000Mbps": "ami-08cce0d5ce587cfbc",
    "Best1000Mbps": "ami-0dfb58b0792591727",
    "Best200Mbps": "ami-060d90ec5b39a4ef8",
    "Best25Mbps": "ami-0112b81303711b13e",
    "Best5000Mbps": "ami-0e75055f302c6c7a9",
    "Better10000Mbps": "ami-08f7a7fe4539e33e2",
    "Better1000Mbps": "ami-07227b178f7b71509",
    "Better200Mbps": "ami-0285577bdc1ae7424",
    "Better25Mbps": "ami-04a270b9776a9e0d6",
    "Better5000Mbps": "ami-0b1c2558398b6514b",
    "Good10000Mbps": "ami-0c4a6a87b6b43911d",
    "Good1000Mbps": "ami-09b3c3a55cfa93597",
    "Good200Mbps": "ami-0af87a9c74f034539",
    "Good25Mbps": "ami-06680b14e3db70ecb",
    "Good5000Mbps": "ami-08af985a70a1ce1ca",
    "PerAppVeAwaf200Mbps": "ami-0a5ced3fc3aa17a3b",
    "PerAppVeAwaf25Mbps": "ami-09943f3ac5f471777"
   },
   "eu-central-1": {
    "AdvancedWaf200Mbps": "ami-03776b47c12fcbf0c",
    "AdvancedWaf25Mbps": "ami-072097a2c1ee20fba",
    "Best10000Mbps": "ami-0317828752aa81550",
    "Best1000Mbps": "ami-05f1f885a527816e4",
    "Best200Mbps": "ami-0a43ce416e17f4fd6",
    "Best25Mbps": "ami-001bb29abbf3a0114",
    "Best5000Mbps": "ami-04c7604fc23e0b2fa",
    "Better10000Mbps": "ami-0ec4c56fcaf3cd9f3",
    "Better1000Mbps": "ami-0f9f775ebfeb8e388",
    "Better200Mbps": "ami-0784905e6d64b578e",
    "Better25Mbps": "ami-0addc08ae4eca8b29",
    "Better5000Mbps": "ami-06cc6e5f98d56defc",
    "Good10000Mbps": "ami-0b7bac29b86496b75",
    "Good1000Mbps": "ami-07a5d9ab16876d9e6",
    "Good200Mbps": "ami-000a3cbc507a1e2e2",
    "Good25Mbps": "ami-05972e74d881bf769",
    "Good5000Mbps": "ami-0e5877104c30154f0",
    "PerAppVeAwaf200Mbps": "ami-0cb7777ed92484c3b",
    "PerAppVeAwaf25Mbps": "ami-072c65857c8f8c5ad"
   },
   "eu-north-1": {
    "AdvancedWaf200Mbps": "ami-0207476a80e9674b9",
    "AdvancedWaf25Mbps": "ami-029073ffa5ac4dfef",
    "Best10000Mbps": "ami-0859468608cfd28b0",
    "Best1000Mbps": "ami-08e2d4ef02b220b69",
    "Best200Mbps": "ami-05be9fdcedb91d7c0",
    "Best25Mbps": "ami-0051c2df9a5523d40",
    "Best5000Mbps": "ami-03c1fb119120fe525",
    "Better10000Mbps": "ami-0739858c13abc0c15",
    "Better1000Mbps": "ami-06c81532f1554b362",
    "Better200Mbps": "ami-0d3883630eb4b80a6",
    "Better25Mbps": "ami-0ec3d45fb79d0b40d",
    "Better5000Mbps": "ami-07ce2b98f5716df7f",
    "Good10000Mbps": "ami-0b80067c8fc72500d",
    "Good1000Mbps": "ami-068aaeb20e5513096",
    "Good200Mbps": "ami-0ecd90f5d2cf0f5e5",
    "Good25Mbps": "ami-0a2d1b2c12ca57341",
    "Good5000Mbps": "ami-0e8ae41a7828cbc93",
    "PerAppVeAwaf200Mbps": "ami-0f852bebf98023a16",
    "PerAppVeAwaf25Mbps": "ami-0f26e5b8e52f8c932"
   },
   "eu-south-1": {
    "AdvancedWaf200Mbps": "ami-05e59d025f6a5b45a",
    "AdvancedWaf25Mbps": "ami-0ea52fffe670ed377",
    "Best10000Mbps": "ami-0cffd302d6f129bc6",
    "Best1000Mbps": "ami-0cdf98b8872623912",
    "Best200Mbps": "ami-0d646c5612f17ae12",
    "Best25Mbps": "ami-0b8fa841ee3a3f71d",
    "Best5000Mbps": "ami-0413b23c57cf4ce39",
    "Better10000Mbps": "ami-03d3bc9a0c6c7c89e",
    "Better1000Mbps": "ami-07d5a3597aea3e5c6",
    "Better200Mbps": "ami-0989ada9e0c80202e",
    "Better25Mbps": "ami-0ead81360026a91bf",
    "Better5000Mbps": "ami-070e0b0d21ab7495d",
    "Good10000Mbps": "ami-061a99c6fe15b56cf",
    "Good1000Mbps": "ami-0536456a6e24bd592",
    "Good200Mbps": "ami-002f50396cc3c6d43",
    "Good25Mbps": "ami-0f3163440ad5b5ff9",
    "Good5000Mbps": "ami-050f3ddf1aee2813f",
    "PerAppVeAwaf200Mbps": "ami-0fac59331f1ca8d12",
    "PerAppVeAwaf25Mbps": "ami-07dfb73feeb553b77"
   },
   "eu-west-1": {
    "AdvancedWaf200Mbps": "ami-0c0add483fd2482a0",
    "AdvancedWaf25Mbps": "ami-00b1ab1e4626f592e",
    "Best10000Mbps": "ami-0d4bf59f5e3d3cc9e",
    "Best1000Mbps": "ami-082928201d4fb05b6",
    "Best200Mbps": "ami-0a63e05cbe0c38003",
    "Best25Mbps": "ami-089796e5e47961ac5",
    "Best5000Mbps": "ami-06ddc3b8a6cf95330",
    "Better10000Mbps": "ami-0e3000ad26f309010",
    "Better1000Mbps": "ami-0b84c5ef88cce26b5",
    "Better200Mbps": "ami-0e39581b979906bc0",
    "Better25Mbps": "ami-08c16a8a8d8e46845",
    "Better5000Mbps": "ami-01d9cff0b282734bb",
    "Good10000Mbps": "ami-065db68e46b143bfd",
    "Good1000Mbps": "ami-0414a3902918be91d",
    "Good200Mbps": "ami-0045f1bf3fe2063b6",
    "Good25Mbps": "ami-0d9a8f0c1086e9a15",
    "Good5000Mbps": "ami-0a918564d8268b00a",
    "PerAppVeAwaf200Mbps": "ami-0763ee91ec293e7f8",
    "PerAppVeAwaf25Mbps": "ami-0c4008f7a3345c3b2"
   },
   "eu-west-2": {
    "AdvancedWaf200Mbps": "ami-0386bbb6a15d366dd",
    "AdvancedWaf25Mbps": "ami-0dd28f529175f31bf",
    "Best10000Mbps": "ami-07e27072400a644ce",
    "Best1000Mbps": "ami-07eef86309f455615",
    "Best200Mbps": "ami-00398a760071f2848",
    "Best25Mbps": "ami-01b51c16d2394670e",
    "Best5000Mbps": "ami-0fe86d36bfda2b6fc",
    "Better10000Mbps": "ami-0cd3b4f181dc93536",
    "Better1000Mbps": "ami-057422066649d62d5",
    "Better200Mbps": "ami-0aa1b9c7d2ded97fd",
    "Better25Mbps": "ami-05eb77f6e8d6711d6",
    "Better5000Mbps": "ami-0068257176669a1d3",
    "Good10000Mbps": "ami-034da4f43d05c559e",
    "Good1000Mbps": "ami-056733da7db05b41e",
    "Good200Mbps": "ami-0f9f420038697e8e5",
    "Good25Mbps": "ami-0618889529bb40b63",
    "Good5000Mbps": "ami-0f5046d900703cf8f",
    "PerAppVeAwaf200Mbps": "ami-01a90a4275ff8adcd",
    "PerAppVeAwaf25Mbps": "ami-00d181287586c1e94"
   },
   "eu-west-3": {
    "AdvancedWaf200Mbps": "ami-0fd614d052b11f604",
    "AdvancedWaf25Mbps": "ami-0bf1b11103d6c048a",
    "Best10000Mbps": "ami-095e6bd7c76c7b2cf",
    "Best1000Mbps": "ami-03a5d6e258012f1dd",
    "Best200Mbps": "ami-01b9c15dc7c44e309",
    "Best25Mbps": "ami-0daa7bee354c28fc9",
    "Best5000Mbps": "ami-0a23662b711f51c11",
    "Better10000Mbps": "ami-04a5c1757cc7b30eb",
    "Better1000Mbps": "ami-01615a900e7e79768",
    "Better200Mbps": "ami-0a42be8463fc8dce0",
    "Better25Mbps": "ami-0fc2e463b4cd1fbf2",
    "Better5000Mbps": "ami-0c650cbec8eae563d",
    "Good10000Mbps": "ami-0cf9ae27ebb15e894",
    "Good1000Mbps": "ami-0c65659ce14504068",
    "Good200Mbps": "ami-03d49e2268019ead8",
    "Good25Mbps": "ami-07fc84cc10486764b",
    "Good5000Mbps": "ami-0814f8fd1d6a4ea11",
    "PerAppVeAwaf200Mbps": "ami-0675567a279bd6e92",
    "PerAppVeAwaf25Mbps": "ami-08976001341c8f1e7"
   },
   "me-south-1": {
    "AdvancedWaf200Mbps": "ami-0b41b6c8ec95464f3",
    "AdvancedWaf25Mbps": "ami-0c684168e3cfc15a9",
    "Best10000Mbps": "ami-0ea878a7b98e02875",
    "Best1000Mbps": "ami-08f664d52d2346d3c",
    "Best200Mbps": "ami-04f6bd90fdf3836d1",
    "Best25Mbps": "ami-07d45f38c61a2f0c9",
    "Best5000Mbps": "ami-0bf02d7b9f830426d",
    "Better10000Mbps": "ami-0c4711937867940e2",
    "Better1000Mbps": "ami-05b2c427f021744a6",
    "Better200Mbps": "ami-08d15e09f573e6cb0",
    "Better25Mbps": "ami-0f9254fb9bd07dd75",
    "Better5000Mbps": "ami-0bc30d8d8ad85b527",
    "Good10000Mbps": "ami-03947aa92487fa00a",
    "Good1000Mbps": "ami-061ce48392ba4a5bc",
    "Good200Mbps": "ami-049f94594f679fcde",
    "Good25Mbps": "ami-0456eeedd818390c1",
    "Good5000Mbps": "ami-0135658187b0705ea",
    "PerAppVeAwaf200Mbps": "ami-01ff1be5768a64b6e",
    "PerAppVeAwaf25Mbps": "ami-094150c7d5a66aa33"
   },
   "sa-east-1": {
    "AdvancedWaf200Mbps": "ami-029f4d3233f79e58d",
    "AdvancedWaf25Mbps": "ami-007305a9a35ed43f4",
    "Best10000Mbps": "ami-063c7f1f60ca7bcb5",
    "Best1000Mbps": "ami-01999779ce90ea674",
    "Best200Mbps": "ami-085716137ca28378f",
    "Best25Mbps": "ami-0427ae406eaf0be7f",
    "Best5000Mbps": "ami-0f2375cbe1030677f",
    "Better10000Mbps": "ami-0445993b128514839",
    "Better1000Mbps": "ami-0b5aca64d22fc4a0c",
    "Better200Mbps": "ami-04018fcd344328cc0",
    "Better25Mbps": "ami-0e2aeff25f161c7ec",
    "Better5000Mbps": "ami-0e1ecd0d6bf043515",
    "Good10000Mbps": "ami-049f5e6ab47ffe1a3",
    "Good1000Mbps": "ami-06d1498e9afa6acd4",
    "Good200Mbps": "ami-0a266488274f90b7a",
    "Good25Mbps": "ami-07f003eaeffdc5c64",
    "Good5000Mbps": "ami-08b3228d742bc0070",
    "PerAppVeAwaf200Mbps": "ami-0c42f0196f5b2da0f",
    "PerAppVeAwaf25Mbps": "ami-0fe0a2959e4e8ca1b"
   },
   "us-east-1": {
    "AdvancedWaf200Mbps": "ami-038848acc10ae3b46",
    "AdvancedWaf25Mbps": "ami-0b0348c16df157274",
    "AllTwoBootLocations": "ami-08257c0c5bb79a3f1",
    "Best10000Mbps": "ami-0332610c62fd6a05f",
    "Best1000Mbps": "ami-0bc48624caf86a320",
    "Best200Mbps": "ami-093f45ce66929d874",
    "Best25Mbps": "ami-0a33f66cb79f64069",
    "Best5000Mbps": "ami-09f215b0780556c0c",
    "Better10000Mbps": "ami-017bf8bd605b916f2",
    "Better1000Mbps": "ami-0d4f7fc991b23a317",
    "Better200Mbps": "ami-07bdbd9b4398b2d2e",
    "Better25Mbps": "ami-008b9d165a5c23592",
    "Better5000Mbps": "ami-0817564051af4e22a",
    "Good10000Mbps": "ami-01b19b31015d397a0",
    "Good1000Mbps": "ami-000cd321184df047b",
    "Good200Mbps": "ami-03971315d9d138feb",
    "Good25Mbps": "ami-00932ebc0ef1a7bd1",
    "Good5000Mbps": "ami-053a60a897ba57175",
    "PerAppVeAwaf200Mbps": "ami-0e42f5f24b5adaf9f",
    "PerAppVeAwaf25Mbps": "ami-00a684d4e30f9fb15"
   },
   "us-east-2": {
    "AdvancedWaf200Mbps": "ami-0006323b60d43f3a1",
    "AdvancedWaf25Mbps": "ami-0873883af78ae3c39",
    "Best10000Mbps": "ami-067af54ddeca96de5",
    "Best1000Mbps": "ami-0ec6b3a0e608a9a29",
    "Best200Mbps": "ami-0d1572fe1cf98bf78",
    "Best25Mbps": "ami-068f7ac4d0951981d",
    "Best5000Mbps": "ami-0c9b7b171b0de4db5",
    "Better10000Mbps": "ami-00ada502735cf24a8",
    "Better1000Mbps": "ami-063655a845e90f70c",
    "Better200Mbps": "ami-0acc089af65507692",
    "Better25Mbps": "ami-072d65bd078577873",
    "Better5000Mbps": "ami-04c7460131a2e1880",
    "Good10000Mbps": "ami-03b08b3b973f9e2ab",
    "Good1000Mbps": "ami-0ca9c41b495fdbe19",
    "Good200Mbps": "ami-006a42a9165717036",
    "Good25Mbps": "ami-0adf3e3c4b759c491",
    "Good5000Mbps": "ami-0d31307cac2e7d93d",
    "PerAppVeAwaf200Mbps": "ami-0f76ed9d50d507d8d",
    "PerAppVeAwaf25Mbps": "ami-0b2ca4004af20f0ee"
   },
   "us-gov-east-1": {
    "AdvancedWaf200Mbps": "ami-03b356910e52e05ed",
    "AdvancedWaf25Mbps": "ami-0a46ed2cc8083b048",
    "Best10000Mbps": "ami-084778b43fd95b55a",
    "Best1000Mbps": "ami-051757f97c265d5b0",
    "Best200Mbps": "ami-0b8ac943118da6d71",
    "Best25Mbps": "ami-0ff618d0d564d07c5",
    "Best5000Mbps": "ami-0167a15c34f02ebb3",
    "Better10000Mbps": "ami-080ae145edbc3b1d8",
    "Better1000Mbps": "ami-05a0f8dcfdb20d0a5",
    "Better200Mbps": "ami-0da3bd88b884ed223",
    "Better25Mbps": "ami-08bc2390ef6a3be5b",
    "Better5000Mbps": "ami-09742e875a52e0b0b",
    "Good10000Mbps": "ami-0674bd47417e53c5a",
    "Good1000Mbps": "ami-03ba108fcf36f20f3",
    "Good200Mbps": "ami-0113b43d697bbe260",
    "Good25Mbps": "ami-0af763975b48fa1c0",
    "Good5000Mbps": "ami-051e7f1b062fbaad0",
    "PerAppVeAwaf200Mbps": "ami-0c31742eca8fd6d08",
    "PerAppVeAwaf25Mbps": "ami-09361c395a43e5c11"
   },
   "us-gov-west-1": {
    "AdvancedWaf200Mbps": "ami-070db5add06575934",
    "AdvancedWaf25Mbps": "ami-095af14d28efc7211",
    "Best10000Mbps": "ami-0a99af371029becdf",
    "Best1000Mbps": "ami-00e001861ff2d3119",
    "Best200Mbps": "ami-0f98a22ecab2bac5d",
    "Best25Mbps": "ami-0b4961a80911401ce",
    "Best5000Mbps": "ami-005e186532be2388d",
    "Better10000Mbps": "ami-057ce8407bf3106a6",
    "Better1000Mbps": "ami-090bd1462f0c6462f",
    "Better200Mbps": "ami-0b10b7a01b61bc315",
    "Better25Mbps": "ami-04c826778b6864ae4",
    "Better5000Mbps": "ami-0ca3a7fd81791d7e5",
    "Good10000Mbps": "ami-01252f6aa75ad253c",
    "Good1000Mbps": "ami-08d69451b2a8c5c9f",
    "Good200Mbps": "ami-06d80ae5cdc920184",
    "Good25Mbps": "ami-0a7f5e4f290f6d37b",
    "Good5000Mbps": "ami-0a291d8b0de62467d",
    "PerAppVeAwaf200Mbps": "ami-05c3d3252dfe83ca9",
    "PerAppVeAwaf25Mbps": "ami-0e7d71557d61fa695"
   },
   "us-west-1": {
    "AdvancedWaf200Mbps": "ami-0685478b3656ec375",
    "AdvancedWaf25Mbps": "ami-0158faafbc0c993be",
    "Best10000Mbps": "ami-02a134aa2e408776b",
    "Best1000Mbps": "ami-04a0cc829d4e37e41",
    "Best200Mbps": "ami-0c341c658d487a921",
    "Best25Mbps": "ami-0800811fe83ecbe41",
    "Best5000Mbps": "ami-05c078ceb946f3356",
    "Better10000Mbps": "ami-08ab1042f584c7439",
    "Better1000Mbps": "ami-04d092c1dd1a58fe0",
    "Better200Mbps": "ami-08f3c7891275ecf23",
    "Better25Mbps": "ami-0c293f912e254749d",
    "Better5000Mbps": "ami-027f3552ec08feab7",
    "Good10000Mbps": "ami-0f233a353b17e3216",
    "Good1000Mbps": "ami-0405bcfae1d8e9308",
    "Good200Mbps": "ami-0261c25d8ede11b94",
    "Good25Mbps": "ami-06d99e0a6ac760ac8",
    "Good5000Mbps": "ami-00e107e3aa89a6f04",
    "PerAppVeAwaf200Mbps": "ami-067e2f6ff3a49f74f",
    "PerAppVeAwaf25Mbps": "ami-03e6bc6168bad5155"
   },
   "us-west-2": {
    "AdvancedWaf200Mbps": "ami-0e0c15365a81513e6",
    "AdvancedWaf25Mbps": "ami-0855f199b4c6e65d3",
    "Best10000Mbps": "ami-037e49490fa404c29",
    "Best1000Mbps": "ami-01d35f22902b3f079",
    "Best200Mbps": "ami-0dc270b21f8da024f",
    "Best25Mbps": "ami-01ffb3049811f5322",
    "Best5000Mbps": "ami-0aae11a9bae0ffa6a",
    "Better10000Mbps": "ami-0805e0a9c4f27717e",
    "Better1000Mbps": "ami-00a4549d78ffc65d2",
    "Better200Mbps": "ami-0c88c1c9e420442a3",
    "Better25Mbps": "ami-0c06a171a907b5ed0",
    "Better5000Mbps": "ami-053e822c1a93af187",
    "Good10000Mbps": "ami-02f063494102d0c28",
    "Good1000Mbps": "ami-0d1e4140557e193ad",
    "Good200Mbps": "ami-046b485ce9633c6d5",
    "Good25Mbps": "ami-0e9e11bd725d79738",
    "Good5000Mbps": "ami-00e25c6e99f90ca9d",
    "PerAppVeAwaf200Mbps": "ami-012a7a614c3c4db3a",
    "PerAppVeAwaf25Mbps": "ami-055d5c13567f3eacd"
   }
  }
 },
 "Metadata": {
  "AWS::CloudFormation::Interface": {
   "ParameterGroups": [
    {
     "Label": {
      "default": "NETWORKING CONFIGURATION"
     },
     "Parameters": [
      "Vpc",
      "managementSubnetAz1",
      "managementSubnetAz1Address",
      "managementSubnetAz2",
      "subnet1Az1",
      "subnet1Az1Address",
      "subnet1Az2",
      "subnet2Az1",
      "subnet2Az1Address",
      "subnet2Az2",
      "availabilityZone1",
      "availabilityZone2",
      "numberOfAdditionalNics",
      "additionalNicLocation",
      "provisionPublicIP"
     ]
    },
    {
     "Label": {
      "default": "INSTANCE CONFIGURATION"
     },
     "Parameters": [
      "imageName",
      "customImageId",
      "instanceType",
      "applicationInstanceType",
      "licenseKey1",
      "licenseKey2",
      "managementGuiPort",
      "sshKey",
      "restrictedSrcAddress",
      "restrictedSrcAddressApp",
      "ntpServer",
      "timezone",
      "bigIpModules"
     ]
    },
    {
     "Label": {
      "default": "TAGS"
     },
     "Parameters": [
      "application",
      "environment",
      "group",
      "owner",
      "costcenter"
     ]
    },
    {},
    {
     "Label": {
      "default": "TEMPLATE ANALYTICS"
     },
     "Parameters": [
      "allowUsageAnalytics",
      "allowPhoneHome"
     ]
    },
    {
     "Label": {
      "default": "VIRTUAL SERVICE CONFIGURATION"
     },
     "Parameters": [
      "declarationUrl"
     ]
    }
   ],
   "ParameterLabels": {
    "Vpc": {
     "default": "VPC"
    },
    "additionalNicLocation": {
     "default": "Additional NIC Location"
    },
    "allowPhoneHome": {
     "default": "Send Anonymous Device Statistics to F5"
    },
    "allowUsageAnalytics": {
     "default": "Send Anonymous Template Statistics to F5"
    },
    "application": {
     "default": "Application"
    },
    "applicationInstanceType": {
     "default": "Application Instance Type"
    },
    "availabilityZone1": {
     "default": "Availability Zone 1"
    },
    "availabilityZone2": {
     "default": "Availability Zone 2"
    },
    "bigIpModules": {
     "default": "BIG-IP Modules"
    },
    "costcenter": {
     "default": "Cost Center"
    },
    "customImageId": {
     "default": "Custom Image Id"
    },
    "declarationUrl": {
     "default": "AS3 Declaration URL"
    },
    "environment": {
     "default": "Environment"
    },
    "group": {
     "default": "Group"
    },
    "imageName": {
     "default": "BIG-IP Image Name"
    },
    "instanceType": {
     "default": "AWS Instance Size"
    },
    "licenseKey1": {
     "default": "License Key 1"
    },
    "licenseKey2": {
     "default": "License Key 2"
    },
    "managementGuiPort": {
     "default": "BIG-IP Management Port"
    },
    "managementSubnetAz1": {
     "default": "Management Subnet AZ1"
    },
    "managementSubnetAz1Address": {
     "default": "Management Subnet AZ1 Static IP Address"
    },
    "managementSubnetAz2": {
     "default": "Management Subnet AZ2"
    },
    "ntpServer": {
     "default": "NTP Server"
    },
    "numberOfAdditionalNics": {
     "default": "Number Of Additional NICs"
    },
    "owner": {
     "default": "Owner"
    },
    "provisionPublicIP": {
     "default": "Provision Public IP addresses for the BIG-IP interfaces"
    },
    "restrictedSrcAddress": {
     "default": "Source Address(es) for Management Access"
    },
    "restrictedSrcAddressApp": {
     "default": "Source Address(es) for Web Application Access (80/443)"
    },
    "sshKey": {
     "default": "SSH Key"
    },
    "subnet1Az1": {
     "default": "Subnet1 in AZ1"
    },
    "subnet1Az1Address": {
     "default": "Subnet1 AZ1 Static IP Addresses"
    },
    "subnet1Az2": {
     "default": "Subnet1 in AZ2"
    },
    "subnet2Az1": {
     "default": "Subnet2 in AZ1"
    },
    "subnet2Az1Address": {
     "default": "Subnet2 AZ1 Static IP Address"
    },
    "subnet2Az2": {
     "default": "Subnet2 in AZ2"
    },
    "timezone": {
     "default": "Timezone (Olson)"
    }
   }
  },
  "Version": "5.14.0"
 },
 "Outputs": {
  "Bigip1ExternalInterfacePrivateIp": {
   "Description": "Internally routable IP of the public interface on BIG-IP",
   "Value": {
    "Fn::If": [
     "useDynamicExternalIpAddr",
     {
      "Fn::GetAtt": [
       "Bigip1subnet1Az1Interface",
       "PrimaryPrivateIpAddress"
      ]
     },
     {
      "Fn::GetAtt": [
       "Bigip1Staticsubnet1Az1Interface",
       "PrimaryPrivateIpAddress"
      ]
     }
    ]
   }
  },
  "Bigip1InstanceId": {
   "Description": "Instance Id of BIG-IP in Amazon",
   "Value": {
    "Ref": "Bigip1Instance"
   }
  },
  "Bigip1InternalInterface": {
   "Description": "Internal interface ID on BIG-IP",
   "Value": {
    "Fn::If": [
     "useDynamicInternalIpAddr",
     {
      "Ref": "Bigip1InternalInterface"
     },
     {
      "Ref": "Bigip1StaticInternalInterface"
     }
    ]
   }
  },
  "Bigip1InternalInterfacePrivateIp": {
   "Description": "Internally routable IP of internal interface on BIG-IP",
   "Value": {
    "Fn::If": [
     "useDynamicInternalIpAddr",
     {
      "Fn::GetAtt": [
       "Bigip1InternalInterface",
       "PrimaryPrivateIpAddress"
      ]
     },
     {
      "Fn::GetAtt": [
       "Bigip1StaticInternalInterface",
       "PrimaryPrivateIpAddress"
      ]
     }
    ]
   }
  },
  "Bigip1ManagementEipAddress": {
   "Condition": "usePublicIP",
   "Description": "IP address of the management port on BIG-IP",
   "Value": {
    "Ref": "Bigip1ManagementEipAddress"
   }
  },
  "Bigip1ManagementInterface": {
   "Condition": "usePublicIP",
   "Description": "Management interface ID on BIG-IP",
   "Value": {
    "Fn::If": [
     "useDynamicManagementIpAddr",
     {
      "Ref": "Bigip1ManagementInterface"
     },
     {
      "Ref": "Bigip1StaticManagementInterface"
     }
    ]
   }
  },
  "Bigip1ManagementInterfacePrivateIp": {
   "Condition": "usePublicIP",
   "Description": "Internally routable IP of the management interface on BIG-IP",
   "Value": {
    "Fn::If": [
     "useDynamicManagementIpAddr",
     {
      "Fn::GetAtt": [
       "Bigip1ManagementInterface",
       "PrimaryPrivateIpAddress"
      ]
     },
     {
      "Fn::GetAtt": [
       "Bigip1StaticManagementInterface",
       "PrimaryPrivateIpAddress"
      ]
     }
    ]
   }
  },
  "Bigip1Url": {
   "Condition": "usePublicIP",
   "Description": "BIG-IP Management GUI",
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Fn::GetAtt": [
        "Bigip1Instance",
        "PublicIp"
       ]
      }
     ]
    ]
   }
  },
  "Bigip1VipEipAddress": {
   "Condition": "usePublicIP",
   "Description": "EIP address for VIP",
   "Value": {
    "Fn::Join": [
     "",
     [
      "http://",
      {
       "Ref": "Bigip1VipEipAddress"
      },
      ":80"
     ]
    ]
   }
  },
  "Bigip1VipPrivateIp": {
   "Condition": "usePublicIP",
   "Description": "VIP on External Interface Secondary IP 1",
   "Value": {
    "Fn::If": [
     "useDynamicExternalIpAddr",
     {
      "Fn::Select": [
       "0",
       {
        "Fn::GetAtt": [
         "Bigip1subnet1Az1Interface",
         "SecondaryPrivateIpAddresses"
        ]
       }
      ]
     },
     {
      "Fn::Select": [
       "0",
       {
        "Fn::GetAtt": [
         "Bigip1Staticsubnet1Az1Interface",
         "SecondaryPrivateIpAddresses"
        ]
       }
      ]
     }
    ]
   }
  },
  "Bigip1subnet1Az1Interface": {
   "Description": "External interface Id on BIG-IP",
   "Value": {
    "Fn::If": [
     "useDynamicExternalIpAddr",
     {
      "Ref": "Bigip1subnet1Az1Interface"
     },
     {
      "Ref": "Bigip1Staticsubnet1Az1Interface"
     }
    ]
   }
  },
  "Bigip1subnet1Az1SelfEipAddress": {
   "Condition": "usePublicIP",
   "Description": "IP Address of the External interface attached to BIG-IP",
   "Value": {
    "Ref": "Bigip1subnet1Az1SelfEipAddress"
   }
  },
  "availabilityZone1": {
   "Description": "Availability Zone",
   "Value": {
    "Fn::GetAtt": [
     "Bigip1Instance",
     "AvailabilityZone"
    ]
   }
  },
  "bigipExternalSecurityGroup": {
   "Description": "Public or External Security Group",
   "Value": {
    "Ref": "bigipExternalSecurityGroup"
   }
  },
  "bigipInternalSecurityGroup": {
   "Description": "Private or Internal Security Group",
   "Value": {
    "Ref": "bigipInternalSecurityGroup"
   }
  },
  "bigipManagementSecurityGroup": {
   "Description": "Management Security Group",
   "Value": {
    "Ref": "bigipManagementSecurityGroup"
   }
  }
 },
 "Parameters": {
  "Vpc": {
   "ConstraintDescription": "This must be an existing VPC within the working region.",
   "Type": "AWS::EC2::VPC::Id"
  },
  "allowPhoneHome": {
   "AllowedValues": [
    "Yes",
    "No"
   ],
   "Default": "Yes",
   "Description": "This deployment can send anonymous device statistics to F5 to help us determine how to improve our solutions. If you select **No** statistics are not sent.",
   "Type": "String"
  },
  "allowUsageAnalytics": {
   "AllowedValues": [
    "Yes",
    "No"
   ],
   "Default": "Yes",
   "Description": "This deployment can send anonymous template statistics to F5 to help us determine how to improve our solutions. If you select **No** statistics are not sent.",
   "Type": "String"
  },
  "application": {
   "Default": "f5app",
   "Description": "Name of the Application Tag",
   "Type": "String"
  },
  "bigIpModules": {
   "Default": "ltm:nominal",
   "Description": "Comma separated list of modules and levels to provision, for example: ltm:nominal,asm:nominal",
   "Type": "String"
  },
  "costcenter": {
   "Default": "f5costcenter",
   "Description": "Name of the Cost Center Tag",
   "Type": "String"
  },
  "customImageId": {
   "ConstraintDescription": "Must be a valid AMI Id",
   "Default": "OPTIONAL",
   "Description": "If you would like to deploy using a custom BIG-IP image, provide the AMI Id.  **Note**: Unless specifically required, leave the default of **OPTIONAL**",
   "MaxLength": 255,
   "MinLength": 1,
   "Type": "String"
  },
  "declarationUrl": {
   "AllowedPattern": "^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$|^none$",
   "Default": "none",
   "Description": "URL for the AS3 declaration JSON file to be deployed. Leave as **none** to deploy without a service configuration.",
   "Type": "String"
  },
  "environment": {
   "Default": "f5env",
   "Description": "Name of the Environment Tag",
   "Type": "String"
  },
  "group": {
   "Default": "f5group",
   "Description": "Name of the Group Tag",
   "Type": "String"
  },
  "imageName": {
   "AllowedValues": [
    "Good25Mbps",
    "Good200Mbps",
    "Good1000Mbps",
    "Good5000Mbps",
    "Good10000Mbps",
    "Good16vCPU",
    "Better25Mbps",
    "Better200Mbps",
    "Better1000Mbps",
    "Better5000Mbps",
    "Better10000Mbps",
    "Best25Mbps",
    "Best200Mbps",
    "Best1000Mbps",
    "Best5000Mbps",
    "Best10000Mbps",
    "AdvancedWaf25Mbps",
    "AdvancedWaf200Mbps",
    "PerAppVeAwaf25Mbps",
    "PerAppVeAwaf200Mbps",
    "PerAppVeLtm25Mbps",
    "PerAppVeLtm200Mbps"
   ],
   "ConstraintDescription": "Must be a valid F5 BIG-IP VE image type",
   "Default": "Best1000Mbps",
   "Description": "F5 BIG-IP Performance Type",
   "Type": "String"
  },
  "instanceType": {
   "AllowedValues": [
    "m5.xlarge",
    "m5.4xlarge",
    "m5.large",
    "m5.12xlarge",
    "m4.xlarge",
    "m4.large",
    "m4.4xlarge",
    "m4.2xlarge",
    "m4.16xlarge",
    "m4.10xlarge",
    "m3.xlarge",
    "m3.medium",
    "m3.large",
    "t3.large",
    "m3.2xlarge",
    "cc2.8xlarge",
    "c5.xlarge",
    "c5.large",
    "c5.4xlarge",
    "c5.9xlarge",
    "c4.xlarge",
    "c4.8xlarge",
    "c4.4xlarge",
    "c4.2xlarge",
    "c3.xlarge",
    "c3.8xlarge",
    "c3.4xlarge",
    "c3.2xlarge",
    "c5n.2xlarge",
    "c5n.4xlarge"
   ],
   "ConstraintDescription": "Must be a valid EC2 instance type for BIG-IP",
   "Default": "m5.xlarge",
   "Description": "Size of the F5 BIG-IP Virtual Instance",
   "Type": "String"
  },
  "managementSubnetAz1": {
   "ConstraintDescription": "The subnet ID must be within an existing VPC",
   "Description": "Management Subnet ID",
   "Type": "AWS::EC2::Subnet::Id"
  },
  "managementSubnetAz1Address": {
   "Default": "DYNAMIC",
   "Description": "Optional. If you want to assign a static IP address in the subnet, type it here.  Otherwise leave DYNAMIC and a dynamic address is assigned based on the subnet you specified.",
   "Type": "String"
  },
  "ntpServer": {
   "Default": "0.pool.ntp.org",
   "Description": "NTP server for this implementation",
   "Type": "String"
  },
  "owner": {
   "Default": "f5owner",
   "Description": "Name of the Owner Tag",
   "Type": "String"
  },
  "provisionPublicIP": {
   "AllowedValues": [
    "Yes",
    "No"
   ],
   "Default": "Yes",
   "Description": "Whether or not to provision Public IP Addresses for the BIG-IP Network Interfaces. By Default no Public IP addresses are provisioned.",
   "Type": "String"
  },
  "restrictedSrcAddress": {
   "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
   "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x.",
   "Description": " The IP address range used to SSH and access managment GUI on the EC2 instances",
   "MaxLength": "18",
   "MinLength": "9",
   "Type": "String"
  },
  "restrictedSrcAddressApp": {
   "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
   "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x.",
   "Description": " The IP address range that can be used to access web traffic (80/443) to the EC2 instances",
   "MaxLength": "18",
   "MinLength": "9",
   "Type": "String"
  },
  "sshKey": {
   "Description": "EC2 KeyPair to enable SSH access to the BIG-IP instance",
   "Type": "AWS::EC2::KeyPair::KeyName"
  },
  "subnet1Az1": {
   "ConstraintDescription": "The subnet ID must be within an existing VPC",
   "Description": "Public or External subnet",
   "Type": "AWS::EC2::Subnet::Id"
  },
  "subnet1Az1Address": {
   "Default": "DYNAMIC",
   "Description": "Optional. If you want to assign static IP address(es) in the subnet, type them here.  Separate multiple IP addresses with a comma (the first is the Primary IP address, all others are Secondary).  Otherwise leave DYNAMIC and a dynamic address is assigned based on the subnet you specified.",
   "Type": "String"
  },
  "subnet2Az1": {
   "ConstraintDescription": "The subnet ID must be within an existing VPC",
   "Description": "Private or Internal subnet ID",
   "Type": "AWS::EC2::Subnet::Id"
  },
  "subnet2Az1Address": {
   "Default": "DYNAMIC",
   "Description": "Optional. If you want to assign a static IP address in the subnet, type it here.  Otherwise leave DYNAMIC and a dynamic address is assigned based on the subnet you specified.",
   "Type": "String"
  },
  "timezone": {
   "Default": "UTC",
   "Description": "Enter the Olson timezone string from /usr/share/zoneinfo. The default is 'UTC'. See the TZ column here (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) for legal values. For example, 'US/Eastern'.",
   "Type": "String"
  }
 },
 "Resources": {
  "Bigip1Instance": {
   "Metadata": {
    "AWS::CloudFormation::Init": {
     "config": {
      "commands": {
       "000-disable-1nicautoconfig": {
        "command": "/usr/bin/setdb provision.1nicautoconfig disable"
       },
       "010-install-libs": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "mkdir -p /var/log/cloud/aws;",
           "nohup /config/installCloudLibs.sh",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "040-network-config": {
        "command": {
         "Fn::Join": [
          "",
          [
           "GATEWAY_MAC=`cat external_mac | awk '{print tolower($2)}'`\n",
           "TOKEN=`/usr/bin/curl -sS --retry 20 -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 120'`\n",
           "GATEWAY_CIDR_BLOCK=`/usr/bin/curl -s -f --retry 20 -H 'X-aws-ec2-metadata-token: '$TOKEN'' http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC}/subnet-ipv4-cidr-block`; ",
           "GATEWAY_NET=${GATEWAY_CIDR_BLOCK%/*}; ",
           "GATEWAY_PREFIX=${GATEWAY_CIDR_BLOCK#*/}; ",
           "GATEWAY=`echo ${GATEWAY_NET} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`; ",
           "GATEWAY_MAC2=`cat internal_mac | awk '{print tolower($2)}'`\n",
           "GATEWAY_CIDR_BLOCK2=`/usr/bin/curl -s -f --retry 20 -H 'X-aws-ec2-metadata-token: '$TOKEN'' http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC2}/subnet-ipv4-cidr-block`; ",
           "GATEWAY_PREFIX2=${GATEWAY_CIDR_BLOCK2#*/}; ",
           "nohup /config/waitThenRun.sh ",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/network.js ",
           "--host localhost ",
           "-o /var/log/cloud/aws/network.log ",
           "--log-level silly ",
           "--signal NETWORK_CONFIG_DONE ",
           "--vlan name:external,nic:1.1 ",
           "--default-gw ${GATEWAY} ",
           "--self-ip name:external-self,address:",
           {
            "Fn::If": [
             "useDynamicExternalIpAddr",
             {
              "Fn::GetAtt": [
               "Bigip1subnet1Az1Interface",
               "PrimaryPrivateIpAddress"
              ]
             },
             {
              "Fn::GetAtt": [
               "Bigip1Staticsubnet1Az1Interface",
               "PrimaryPrivateIpAddress"
              ]
             }
            ]
           },
           "/${GATEWAY_PREFIX},vlan:external ",
           "--vlan name:internal,nic:1.2 ",
           "--self-ip name:internal-self,address:",
           {
            "Fn::If": [
             "useDynamicInternalIpAddr",
             {
              "Fn::GetAtt": [
               "Bigip1InternalInterface",
               "PrimaryPrivateIpAddress"
              ]
             },
             {
              "Fn::GetAtt": [
               "Bigip1StaticInternalInterface",
               "PrimaryPrivateIpAddress"
              ]
             }
            ]
           },
           "/${GATEWAY_PREFIX2},vlan:internal ",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "050-onboard-BIG-IP": {
        "command": {
         "Fn::If": [
          "optin",
          {
           "Fn::Join": [
            " ",
            [
             "REGION=\"",
             {
              "Ref": "AWS::Region"
             },
             "\";",
             "DEPLOYMENTID=`echo \"",
             {
              "Ref": "AWS::StackId"
             },
             "\"|sha512sum|cut -d \" \" -f 1`;",
             "CUSTOMERID=`echo \"",
             {
              "Ref": "AWS::AccountId"
             },
             "\"|sha512sum|cut -d \" \" -f 1`;",
             "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth0`;",
             "nohup /config/waitThenRun.sh",
             "TOKEN=`/usr/bin/curl -sS --retry 20 -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 120'`;",
             "HOSTNAME=`/usr/bin/curl -sS --retry 20 -H 'X-aws-ec2-metadata-token: '$TOKEN'' http://169.254.169.254/latest/meta-data/hostname`;",
             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
             "--wait-for NETWORK_CONFIG_DONE",
             "--signal ONBOARD_DONE",
             "-o /var/log/cloud/aws/onboard.log",
             "--log-level silly",
             "--no-reboot",
             "--host localhost",
             "--hostname ${HOSTNAME}",
             "--ntp ",
             {
              "Ref": "ntpServer"
             },
             "--tz ",
             {
              "Ref": "timezone"
             },
             "--dns ${NAME_SERVER}",
             "--modules ",
             {
              "Ref": "bigIpModules"
             },
             "--metrics \"cloudName:aws,region:${REGION},bigIpVersion:16.1.2.1-0.0.10,customerId:${CUSTOMERID},deploymentId:${DEPLOYMENTID},templateName:f5-existing-stack-payg-3nic-bigip.template,templateVersion:5.14.0,licenseType:hourly\"",
             "-d tm.tcpudptxchecksum:software-only ",
             "--ping",
             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          },
          {
           "Fn::Join": [
            " ",
            [
             "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth0`;",
             "nohup /config/waitThenRun.sh",
             "TOKEN=`/usr/bin/curl -sS --retry 20 -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 120'`;",
             "HOSTNAME=`/usr/bin/curl -sS --retry 20 -H 'X-aws-ec2-metadata-token: '$TOKEN'' http://169.254.169.254/latest/meta-data/hostname`;",
             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
             "--wait-for NETWORK_CONFIG_DONE",
             "--signal ONBOARD_DONE",
             "-o /var/log/cloud/aws/onboard.log",
             "--log-level silly",
             "--no-reboot",
             "--host localhost",
             "--hostname ${HOSTNAME}",
             "--ntp ",
             {
              "Ref": "ntpServer"
             },
             "--tz ",
             {
              "Ref": "timezone"
             },
             "--dns ${NAME_SERVER}",
             "--modules ",
             {
              "Ref": "bigIpModules"
             },
             "-d tm.tcpudptxchecksum:software-only ",
             "--ping",
             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          }
         ]
        }
       },
       "055-custom-config": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           "--file /config/cloud/aws/custom-config.sh",
           "--cwd /config/cloud/aws",
           "-o /var/log/cloud/aws/custom-config.log",
           "--log-level silly",
           "--wait-for ONBOARD_DONE",
           "--signal CUSTOM_CONFIG_DONE",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "060-cluster": {
        "command": {
         "Fn::Join": [
          " ",
          []
         ]
        }
       },
       "065-cfe": {
        "command": {
         "Fn::Join": [
          " ",
          []
         ]
        }
       }
      },
      "files": {
       "/config/cloud/aws/custom-config.sh": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "TOKEN=`/usr/bin/curl -sS --retry 20 -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 120'`\n",
           "PROGNAME=$(basename $0)\n",
           "function error_exit {\n",
           "echo \"${PROGNAME}: ${1:-\\\"Unknown Error\\\"}\" 1>&2\n",
           "exit 1\n",
           "}\n",
           "declare -a tmsh=()\n",
           "echo 'starting custom-config.sh'\n",
           "source /config/cloud/aws/onboard_config_vars\n",
           "if [[ $allowPhoneHome == \"No\" ]]; then\n",
           "    tmsh+=(\n",
           "    \"tmsh modify sys software update auto-phonehome disabled\")\n",
           "fi\n",
           "tmsh+=(\n",
           "\"tmsh save /sys config\")\n",
           "for CMD in \"${tmsh[@]}\"\n",
           "do\n",
           "  \"/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/waitForMcp.sh\"\n",
           "    if $CMD;then\n",
           "        echo \"command $CMD successfully executed.\"\n",
           "    else\n",
           "        error_exit \"$LINENO: An error has occurred while executing $CMD. Aborting!\"\n",
           "    fi\n",
           "done\n",
           "date\n",
           "### START CUSTOM CONFIGURATION\n",
           "deployed=\"no\"\n",
           "url_regex=\"(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$\"\n",
           "file_loc=\"/config/cloud/custom_config\"\n",
           "if [[ $declarationUrl =~ $url_regex ]]; then\n",
           "  response_code=$(/usr/bin/curl -sk -w \"%{http_code}\" $declarationUrl -o $file_loc)\n",
           "  if [[ $response_code == 200 ]]; then\n",
           "    echo \"Custom config download complete; checking for valid JSON.\"\n",
           "    cat $file_loc | jq .class\n",
           "    if [[ $? == 0 ]]; then\n",
           "      response_code=$(/usr/bin/curl -svvu admin: -w \"%{http_code}\" -X POST -H \"Content-Type: application/json\" -H \"Expect:\" http://localhost:8100/mgmt/shared/appsvcs/declare -d @$file_loc -o /dev/null)\n",
           "      if [[ $response_code == 200 || $response_code == 502 ]]; then\n",
           "        echo \"Deployment of custom application succeeded.\"\n",
           "        deployed=\"yes\"\n",
           "      else\n",
           "         echo \"Failed to deploy custom application; continuing...\"\n",
           "      fi\n",
           "    else\n",
           "      echo \"Custom config was not valid JSON, continuing...\"\n",
           "    fi\n",
           "  else\n",
           "    echo \"Failed to download custom config; continuing...\"\n",
           "  fi\n",
           "else\n",
           "  echo \"Custom config was not a URL, continuing...\"\n",
           "fi\n",
           "### END CUSTOM CONFIGURATION"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/getNameServer.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "INTERFACE=$1",
           "INTERFACE_MAC=`ifconfig ${INTERFACE} | egrep ether | awk '{print tolower($2)}'`",
           "TOKEN=`/usr/bin/curl -sS --retry 20 -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 120'`",
           "VPC_CIDR_BLOCK=`/usr/bin/curl -s -f --retry 20 -H 'X-aws-ec2-metadata-token: '$TOKEN'' http://169.254.169.254/latest/meta-data/network/interfaces/macs/${INTERFACE_MAC}/vpc-ipv4-cidr-block`",
           "VPC_NET=${VPC_CIDR_BLOCK%/*}",
           "NAME_SERVER=`echo ${VPC_NET} | awk -F. '{ printf \"%d.%d.%d.%d\", $1, $2, $3, $4+2 }'`",
           "echo $NAME_SERVER"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/onboard_config_vars": {
        "content": {
         "Fn::Join": [
          "",
          [
           "",
           "#!/bin/bash\n",
           "# Generated from 5.14.0\n",
           "TOKEN=`/usr/bin/curl -sS --retry 20 -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 120'`\n",
           "HOSTNAME=`/usr/bin/curl -sS --retry 20 -H 'X-aws-ec2-metadata-token: '$TOKEN'' http://169.254.169.254/latest/meta-data/hostname`\n",
           "region='",
           {
            "Ref": "AWS::Region"
           },
           "'\n",
           "adminUsername='srv_user'\n",
           "timezone='",
           {
            "Ref": "timezone"
           },
           "'\n",
           "ntpServer='",
           {
            "Ref": "ntpServer"
           },
           "'\n",
           "declarationUrl='",
           {
            "Ref": "declarationUrl"
           },
           "'\n",
           "allowPhoneHome='",
           {
            "Ref": "allowPhoneHome"
           },
           "'\n",
           "passwd=$(f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/decryptDataFromFile.js --data-file /config/cloud/aws/.adminPassword)\n",
           "managementGuiPort='443'\n"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/f5-cloud-libs-aws.tar.gz": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "http://cdn.f5.com/product/cloudsolutions/f5-cloud-libs-aws/v2.10.0/f5-cloud-libs-aws.tar.gz"
       },
       "/config/cloud/f5-cloud-libs.tar.gz": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "http://cdn.f5.com/product/cloudsolutions/f5-cloud-libs/v4.26.5/f5-cloud-libs.tar.gz"
       },
       "/config/installCloudLibs.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "#!/bin/bash",
           "echo about to execute",
           "checks=0",
           "while [ $checks -lt 120 ]; do echo checking mcpd",
           "    tmsh -a show sys mcp-state field-fmt | grep -q running",
           "    if [ $? == 0 ]; then",
           "        echo mcpd ready",
           "        break",
           "    fi",
           "    echo mcpd not ready yet",
           "    let checks=checks+1",
           "    sleep 10",
           "done",
           "echo loading verifyHash script",
           "if ! tmsh load sys config merge file /config/verifyHash; then",
           "    echo cannot validate signature of /config/verifyHash",
           "    exit",
           "fi",
           "echo loaded verifyHash",
           "declare -a filesToVerify=(\"/config/cloud/f5-cloud-libs.tar.gz\" \"/config/cloud/f5-cloud-libs-aws.tar.gz\")",
           "for fileToVerify in \"${filesToVerify[@]}\"",
           "do",
           "    echo verifying \"$fileToVerify\"",
           "    if ! tmsh run cli script verifyHash \"$fileToVerify\"; then",
           "        echo \"$fileToVerify\" is not valid",
           "        exit 1",
           "    fi",
           "    echo verified \"$fileToVerify\"",
           "done",
           "mkdir -p /config/cloud/aws/node_modules/@f5devcentral",
           "echo expanding f5-cloud-libs.tar.gz",
           "tar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
           "echo installing dependencies",
           "tar xvfz /config/cloud/f5-cloud-libs-aws.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
           "echo cloud libs install complete",
           "touch /config/cloud/cloudLibsReady"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/verifyHash": {
        "content": "cli script /Common/verifyHash {\nproc script::run {} {\n        if {[catch {\n            set hashes(f5-cloud-libs.tar.gz) e8d962e295a60687310b50cbf1085c3bc69c76c29439cbce6141a5677d89ffadde9aa1e7308a854486aaba798ce98e35bd25feb9fcc6d9402a9b72ec87856361\n            set hashes(f5-cloud-libs-aws.tar.gz) 091ea7b18aca7f18a0ec377a6886d5d666cc81349eafa5725ab0758ddcc17c10e03737195384eafd63c117d25913c15a11284d2cc3b221d7ba3c31422172142b\n            set hashes(f5-cloud-libs-azure.tar.gz) e7973a1fe85b5a832c5ecd1cfce66b43b84e42cf2a06b2751734f79812de187ee1ad8730a129cb08198a452157c466bb87180c17dfd2e09b49be6efe9e9a57fe\n            set hashes(f5-cloud-libs-gce.tar.gz) cd95a5cc36c39f80f95476ad000f7dcc21a9fef414c8edac82be2e491c0fa9eba51b145f75ba0f3c0dae48e1c731432217b3bb700f71fe1912152dbe439e8967\n            set hashes(f5-cloud-libs-openstack.tar.gz) 5c83fe6a93a6fceb5a2e8437b5ed8cc9faf4c1621bfc9e6a0779f6c2137b45eab8ae0e7ed745c8cf821b9371245ca29749ca0b7e5663949d77496b8728f4b0f9\n            set hashes(f5-cloud-libs-consul.tar.gz) a32aab397073df92cbbba5067e5823e9b5fafca862a258b60b6b40aa0975c3989d1e110f706177b2ffbe4dde65305a260a5856594ce7ad4ef0c47b694ae4a513\n            set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0\n            set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034\n            set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe\n            set hashes(f5.http.v1.2.0rc7.tmpl) 21f413342e9a7a281a0f0e1301e745aa86af21a697d2e6fdc21dd279734936631e92f34bf1c2d2504c201f56ccd75c5c13baa2fe7653213689ec3c9e27dff77d\n            set hashes(f5.aws_advanced_ha.v1.3.0rc1.tmpl) 9e55149c010c1d395abdae3c3d2cb83ec13d31ed39424695e88680cf3ed5a013d626b326711d3d40ef2df46b72d414b4cb8e4f445ea0738dcbd25c4c843ac39d\n            set hashes(f5.aws_advanced_ha.v1.4.0rc1.tmpl) de068455257412a949f1eadccaee8506347e04fd69bfb645001b76f200127668e4a06be2bbb94e10fefc215cfc3665b07945e6d733cbe1a4fa1b88e881590396\n            set hashes(f5.aws_advanced_ha.v1.4.0rc2.tmpl) 6ab0bffc426df7d31913f9a474b1a07860435e366b07d77b32064acfb2952c1f207beaed77013a15e44d80d74f3253e7cf9fbbe12a90ec7128de6facd097d68f\n            set hashes(f5.aws_advanced_ha.v1.4.0rc3.tmpl) 2f2339b4bc3a23c9cfd42aae2a6de39ba0658366f25985de2ea53410a745f0f18eedc491b20f4a8dba8db48970096e2efdca7b8efffa1a83a78e5aadf218b134\n            set hashes(f5.aws_advanced_ha.v1.4.0rc4.tmpl) 2418ac8b1f1884c5c096cbac6a94d4059aaaf05927a6a4508fd1f25b8cc6077498839fbdda8176d2cf2d274a27e6a1dae2a1e3a0a9991bc65fc74fc0d02ce963\n            set hashes(f5.aws_advanced_ha.v1.4.0rc5.tmpl) 5e582187ae1a6323e095d41eddd41151d6bd38eb83c634410d4527a3d0e246a8fc62685ab0849de2ade62b0275f51264d2deaccbc16b773417f847a4a1ea9bc4\n            set hashes(asm-policy.tar.gz) 2d39ec60d006d05d8a1567a1d8aae722419e8b062ad77d6d9a31652971e5e67bc4043d81671ba2a8b12dd229ea46d205144f75374ed4cae58cefa8f9ab6533e6\n            set hashes(deploy_waf.sh) 1a3a3c6274ab08a7dc2cb73aedc8d2b2a23cd9e0eb06a2e1534b3632f250f1d897056f219d5b35d3eed1207026e89989f754840fd92969c515ae4d829214fb74\n            set hashes(f5.policy_creator.tmpl) 06539e08d115efafe55aa507ecb4e443e83bdb1f5825a9514954ef6ca56d240ed00c7b5d67bd8f67b815ee9dd46451984701d058c89dae2434c89715d375a620\n            set hashes(f5.service_discovery.tmpl) 4811a95372d1dbdbb4f62f8bcc48d4bc919fa492cda012c81e3a2fe63d7966cc36ba8677ed049a814a930473234f300d3f8bced2b0db63176d52ac99640ce81b\n            set hashes(f5.cloud_logger.v1.0.0.tmpl) 64a0ed3b5e32a037ba4e71d460385fe8b5e1aecc27dc0e8514b511863952e419a89f4a2a43326abb543bba9bc34376afa114ceda950d2c3bd08dab735ff5ad20\n            set hashes(f5-appsvcs-3.5.1-5.noarch.rpm) ba71c6e1c52d0c7077cdb25a58709b8fb7c37b34418a8338bbf67668339676d208c1a4fef4e5470c152aac84020b4ccb8074ce387de24be339711256c0fa78c8\n            set hashes(f5-appsvcs-3.18.0-4.noarch.rpm) e72ee8005a27070ac399ab097e8aa507a72aae4721d7491589cfeb821db3ef86cbc979e796ab319ec727bb51400ccda813c4b9eb4a6b3d1220a396b582f8f400\n            set hashes(f5-appsvcs-3.20.0-3.noarch.rpm) d4bba8892a2068bb53f88c6090dc65f17707abca35a7ed2fff39980057fe7f7a2ebf710ab2284a1d83d70b7746beabad9df603017c0fd8728f7457661c95ac8d\n            set hashes(f5-appsvcs-3.25.0-3.noarch.rpm) 26f19bdaaa81cbe0421b3e08c09987f9dd0c54b05a626d6a21a836b34248d2d9d83095f0daad8e7a4a068e9ef99b89fbcd246ae8b617ac2b2456599157d0e8b3\n            set hashes(f5-appsvcs-3.26.1-1.noarch.rpm) b460e11679d38a96549b5041def27b419f1a41c8f788f9f8c7a034aa5cb5a8c9fd151c7c439bebd093fcd85cd8657f1c064551d9337566f9fc7e9506c55dc02c\n            set hashes(f5-appsvcs-3.31.0-6.noarch.rpm) 6506fde5d1c2e067662b513387dccda0281d3bbc604fc6dcf8e5740ae563748899f7f335e349006fe3f0e751cd70d4ef8be3701ae45dca305de649f259f090a9\n            set hashes(f5-cloud-failover-1.1.0-0.noarch.rpm) 15a440c299f9e4af86a3d0f5b0d75b0054385b95e47c3ef116d2e0bfb0041a26dcbf549028e2a26d2c718ec61446bd657be38fbbcd9db781efe5414c174ac68c\n            set hashes(f5-cloud-failover-1.3.0-0.noarch.rpm) 19681eb33d9f910c913f8180199485eb653b4b5ebeaae0b90a6ce8341d7a22fed8d21815b5ba148c468852d20cc26fad4c4242e50ecc184f1f8770dacced6f6a\n            set hashes(f5-cloud-failover-1.4.0-0.noarch.rpm) 49e9108a070e0c8713aeb7b330662358542e61b7c53a9d45108d37a9bf5246f9e4aaae10cc61064801dcccd20bfd5108347b0f694510e7ece07f96c45ba683b0\n            set hashes(f5-cloud-failover-1.5.0-0.noarch.rpm) 33a7e2d047106bcce681757a65240bfacedd48e13567e05fdb23a4b269d266aa5001f81158c3964dc297f0428db31c9df428002898d190285b349c59422a573b\n            set hashes(f5-cloud-failover-1.6.1-1.noarch.rpm) c1b842da21b8d1ba21b6eb63c8598a9ea9986d5daddc21e4d280e1d6b09d3db1de8ac7de5c84edf07b43e4af03daf8fe747a4048f6573d955206352cde2cec65\n            set hashes(f5-cloud-failover-1.7.1-1.noarch.rpm) 14ff0cd2bb49780cc0ae3021c4fc8fcc096e3fce2258096a4aa026d6d37de728ca7345bfe3a79031e336e74d25a2b40ff28324c2c752bf0ee71b7fc89b6fc8fe\n            set hashes(f5-cloud-failover-1.8.0-0.noarch.rpm) 23086d1cbf3cb24eac7eba2305156c600fa21f1b896321a2fa5225d331d7e41471edb3f5368144d86848a4520b1e005c014485ff451e7da6429053f58bfe8ce4\n            set hashes(f5-cloud-failover-1.9.0-0.noarch.rpm) 09c15377389ac18313370635fb99f9aff05970807cc60bff074f80f664023cfc0d9f5b7f2ed7a8f879deb2da84a034bb9fa9f4e95f9806d644af518db32f1425\n\n            set file_path [lindex $tmsh::argv 1]\n            set file_name [file tail $file_path]\n\n            if {![info exists hashes($file_name)]} {\n                tmsh::log err \"No hash found for $file_name\"\n                exit 1\n            }\n\n            set expected_hash $hashes($file_name)\n            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]\n            if { $expected_hash eq $computed_hash } {\n                exit 0\n            }\n            tmsh::log err \"Hash does not match for $file_path\"\n            exit 1\n        }]} {\n            tmsh::log err {Unexpected error in verifyHash}\n            exit 1\n        }\n    }\n    script-signature ijLcWdlwi4nfvIH4/jPFJ1Y9XkodKVduq7EFWjeWk0xwfN5rVLkBshuROFJNtonWl5uv2KZG0STT8GcE/Di96uh6UVjDJC0gHwHqEFkjdO3UEqPwo09RQ3lliWroF3xakk9VQ9RtSAH+XQrF59MmAUDkSOyeT/CuF7ApJ4WErcbZrsxia3TiRGBdUWmz0/XCfW4/faEBGTAT6ANw0aLVqwkcgjqY/KwMqXYHLNUvkQboJBfmYUNAug3Z329j7QSdCBlopBOdpmZ3Rq5DOBmy9zQwa0wm911zX12IJliGFQL0amTM+we1hHCWDWtd5iCNkwietksBXR6J31eigC5SgA==\n    signing-key /Common/f5-irule\n}",
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/waitThenRun.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "#!/bin/bash",
           "while true; do echo \"waiting for cloud libs install to complete\"",
           "    if [ -f /config/cloud/cloudLibsReady ]; then",
           "        break",
           "    else",
           "        sleep 10",
           "    fi",
           "done",
           "\"$@\""
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       }
      }
     }
    }
   },
   "Properties": {
    "BlockDeviceMappings": [
     {
      "DeviceName": "/dev/xvda",
      "Ebs": {
       "DeleteOnTermination": true,
       "VolumeSize": 100,
       "VolumeType": "gp2"
      }
     },
     {
      "DeviceName": "/dev/xvdb",
      "NoDevice": {}
     }
    ],
    "IamInstanceProfile": {
     "Ref": "bigipServiceDiscoveryProfile"
    },
    "ImageId": {
     "Fn::If": [
      "noCustomImageId",
      {
       "Fn::FindInMap": [
        "BigipRegionMap",
        {
         "Ref": "AWS::Region"
        },
        {
         "Ref": "imageName"
        }
       ]
      },
      {
       "Ref": "customImageId"
      }
     ]
    },
    "InstanceType": {
     "Ref": "instanceType"
    },
    "KeyName": {
     "Ref": "sshKey"
    },
    "NetworkInterfaces": [
     {
      "Description": "Management Interface",
      "DeviceIndex": "0",
      "NetworkInterfaceId": {
       "Fn::If": [
        "useDynamicManagementIpAddr",
        {
         "Ref": "Bigip1ManagementInterface"
        },
        {
         "Ref": "Bigip1StaticManagementInterface"
        }
       ]
      }
     },
     {
      "Description": "Public or External Interface",
      "DeviceIndex": "1",
      "NetworkInterfaceId": {
       "Fn::If": [
        "useDynamicExternalIpAddr",
        {
         "Ref": "Bigip1subnet1Az1Interface"
        },
        {
         "Ref": "Bigip1Staticsubnet1Az1Interface"
        }
       ]
      }
     },
     {
      "Description": "Private or Internal Interface",
      "DeviceIndex": "2",
      "NetworkInterfaceId": {
       "Fn::If": [
        "useDynamicInternalIpAddr",
        {
         "Ref": "Bigip1InternalInterface"
        },
        {
         "Ref": "Bigip1StaticInternalInterface"
        }
       ]
      }
     }
    ],
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "application"
      }
     },
     {
      "Key": "Costcenter",
      "Value": {
       "Ref": "costcenter"
      }
     },
     {
      "Key": "Environment",
      "Value": {
       "Ref": "environment"
      }
     },
     {
      "Key": "Group",
      "Value": {
       "Ref": "group"
      }
     },
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "Big-IP: ",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     },
     {
      "Key": "Owner",
      "Value": {
       "Ref": "owner"
      }
     }
    ],
    "UserData": {
     "Fn::Base64": {
      "Fn::Join": [
       "",
       [
        "#!/bin/bash\n",
        "/usr/bin/setdb provision.extramb 1000\n",
        "/usr/bin/setdb restjavad.useextramb true\n",
        "cat << EOF >> runtime-init-config.yaml\n",
        "controls:\n",
        "  logLevel: info\n",
        "  logFilename: /var/log/cloud/bigIpRuntimeInit.log\n",
        "pre_onboard_enabled:\n",
        "  - name: get_ifconfig\n",
        "    type: inline\n",
        "    commands:\n",
        "      - ifconfig eth1 | grep ether > external_mac || exit 0\n",
        "      - ifconfig eth2 | grep ether > internal_mac || exit 0\n",
        "extension_packages:\n",
        "  install_operations:\n",
        "    - extensionType: as3\n",
        "      extensionVersion: 3.34.0\n",
        "      extensionHash: 05a80ec0848dc5b8876b78a8fbee2980d5a1671d635655b3af604dc830d5fed4\n",
        "EOF\n",
        "/usr/bin/curl -fv --retry 1 --connect-timeout 5 -L http://cdn.f5.com/product/cloudsolutions/f5-bigip-runtime-init/v1.4.1/dist/f5-bigip-runtime-init-1.4.1-1.gz.run -o f5-bigip-runtime-init-1.4.1-1.gz.run\n",
        "bash f5-bigip-runtime-init-1.4.1-1.gz.run -- '--cloud aws'\n",
        "f5-bigip-runtime-init --config-file runtime-init-config.yaml --skip-telemetry\n",
        "/opt/aws/apitools/cfn-init/bin/cfn-init -v -s ",
        {
         "Ref": "AWS::StackId"
        },
        " -r ",
        "Bigip1Instance",
        " --region ",
        {
         "Ref": "AWS::Region"
        },
        "\n"
       ]
      ]
     }
    }
   },
   "Type": "AWS::EC2::Instance"
  },
  "Bigip1InternalInterface": {
   "Condition": "useDynamicInternalIpAddr",
   "Properties": {
    "Description": "Internal Interface for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipInternalSecurityGroup"
     }
    ],
    "SubnetId": {
     "Ref": "subnet2Az1"
    }
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip1ManagementEipAddress": {
   "Condition": "usePublicIP",
   "Properties": {
    "Domain": "vpc"
   },
   "Type": "AWS::EC2::EIP"
  },
  "Bigip1ManagementEipAssociation": {
   "Condition": "usePublicIP",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "Bigip1ManagementEipAddress",
      "AllocationId"
     ]
    },
    "NetworkInterfaceId": {
     "Fn::If": [
      "useDynamicManagementIpAddr",
      {
       "Ref": "Bigip1ManagementInterface"
      },
      {
       "Ref": "Bigip1StaticManagementInterface"
      }
     ]
    }
   },
   "Type": "AWS::EC2::EIPAssociation"
  },
  "Bigip1ManagementInterface": {
   "Condition": "useDynamicManagementIpAddr",
   "Properties": {
    "Description": "Management Interface for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipManagementSecurityGroup"
     }
    ],
    "SubnetId": {
     "Ref": "managementSubnetAz1"
    }
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip1StaticInternalInterface": {
   "Condition": "useStaticInternalIpAddr",
   "Properties": {
    "Description": "Internal Interface for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipInternalSecurityGroup"
     }
    ],
    "PrivateIpAddress": {
     "Ref": "subnet2Az1Address"
    },
    "SubnetId": {
     "Ref": "subnet2Az1"
    }
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip1StaticManagementInterface": {
   "Condition": "useStaticManagementIpAddr",
   "Properties": {
    "Description": "Management Interface for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipManagementSecurityGroup"
     }
    ],
    "PrivateIpAddress": {
     "Ref": "managementSubnetAz1Address"
    },
    "SubnetId": {
     "Ref": "managementSubnetAz1"
    }
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip1Staticsubnet1Az1Interface": {
   "Condition": "useStaticExternalIpAddr",
   "Properties": {
    "Description": "Public External Interface for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipExternalSecurityGroup"
     }
    ],
    "PrivateIpAddresses": [
     {
      "Primary": true,
      "PrivateIpAddress": {
       "Fn::Select": [
        "0",
        {
         "Fn::Split": [
          ",",
          {
           "Ref": "subnet1Az1Address"
          }
         ]
        }
       ]
      }
     },
     {
      "Primary": false,
      "PrivateIpAddress": {
       "Fn::Select": [
        "1",
        {
         "Fn::Split": [
          ",",
          {
           "Ref": "subnet1Az1Address"
          }
         ]
        }
       ]
      }
     }
    ],
    "SubnetId": {
     "Ref": "subnet1Az1"
    }
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip1VipEipAddress": {
   "Condition": "usePublicIP",
   "Properties": {
    "Domain": "vpc"
   },
   "Type": "AWS::EC2::EIP"
  },
  "Bigip1VipEipAssociation": {
   "Condition": "usePublicIP",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "Bigip1VipEipAddress",
      "AllocationId"
     ]
    },
    "NetworkInterfaceId": {
     "Fn::If": [
      "useDynamicExternalIpAddr",
      {
       "Ref": "Bigip1subnet1Az1Interface"
      },
      {
       "Ref": "Bigip1Staticsubnet1Az1Interface"
      }
     ]
    },
    "PrivateIpAddress": {
     "Fn::If": [
      "useDynamicExternalIpAddr",
      {
       "Fn::Select": [
        "0",
        {
         "Fn::GetAtt": [
          "Bigip1subnet1Az1Interface",
          "SecondaryPrivateIpAddresses"
         ]
        }
       ]
      },
      {
       "Fn::Select": [
        "0",
        {
         "Fn::GetAtt": [
          "Bigip1Staticsubnet1Az1Interface",
          "SecondaryPrivateIpAddresses"
         ]
        }
       ]
      }
     ]
    }
   },
   "Type": "AWS::EC2::EIPAssociation"
  },
  "Bigip1subnet1Az1Interface": {
   "Condition": "useDynamicExternalIpAddr",
   "Properties": {
    "Description": "Public External Interface for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipExternalSecurityGroup"
     }
    ],
    "SecondaryPrivateIpAddressCount": 1,
    "SubnetId": {
     "Ref": "subnet1Az1"
    }
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip1subnet1Az1SelfEipAddress": {
   "Condition": "usePublicIP",
   "Properties": {
    "Domain": "vpc"
   },
   "Type": "AWS::EC2::EIP"
  },
  "Bigip1subnet1Az1SelfEipAssociation": {
   "Condition": "usePublicIP",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "Bigip1subnet1Az1SelfEipAddress",
      "AllocationId"
     ]
    },
    "NetworkInterfaceId": {
     "Fn::If": [
      "useDynamicExternalIpAddr",
      {
       "Ref": "Bigip1subnet1Az1Interface"
      },
      {
       "Ref": "Bigip1Staticsubnet1Az1Interface"
      }
     ]
    },
    "PrivateIpAddress": {
     "Fn::If": [
      "useDynamicExternalIpAddr",
      {
       "Fn::GetAtt": [
        "Bigip1subnet1Az1Interface",
        "PrimaryPrivateIpAddress"
       ]
      },
      {
       "Fn::GetAtt": [
        "Bigip1Staticsubnet1Az1Interface",
        "PrimaryPrivateIpAddress"
       ]
      }
     ]
    }
   },
   "Type": "AWS::EC2::EIPAssociation"
  },
  "bigipExternalSecurityGroup": {
   "Properties": {
    "GroupDescription": "Public or external interface rules",
    "SecurityGroupIngress": [
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddressApp"
      },
      "FromPort": 80,
      "IpProtocol": "tcp",
      "ToPort": 80
     },
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddressApp"
      },
      "FromPort": 443,
      "IpProtocol": "tcp",
      "ToPort": 443
     }
    ],
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "application"
      }
     },
     {
      "Key": "Costcenter",
      "Value": {
       "Ref": "costcenter"
      }
     },
     {
      "Key": "Environment",
      "Value": {
       "Ref": "environment"
      }
     },
     {
      "Key": "Group",
      "Value": {
       "Ref": "group"
      }
     },
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "Bigip External Security Group:",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     },
     {
      "Key": "Owner",
      "Value": {
       "Ref": "owner"
      }
     }
    ],
    "VpcId": {
     "Ref": "Vpc"
    }
   },
   "Type": "AWS::EC2::SecurityGroup"
  },
  "bigipInternalSecurityGroup": {
   "Properties": {
    "GroupDescription": "Allow All from Intra-VPC only",
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "application"
      }
     },
     {
      "Key": "Costcenter",
      "Value": {
       "Ref": "costcenter"
      }
     },
     {
      "Key": "Environment",
      "Value": {
       "Ref": "environment"
      }
     },
     {
      "Key": "Group",
      "Value": {
       "Ref": "group"
      }
     },
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "Bigip Internal Security Group:",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     },
     {
      "Key": "Owner",
      "Value": {
       "Ref": "owner"
      }
     }
    ],
    "VpcId": {
     "Ref": "Vpc"
    }
   },
   "Type": "AWS::EC2::SecurityGroup"
  },
  "bigipManagementSecurityGroup": {
   "Properties": {
    "GroupDescription": "BIG-IP management interface policy",
    "SecurityGroupIngress": [
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddress"
      },
      "FromPort": 22,
      "IpProtocol": "tcp",
      "ToPort": 22
     },
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddress"
      },
      "FromPort": 443,
      "IpProtocol": "tcp",
      "ToPort": 443
     }
    ],
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "application"
      }
     },
     {
      "Key": "Costcenter",
      "Value": {
       "Ref": "costcenter"
      }
     },
     {
      "Key": "Environment",
      "Value": {
       "Ref": "environment"
      }
     },
     {
      "Key": "Group",
      "Value": {
       "Ref": "group"
      }
     },
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "Bigip Management Security Group:",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     },
     {
      "Key": "Owner",
      "Value": {
       "Ref": "owner"
      }
     }
    ],
    "VpcId": {
     "Ref": "Vpc"
    }
   },
   "Type": "AWS::EC2::SecurityGroup"
  },
  "bigipServiceDiscoveryAccessRole": {
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "ec2.amazonaws.com"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Path": "/",
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "ec2:DescribeInstances",
          "ec2:DescribeInstanceStatus",
          "ec2:DescribeAddresses",
          "ec2:AssociateAddress",
          "ec2:DisassociateAddress",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeNetworkInterfaceAttribute",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSubnets",
          "ec2:assignprivateipaddresses"
         ],
         "Effect": "Allow",
         "Resource": [
          "*"
         ]
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "BigipServiceDiscoveryPolicy"
     }
    ]
   },
   "Type": "AWS::IAM::Role"
  },
  "bigipServiceDiscoveryProfile": {
   "Properties": {
    "Path": "/",
    "Roles": [
     {
      "Ref": "bigipServiceDiscoveryAccessRole"
     }
    ]
   },
   "Type": "AWS::IAM::InstanceProfile"
  }
 }
}
