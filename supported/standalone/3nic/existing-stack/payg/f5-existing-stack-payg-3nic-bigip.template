{
 "AWSTemplateFormatVersion": "2010-09-09",
 "Conditions": {
  "noCustomImageId": {
   "Fn::Equals": [
    "OPTIONAL",
    {
     "Ref": "customImageId"
    }
   ]
  },
  "optin": {
   "Fn::Equals": [
    "Yes",
    {
     "Ref": "allowUsageAnalytics"
    }
   ]
  },
  "useDynamicExternalIpAddr": {
   "Fn::Or": [
    {
     "Fn::Equals": [
      "DYNAMIC",
      {
       "Ref": "subnet1Az1Address"
      }
     ]
    },
    {
     "Fn::Equals": [
      "",
      {
       "Ref": "subnet1Az1Address"
      }
     ]
    }
   ]
  },
  "useDynamicInternalIpAddr": {
   "Fn::Or": [
    {
     "Fn::Equals": [
      "DYNAMIC",
      {
       "Ref": "subnet2Az1Address"
      }
     ]
    },
    {
     "Fn::Equals": [
      "",
      {
       "Ref": "subnet2Az1Address"
      }
     ]
    }
   ]
  },
  "useDynamicManagementIpAddr": {
   "Fn::Or": [
    {
     "Fn::Equals": [
      "DYNAMIC",
      {
       "Ref": "managementSubnetAz1Address"
      }
     ]
    },
    {
     "Fn::Equals": [
      "",
      {
       "Ref": "managementSubnetAz1Address"
      }
     ]
    }
   ]
  },
  "usePublicIP": {
   "Fn::Equals": [
    "Yes",
    {
     "Ref": "provisionPublicIP"
    }
   ]
  },
  "useStaticExternalIpAddr": {
   "Fn::Not": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        "DYNAMIC",
        {
         "Ref": "subnet1Az1Address"
        }
       ]
      },
      {
       "Fn::Equals": [
        "",
        {
         "Ref": "subnet1Az1Address"
        }
       ]
      }
     ]
    }
   ]
  },
  "useStaticInternalIpAddr": {
   "Fn::Not": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        "DYNAMIC",
        {
         "Ref": "subnet2Az1Address"
        }
       ]
      },
      {
       "Fn::Equals": [
        "",
        {
         "Ref": "subnet2Az1Address"
        }
       ]
      }
     ]
    }
   ]
  },
  "useStaticManagementIpAddr": {
   "Fn::Not": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        "DYNAMIC",
        {
         "Ref": "managementSubnetAz1Address"
        }
       ]
      },
      {
       "Fn::Equals": [
        "",
        {
         "Ref": "managementSubnetAz1Address"
        }
       ]
      }
     ]
    }
   ]
  }
 },
 "Description": "Template v6.2.0: AWS CloudFormation Template for creating a 3NIC BIG-IP in an existing VPC **WARNING** This template creates Amazon EC2 Instances. You will be billed for the AWS resources used if you create a stack from this template.",
 "Mappings": {
  "BigipRegionMap": {
   "af-south-1": {
    "AdvancedWaf200Mbps": "ami-011caea06bc2fbe66",
    "AdvancedWaf25Mbps": "ami-0b16d846ff91d1b8a",
    "AdvancedWaf3000Mbps": "ami-0ef966c1a7b90bc5e",
    "Best10000Mbps": "ami-02fe4702696a2c4fc",
    "Best1000Mbps": "ami-0810a41991a60d27c",
    "Best200Mbps": "ami-0ddb68b2effda1f98",
    "Best25Mbps": "ami-0a7712f77bca6d31a",
    "Best5000Mbps": "ami-007cc2950826a9052",
    "Better10000Mbps": "ami-07d3f5f299e1389fc",
    "Better1000Mbps": "ami-004d75ee2705bcb9c",
    "Better200Mbps": "ami-003e0523829912b03",
    "Better25Mbps": "ami-05400e22e8e7f8988",
    "Better5000Mbps": "ami-06e8b380796558cfe",
    "Good10000Mbps": "ami-04b88999d96556540",
    "Good1000Mbps": "ami-0b882af7a23850a7a",
    "Good200Mbps": "ami-04a05de5ebb40e357",
    "Good25Mbps": "ami-0604610905d0780e8",
    "Good5000Mbps": "ami-0bd0bab0dbdd3a9ac",
    "PerAppVeAwaf200Mbps": "ami-0caf09d81548147b7",
    "PerAppVeAwaf25Mbps": "ami-0b974b6bc0b2e4fac"
   },
   "ap-east-1": {
    "AdvancedWaf200Mbps": "ami-08a90dc84fe495f70",
    "AdvancedWaf25Mbps": "ami-078c06bdbcc47f127",
    "AdvancedWaf3000Mbps": "ami-06df70893d5b27ca5",
    "Best10000Mbps": "ami-0d971c7acd742498d",
    "Best1000Mbps": "ami-06c35f2c8d2a57e64",
    "Best200Mbps": "ami-0c412ba8c5b2b477a",
    "Best25Mbps": "ami-0c6705a4fe38577f2",
    "Best5000Mbps": "ami-0e9099b397b0187bc",
    "Better10000Mbps": "ami-03724b4d7874b2f99",
    "Better1000Mbps": "ami-00591c901a6a7e9d2",
    "Better200Mbps": "ami-0d4f06b8047ac3dd4",
    "Better25Mbps": "ami-06da970235a2dad08",
    "Better5000Mbps": "ami-0a2c3a156ee7daf97",
    "Good10000Mbps": "ami-0b794bc8c2f73b6e3",
    "Good1000Mbps": "ami-03bebf1a2c25d4ac8",
    "Good200Mbps": "ami-054db96b832d033d2",
    "Good25Mbps": "ami-066b73306e3d5325f",
    "Good5000Mbps": "ami-04f605ebd5b7da7f0",
    "PerAppVeAwaf200Mbps": "ami-04246d109bdba660d",
    "PerAppVeAwaf25Mbps": "ami-026f424ca683c60bb"
   },
   "ap-northeast-1": {
    "AdvancedWaf200Mbps": "ami-097dc8a0c40a376fd",
    "AdvancedWaf25Mbps": "ami-08a0686c05170413f",
    "AdvancedWaf3000Mbps": "ami-0c794a8e7ec7e1fad",
    "Best10000Mbps": "ami-04169f92d01b7b587",
    "Best1000Mbps": "ami-0315dd33ce7089cc8",
    "Best200Mbps": "ami-0b9d6ad738266dabf",
    "Best25Mbps": "ami-07a5053b6e14a9570",
    "Best5000Mbps": "ami-023e394d38042c8ef",
    "Better10000Mbps": "ami-0ebf86759fd286776",
    "Better1000Mbps": "ami-050bfff5029cab0b8",
    "Better200Mbps": "ami-01fdb8b34f01eec4b",
    "Better25Mbps": "ami-011b3091b804b6d3b",
    "Better5000Mbps": "ami-00197c08a97e3458a",
    "Good10000Mbps": "ami-0baff673e7d899ab5",
    "Good1000Mbps": "ami-03175a3ff247ea7d6",
    "Good200Mbps": "ami-04c5805431360cecf",
    "Good25Mbps": "ami-0d54135f22d12165c",
    "Good5000Mbps": "ami-07090f2af318e1f78",
    "PerAppVeAwaf200Mbps": "ami-0cf54173b21382f4b",
    "PerAppVeAwaf25Mbps": "ami-0a88b7b99514b0dd5"
   },
   "ap-northeast-2": {
    "AdvancedWaf200Mbps": "ami-0ffbee3902aa0ac7b",
    "AdvancedWaf25Mbps": "ami-048852322eaeea587",
    "AdvancedWaf3000Mbps": "ami-0c5fc27d3b692900e",
    "Best10000Mbps": "ami-0fcedfe4ab5b2cfc1",
    "Best1000Mbps": "ami-0ca0dcf9dd5c7f53e",
    "Best200Mbps": "ami-0bb2fe2d8285a759a",
    "Best25Mbps": "ami-0ac5d3947737e4282",
    "Best5000Mbps": "ami-0f38006c06a19436b",
    "Better10000Mbps": "ami-0b42319e75eb16276",
    "Better1000Mbps": "ami-0da50ee32319070ad",
    "Better200Mbps": "ami-060d97588a45f3b1c",
    "Better25Mbps": "ami-05f5e300453cf78f4",
    "Better5000Mbps": "ami-06b2b732a63bcdec5",
    "Good10000Mbps": "ami-0cfaca8f788d0966e",
    "Good1000Mbps": "ami-0c7b6f427038d1975",
    "Good200Mbps": "ami-093e72514bb14c945",
    "Good25Mbps": "ami-042a5b4d17356d85e",
    "Good5000Mbps": "ami-0cce88b7a2514350f",
    "PerAppVeAwaf200Mbps": "ami-00a1f0f64de36baa9",
    "PerAppVeAwaf25Mbps": "ami-08e85de8505519a1f"
   },
   "ap-northeast-3": {
    "AdvancedWaf200Mbps": "ami-095dcdb6df5b0e852",
    "AdvancedWaf25Mbps": "ami-0ec1104ecafe9fb99",
    "AdvancedWaf3000Mbps": "ami-02f8ad542289de3f4",
    "Best10000Mbps": "ami-0f55c573c9b95dec6",
    "Best1000Mbps": "ami-08d5039c756a40f73",
    "Best200Mbps": "ami-0f3e428ba5e95ee9d",
    "Best25Mbps": "ami-05ac87813d1018116",
    "Best5000Mbps": "ami-0f0bcca239b974c5b",
    "Better10000Mbps": "ami-039ecf18b460b9da5",
    "Better1000Mbps": "ami-0776f2c63a9610122",
    "Better200Mbps": "ami-04684b0275952bee9",
    "Better25Mbps": "ami-07fce924266562506",
    "Better5000Mbps": "ami-0e51e35a5f2c38800",
    "Good10000Mbps": "ami-0846547d5f05790e5",
    "Good1000Mbps": "ami-0d8507f1abec62f74",
    "Good200Mbps": "ami-0f887c36b7bab49e1",
    "Good25Mbps": "ami-0bde86e27eb37655e",
    "Good5000Mbps": "ami-06bdd88ac4fd6d092",
    "PerAppVeAwaf200Mbps": "ami-01da1628b09061439",
    "PerAppVeAwaf25Mbps": "ami-050abbd3e457ff0a3"
   },
   "ap-south-1": {
    "AdvancedWaf200Mbps": "ami-0c4fef158a70eeecc",
    "AdvancedWaf25Mbps": "ami-0f2f29d6b5b7e83f4",
    "AdvancedWaf3000Mbps": "ami-011ae6957d5eca805",
    "Best10000Mbps": "ami-0c3bb98c91eeb782a",
    "Best1000Mbps": "ami-0de1fce65e7ad553c",
    "Best200Mbps": "ami-0da708c5aca7e2e91",
    "Best25Mbps": "ami-04b5f9c12eccdf7c8",
    "Best5000Mbps": "ami-04fe8914f418e1817",
    "Better10000Mbps": "ami-06c36c63c49864a6b",
    "Better1000Mbps": "ami-0280f879d021b46c1",
    "Better200Mbps": "ami-05fa3fdc5efcae212",
    "Better25Mbps": "ami-02196d8b58edd2b8b",
    "Better5000Mbps": "ami-00139ba57ade2246d",
    "Good10000Mbps": "ami-0234df645273a70cb",
    "Good1000Mbps": "ami-057b012d31019d0f2",
    "Good200Mbps": "ami-087d0be31f9816f54",
    "Good25Mbps": "ami-0d777ee37210164ee",
    "Good5000Mbps": "ami-064262c8a1c0b0c26",
    "PerAppVeAwaf200Mbps": "ami-00ee5fc7f2d547122",
    "PerAppVeAwaf25Mbps": "ami-02acd236b5da6b72f"
   },
   "ap-southeast-1": {
    "AdvancedWaf200Mbps": "ami-0c662cfb9d61aa0bc",
    "AdvancedWaf25Mbps": "ami-08d6a2b138cdee591",
    "AdvancedWaf3000Mbps": "ami-00dcbfba99924b665",
    "Best10000Mbps": "ami-005327192d003df4b",
    "Best1000Mbps": "ami-01f0ad01c18844e7f",
    "Best200Mbps": "ami-0bd55ccd90c798b89",
    "Best25Mbps": "ami-037c1d952d167df26",
    "Best5000Mbps": "ami-0378d9bdb1abc27cb",
    "Better10000Mbps": "ami-0a28e7f51a970d7df",
    "Better1000Mbps": "ami-09923ed009f1c44b5",
    "Better200Mbps": "ami-0354624780a90cfed",
    "Better25Mbps": "ami-02f21258eb28d576f",
    "Better5000Mbps": "ami-0eba18db858777951",
    "Good10000Mbps": "ami-06a051b6c8aba3765",
    "Good1000Mbps": "ami-06069711ed70fb287",
    "Good200Mbps": "ami-0e366d005fd8c158f",
    "Good25Mbps": "ami-0f57d119ae5d2475d",
    "Good5000Mbps": "ami-03da854b65a8f8268",
    "PerAppVeAwaf200Mbps": "ami-084d9c4e27dacdfff",
    "PerAppVeAwaf25Mbps": "ami-00b018e0ba5f78d02"
   },
   "ap-southeast-2": {
    "AdvancedWaf200Mbps": "ami-0aa0619790b918b32",
    "AdvancedWaf25Mbps": "ami-06a886a855ae0b335",
    "AdvancedWaf3000Mbps": "ami-0232665ca8a39a83a",
    "Best10000Mbps": "ami-0255da76488229d9f",
    "Best1000Mbps": "ami-059b588b0e67d670f",
    "Best200Mbps": "ami-070104d47461b2cdb",
    "Best25Mbps": "ami-00a6ba246206f36a0",
    "Best5000Mbps": "ami-0e4405d913da387bd",
    "Better10000Mbps": "ami-0c0144355ce7d81ea",
    "Better1000Mbps": "ami-0550435d46c8e4830",
    "Better200Mbps": "ami-0c4bd1fe4ae09b32c",
    "Better25Mbps": "ami-0fa0fcd273ea32f2f",
    "Better5000Mbps": "ami-090492e7266be13dd",
    "Good10000Mbps": "ami-00a2c2d5dc872325b",
    "Good1000Mbps": "ami-040ec0faf7fa35fd9",
    "Good200Mbps": "ami-0fec8523fad0b9e70",
    "Good25Mbps": "ami-0bc67ee2ba9e1e52c",
    "Good5000Mbps": "ami-004ad1163148c805e",
    "PerAppVeAwaf200Mbps": "ami-010e4963c1938e18d",
    "PerAppVeAwaf25Mbps": "ami-0d08eae23381c5648"
   },
   "ca-central-1": {
    "AdvancedWaf200Mbps": "ami-07425fd23dcfb0613",
    "AdvancedWaf25Mbps": "ami-08c7220a48303430e",
    "AdvancedWaf3000Mbps": "ami-06b33ddafad6159d3",
    "Best10000Mbps": "ami-08dea04616a29578d",
    "Best1000Mbps": "ami-0039b22e9b30490b2",
    "Best200Mbps": "ami-096b5c8bf652c59cc",
    "Best25Mbps": "ami-030a9b896a6c51ced",
    "Best5000Mbps": "ami-005cc3963d67b23ef",
    "Better10000Mbps": "ami-059b1f43b311561ba",
    "Better1000Mbps": "ami-0251ecc16ace5c9c2",
    "Better200Mbps": "ami-0c0e75554fb50b86e",
    "Better25Mbps": "ami-0aa43314b7d08d622",
    "Better5000Mbps": "ami-060fb1592f8e3c85e",
    "Good10000Mbps": "ami-025c712afba98e28b",
    "Good1000Mbps": "ami-04a2f46868f80b58d",
    "Good200Mbps": "ami-07866cc2b8034101c",
    "Good25Mbps": "ami-0beff42017a265a71",
    "Good5000Mbps": "ami-0999837ef14f8dea2",
    "PerAppVeAwaf200Mbps": "ami-0011966a95ef00396",
    "PerAppVeAwaf25Mbps": "ami-07dc01e7de64f90c3"
   },
   "eu-central-1": {
    "AdvancedWaf200Mbps": "ami-0d8c137b9ff67efe9",
    "AdvancedWaf25Mbps": "ami-07e8da3f098a0b467",
    "AdvancedWaf3000Mbps": "ami-07e5cf8adbfad22a8",
    "Best10000Mbps": "ami-04b2b2f06fea991ef",
    "Best1000Mbps": "ami-0f73ce12226baca95",
    "Best200Mbps": "ami-0dcec2e47a25a5cf9",
    "Best25Mbps": "ami-07068d9d0c962e635",
    "Best5000Mbps": "ami-09d245432228cfbaa",
    "Better10000Mbps": "ami-0357e16d1e1559cfd",
    "Better1000Mbps": "ami-0ec0be7dc439933d7",
    "Better200Mbps": "ami-0c049f8a9c79f5256",
    "Better25Mbps": "ami-0d9adfda5914b991d",
    "Better5000Mbps": "ami-063039291b05ad26b",
    "Good10000Mbps": "ami-0930d500ddc5ab5fd",
    "Good1000Mbps": "ami-0b3f1e587e6a553e8",
    "Good200Mbps": "ami-0e1af3dd9e3b522ec",
    "Good25Mbps": "ami-0ed7a93d932d2ae97",
    "Good5000Mbps": "ami-0cd57f57f2b16c99f",
    "PerAppVeAwaf200Mbps": "ami-0597eb376637026ce",
    "PerAppVeAwaf25Mbps": "ami-018d79840f144ef01"
   },
   "eu-north-1": {
    "AdvancedWaf200Mbps": "ami-0919a55ac1184fefe",
    "AdvancedWaf25Mbps": "ami-0c5592b5e4f77ce5a",
    "AdvancedWaf3000Mbps": "ami-00fbd0eb9c75b0edd",
    "Best10000Mbps": "ami-074eafbfa3edb87fb",
    "Best1000Mbps": "ami-0f3b04e1746fa561c",
    "Best200Mbps": "ami-05c47acbfe9b3515a",
    "Best25Mbps": "ami-048911e6928b54586",
    "Best5000Mbps": "ami-0d50a09cc01250e33",
    "Better10000Mbps": "ami-0c9ada2de74ca10d6",
    "Better1000Mbps": "ami-0824a1d977a93b5b2",
    "Better200Mbps": "ami-0af474b1a225ec17d",
    "Better25Mbps": "ami-0d92afb647268ffb7",
    "Better5000Mbps": "ami-0f5b609a69238d746",
    "Good10000Mbps": "ami-05f0429bbb79b069d",
    "Good1000Mbps": "ami-04144eb7da6e08db7",
    "Good200Mbps": "ami-07db9ff897c2521fd",
    "Good25Mbps": "ami-04f6acd50d61c16b6",
    "Good5000Mbps": "ami-047bd436d691aa007",
    "PerAppVeAwaf200Mbps": "ami-00df401067e0b27d3",
    "PerAppVeAwaf25Mbps": "ami-0e8792cdb90b5a6e1"
   },
   "eu-south-1": {
    "AdvancedWaf200Mbps": "ami-0417c9402c14f2758",
    "AdvancedWaf25Mbps": "ami-09b551f70e0fc13ff",
    "AdvancedWaf3000Mbps": "ami-07170c9527806506d",
    "Best10000Mbps": "ami-0fe4b1f16c10ff0b1",
    "Best1000Mbps": "ami-0e513fb9d1d73db49",
    "Best200Mbps": "ami-0100d0a7318e8471b",
    "Best25Mbps": "ami-02b520f395b630d5f",
    "Best5000Mbps": "ami-08f180bde39e61495",
    "Better10000Mbps": "ami-0279597e56883a629",
    "Better1000Mbps": "ami-006cad68ceb243a82",
    "Better200Mbps": "ami-0ad461f107b1d7801",
    "Better25Mbps": "ami-0881a6a88677a8714",
    "Better5000Mbps": "ami-022b6c346e8102691",
    "Good10000Mbps": "ami-0ddb8f7df663faea6",
    "Good1000Mbps": "ami-0a1019e5351ba1e72",
    "Good200Mbps": "ami-07cdab124e5b6e041",
    "Good25Mbps": "ami-0dbf3879d51a2625d",
    "Good5000Mbps": "ami-0356e3700140a8143",
    "PerAppVeAwaf200Mbps": "ami-09efcd7fbff5ce18c",
    "PerAppVeAwaf25Mbps": "ami-0b06ff9a5bd13a2dc"
   },
   "eu-west-1": {
    "AdvancedWaf200Mbps": "ami-0d357960a481fa374",
    "AdvancedWaf25Mbps": "ami-00af243d9c899e8db",
    "AdvancedWaf3000Mbps": "ami-0d860d8c6d608a2cb",
    "Best10000Mbps": "ami-0544119327af81e06",
    "Best1000Mbps": "ami-0c388fa72c260be20",
    "Best200Mbps": "ami-0f6ac037fd553a8a2",
    "Best25Mbps": "ami-0c866f563c3907b7e",
    "Best5000Mbps": "ami-02cfaca053a728618",
    "Better10000Mbps": "ami-03e9481f262f1455a",
    "Better1000Mbps": "ami-0ad42f5eb04def8ee",
    "Better200Mbps": "ami-03db27f2b8ef2fa28",
    "Better25Mbps": "ami-080d6d03e0512af22",
    "Better5000Mbps": "ami-0bb5daf583a3a802f",
    "Good10000Mbps": "ami-0b8d030733e632582",
    "Good1000Mbps": "ami-0c87b08a4514f2e30",
    "Good200Mbps": "ami-06ddf0edd08b5e66c",
    "Good25Mbps": "ami-07a810c168591c43b",
    "Good5000Mbps": "ami-0756f8b94c8e18ab7",
    "PerAppVeAwaf200Mbps": "ami-0f233f2fe4a825724",
    "PerAppVeAwaf25Mbps": "ami-05c6ad6ace2334a30"
   },
   "eu-west-2": {
    "AdvancedWaf200Mbps": "ami-05c7f2111804a0483",
    "AdvancedWaf25Mbps": "ami-08de0eb056b15c02e",
    "AdvancedWaf3000Mbps": "ami-0cffa05cfba82d81e",
    "Best10000Mbps": "ami-092e6321f8fdb8f53",
    "Best1000Mbps": "ami-0b69ea0b13e95efed",
    "Best200Mbps": "ami-0ec3bd9258ca839e7",
    "Best25Mbps": "ami-093cafb96cdf2a772",
    "Best5000Mbps": "ami-0ad34b4724e91160f",
    "Better10000Mbps": "ami-0769758bade4e9abc",
    "Better1000Mbps": "ami-0d69327fce20636e7",
    "Better200Mbps": "ami-0d351ef966e1aadf7",
    "Better25Mbps": "ami-03a8ae707e27ee295",
    "Better5000Mbps": "ami-0b2e71e993b2fab9b",
    "Good10000Mbps": "ami-051af6b2a5bb1b57a",
    "Good1000Mbps": "ami-093c162fdb765dab8",
    "Good200Mbps": "ami-0016ef507346e644a",
    "Good25Mbps": "ami-0b0920a66dca50adf",
    "Good5000Mbps": "ami-0ae7558779d9a36ed",
    "PerAppVeAwaf200Mbps": "ami-0fb93f605623a60f2",
    "PerAppVeAwaf25Mbps": "ami-0ad3c94204b19a6f4"
   },
   "eu-west-3": {
    "AdvancedWaf200Mbps": "ami-02c915575ac8f5580",
    "AdvancedWaf25Mbps": "ami-0e8f20b16840d4699",
    "AdvancedWaf3000Mbps": "ami-078adefb1dce964f6",
    "Best10000Mbps": "ami-0e552977e0bfb0a35",
    "Best1000Mbps": "ami-0ebd039fb2e61291a",
    "Best200Mbps": "ami-08587803ab042f609",
    "Best25Mbps": "ami-0c212321f4c595088",
    "Best5000Mbps": "ami-0c0017c97e4a22303",
    "Better10000Mbps": "ami-04213798667702562",
    "Better1000Mbps": "ami-08f213765b4fcf370",
    "Better200Mbps": "ami-04185f590502c0186",
    "Better25Mbps": "ami-0a8c15b63f37d6430",
    "Better5000Mbps": "ami-08a64307e1219a183",
    "Good10000Mbps": "ami-008bbf84f5fac35eb",
    "Good1000Mbps": "ami-0c1b193b71ff4f359",
    "Good200Mbps": "ami-05571a851f9c7c7e2",
    "Good25Mbps": "ami-0ddc3a10ce6bccf57",
    "Good5000Mbps": "ami-0c375e6c08e70aaba",
    "PerAppVeAwaf200Mbps": "ami-06cc7d50eb9ae5cb5",
    "PerAppVeAwaf25Mbps": "ami-01fbf426b00943299"
   },
   "me-south-1": {
    "AdvancedWaf200Mbps": "ami-0590444d306c03b63",
    "AdvancedWaf25Mbps": "ami-0b76911665cc67a5b",
    "AdvancedWaf3000Mbps": "ami-0b15e0d226ccba74e",
    "Best10000Mbps": "ami-0a26ded8bba53789c",
    "Best1000Mbps": "ami-080c923c67bfe9b94",
    "Best200Mbps": "ami-00230584a18ea2031",
    "Best25Mbps": "ami-0710fb31183a51998",
    "Best5000Mbps": "ami-03f99283d08ee43f4",
    "Better10000Mbps": "ami-09fc4ff7083ae8b09",
    "Better1000Mbps": "ami-054a562cc351f50e5",
    "Better200Mbps": "ami-0db815bf8133e2330",
    "Better25Mbps": "ami-0c632d174239a297d",
    "Better5000Mbps": "ami-08a057fd968621484",
    "Good10000Mbps": "ami-0845f28b99dc3a0f6",
    "Good1000Mbps": "ami-0985e74343f135676",
    "Good200Mbps": "ami-01dfd35433968293f",
    "Good25Mbps": "ami-0c8ab6fb6b93ed862",
    "Good5000Mbps": "ami-0ee1f02c1386e3411",
    "PerAppVeAwaf200Mbps": "ami-0377a367ce927d835",
    "PerAppVeAwaf25Mbps": "ami-02c92cb552004b2ff"
   },
   "sa-east-1": {
    "AdvancedWaf200Mbps": "ami-03e156c1dddc0316c",
    "AdvancedWaf25Mbps": "ami-0777322fd43b41c7b",
    "AdvancedWaf3000Mbps": "ami-07c6adc76bebd1503",
    "Best10000Mbps": "ami-0df28b9df037a312f",
    "Best1000Mbps": "ami-0f0882521d1140359",
    "Best200Mbps": "ami-09bd6e296a75bde55",
    "Best25Mbps": "ami-0fa805f2605cea562",
    "Best5000Mbps": "ami-0402fcd8bd75202c3",
    "Better10000Mbps": "ami-06c2a3e3da7040584",
    "Better1000Mbps": "ami-027bc3540d8b5aaf3",
    "Better200Mbps": "ami-0b0ee847aa087edf9",
    "Better25Mbps": "ami-08fddbaa7da2955ec",
    "Better5000Mbps": "ami-0200e5db7ef77975d",
    "Good10000Mbps": "ami-0216bcd6bc7f7b10f",
    "Good1000Mbps": "ami-0f5be726184394426",
    "Good200Mbps": "ami-0c2b2e4963a7bd78b",
    "Good25Mbps": "ami-0d878640e544852c6",
    "Good5000Mbps": "ami-08f20b003b7c6c629",
    "PerAppVeAwaf200Mbps": "ami-00e9d852102f1fbe8",
    "PerAppVeAwaf25Mbps": "ami-0506aa3d8d09558bc"
   },
   "us-east-1": {
    "AdvancedWaf200Mbps": "ami-0f80e43da3bbb3804",
    "AdvancedWaf25Mbps": "ami-000242ba8130e7c02",
    "AdvancedWaf3000Mbps": "ami-063899014553b402e",
    "Best10000Mbps": "ami-01d9b1e41b906dca1",
    "Best1000Mbps": "ami-0d572983d2c888329",
    "Best200Mbps": "ami-0806855dbffa15f5b",
    "Best25Mbps": "ami-01ec8df76d3981852",
    "Best5000Mbps": "ami-0fd52fb238265d7d3",
    "Better10000Mbps": "ami-031439632289abfd6",
    "Better1000Mbps": "ami-0f0b176a19f360692",
    "Better200Mbps": "ami-09c62b186afb1e9d3",
    "Better25Mbps": "ami-0d602515341ceb787",
    "Better5000Mbps": "ami-09b38ac13c38970aa",
    "Good10000Mbps": "ami-0f45bb7efba1e1c25",
    "Good1000Mbps": "ami-0bc27744524993a89",
    "Good200Mbps": "ami-0862aa880d8aa32ec",
    "Good25Mbps": "ami-01901ae8f82c2712e",
    "Good5000Mbps": "ami-02b22bfa4b969c5dc",
    "PerAppVeAwaf200Mbps": "ami-0d4e21a02f2cb1df7",
    "PerAppVeAwaf25Mbps": "ami-04f9d87b0b9ffd3bf"
   },
   "us-east-2": {
    "AdvancedWaf200Mbps": "ami-0e595af9aa93b5221",
    "AdvancedWaf25Mbps": "ami-01b46c1914cface1e",
    "AdvancedWaf3000Mbps": "ami-06522a6ef8a72a436",
    "Best10000Mbps": "ami-0c12e9616ee8967a3",
    "Best1000Mbps": "ami-0ef4952ef961119f0",
    "Best200Mbps": "ami-00735a1362b2e617c",
    "Best25Mbps": "ami-0ccde386ab9212559",
    "Best5000Mbps": "ami-06bf89c31f997212c",
    "Better10000Mbps": "ami-0b544a9e933aad5c8",
    "Better1000Mbps": "ami-0176538b063c002ae",
    "Better200Mbps": "ami-0e9e279c89fb2c82f",
    "Better25Mbps": "ami-01153e9eea7d45599",
    "Better5000Mbps": "ami-0ea858231ca24863d",
    "Good10000Mbps": "ami-0334fdbc638c20259",
    "Good1000Mbps": "ami-004fca42a837ae047",
    "Good200Mbps": "ami-0d52bec406e907a29",
    "Good25Mbps": "ami-0896cef066f9473f8",
    "Good5000Mbps": "ami-0d038a7088a872639",
    "PerAppVeAwaf200Mbps": "ami-06e136116e8545fb9",
    "PerAppVeAwaf25Mbps": "ami-0a10468f716d55ea6"
   },
   "us-gov-east-1": {
    "AdvancedWaf200Mbps": "ami-0ca34a042dac58ae4",
    "AdvancedWaf25Mbps": "ami-0bd8642a0954b9356",
    "AdvancedWaf3000Mbps": "ami-0cd2c0c21f79cb63f",
    "Best10000Mbps": "ami-0117168f85977fcce",
    "Best1000Mbps": "ami-02078cf2e4e3abe90",
    "Best200Mbps": "ami-0ab5a86a0234ff361",
    "Best25Mbps": "ami-0c94c237f0efecba9",
    "Best5000Mbps": "ami-01396c11ee537c8a7",
    "Better10000Mbps": "ami-0388b3353af0fef9d",
    "Better1000Mbps": "ami-0f9072efb4ac1f124",
    "Better200Mbps": "ami-0e1a28fa2f065dfad",
    "Better25Mbps": "ami-0d14bd7400ad959c0",
    "Better5000Mbps": "ami-04bb7fa638e78a1be",
    "Good10000Mbps": "ami-07347f4ba0aa5ad9b",
    "Good1000Mbps": "ami-0df8109a1e5fdd411",
    "Good200Mbps": "ami-0d695039ce3c070a3",
    "Good25Mbps": "ami-0431cb8e4dff0c9c6",
    "Good5000Mbps": "ami-02f0fb51779d7347e",
    "PerAppVeAwaf200Mbps": "ami-0094bdc249149f790",
    "PerAppVeAwaf25Mbps": "ami-088c31a2a16c10f35"
   },
   "us-gov-west-1": {
    "AdvancedWaf200Mbps": "ami-0deb1b53933d843d9",
    "AdvancedWaf25Mbps": "ami-06b61f39aaacdc6cb",
    "AdvancedWaf3000Mbps": "ami-00316e439cfff6fea",
    "Best10000Mbps": "ami-04ba7d69cb1dc0f82",
    "Best1000Mbps": "ami-0ac6032fb8177debe",
    "Best200Mbps": "ami-0246d208d9797b361",
    "Best25Mbps": "ami-0f36e8b5a3aff3582",
    "Best5000Mbps": "ami-01a6da3e82ed5a1e8",
    "Better10000Mbps": "ami-036108bfcc989e681",
    "Better1000Mbps": "ami-0269b3d575d9321b6",
    "Better200Mbps": "ami-0f173dea87aaad9e6",
    "Better25Mbps": "ami-03a1ca5438597223b",
    "Better5000Mbps": "ami-0727b92d41e818776",
    "Good10000Mbps": "ami-0570d432f457d1efd",
    "Good1000Mbps": "ami-0c0f240a8faa2b8b7",
    "Good200Mbps": "ami-0bd24a622416aac47",
    "Good25Mbps": "ami-028ca920aa7d33f2a",
    "Good5000Mbps": "ami-01bf1e79df99c8a74",
    "PerAppVeAwaf200Mbps": "ami-0541b50f0364ea3ad",
    "PerAppVeAwaf25Mbps": "ami-012f183a43eedf3ff"
   },
   "us-west-1": {
    "AdvancedWaf200Mbps": "ami-0bf29a8d0581da5e5",
    "AdvancedWaf25Mbps": "ami-0d8f1e19302d99a50",
    "AdvancedWaf3000Mbps": "ami-0b8760239a88b8446",
    "Best10000Mbps": "ami-08a6a122cb3a5f426",
    "Best1000Mbps": "ami-0574fe48b81f4bd69",
    "Best200Mbps": "ami-0b55c35fcd9c929e6",
    "Best25Mbps": "ami-07f280c565af7da44",
    "Best5000Mbps": "ami-0cc72af5bad78a72f",
    "Better10000Mbps": "ami-027d0d69c0016052e",
    "Better1000Mbps": "ami-0da161b76968fb703",
    "Better200Mbps": "ami-092c85f45be365806",
    "Better25Mbps": "ami-03068fb5b1d240e47",
    "Better5000Mbps": "ami-0e95fab229209100d",
    "Good10000Mbps": "ami-01374584ec7695d95",
    "Good1000Mbps": "ami-0e274019260682864",
    "Good200Mbps": "ami-08a3a478b6ef4a9a2",
    "Good25Mbps": "ami-0300aa97f1703a83e",
    "Good5000Mbps": "ami-0cadade12db2a8b3c",
    "PerAppVeAwaf200Mbps": "ami-062e2dcd789116408",
    "PerAppVeAwaf25Mbps": "ami-0abdc133fe15e7525"
   },
   "us-west-2": {
    "AdvancedWaf200Mbps": "ami-00b23e20fff3357cf",
    "AdvancedWaf25Mbps": "ami-057437d532043908e",
    "AdvancedWaf3000Mbps": "ami-0a46e90c5cc5e62b9",
    "Best10000Mbps": "ami-0bd7df9e6aca4eacc",
    "Best1000Mbps": "ami-02dc82ac96c8b9cb5",
    "Best200Mbps": "ami-052cf4642b1778493",
    "Best25Mbps": "ami-006f9e407b6d73ce8",
    "Best5000Mbps": "ami-087c469a4f2b4960e",
    "Better10000Mbps": "ami-08f5d40a0e4327dfe",
    "Better1000Mbps": "ami-0b3de545cdefa2b29",
    "Better200Mbps": "ami-0aaa6b7202c9e8ced",
    "Better25Mbps": "ami-042449457956088fb",
    "Better5000Mbps": "ami-0d6feedf9ed94b055",
    "Good10000Mbps": "ami-0402000330a234eaf",
    "Good1000Mbps": "ami-0ae0abf45c7c13fe8",
    "Good200Mbps": "ami-02012c3a47e578561",
    "Good25Mbps": "ami-07ff8bfd94fef61f0",
    "Good5000Mbps": "ami-0c55f4a6fbfbc61ed",
    "PerAppVeAwaf200Mbps": "ami-034ee98b539f631c8",
    "PerAppVeAwaf25Mbps": "ami-0f35a4fc43d88ab5c"
   }
  }
 },
 "Metadata": {
  "AWS::CloudFormation::Interface": {
   "ParameterGroups": [
    {
     "Label": {
      "default": "NETWORKING CONFIGURATION"
     },
     "Parameters": [
      "Vpc",
      "managementSubnetAz1",
      "managementSubnetAz1Address",
      "managementSubnetAz2",
      "subnet1Az1",
      "subnet1Az1Address",
      "subnet1Az2",
      "subnet2Az1",
      "subnet2Az1Address",
      "subnet2Az2",
      "availabilityZone1",
      "availabilityZone2",
      "numberOfAdditionalNics",
      "additionalNicLocation",
      "provisionPublicIP"
     ]
    },
    {
     "Label": {
      "default": "INSTANCE CONFIGURATION"
     },
     "Parameters": [
      "imageName",
      "customImageId",
      "instanceType",
      "applicationInstanceType",
      "licenseKey1",
      "licenseKey2",
      "managementGuiPort",
      "sshKey",
      "restrictedSrcAddress",
      "restrictedSrcAddressApp",
      "ntpServer",
      "timezone",
      "bigIpModules"
     ]
    },
    {
     "Label": {
      "default": "TAGS"
     },
     "Parameters": [
      "application",
      "environment",
      "group",
      "owner",
      "costcenter"
     ]
    },
    {},
    {
     "Label": {
      "default": "TEMPLATE ANALYTICS"
     },
     "Parameters": [
      "allowUsageAnalytics",
      "allowPhoneHome"
     ]
    },
    {
     "Label": {
      "default": "VIRTUAL SERVICE CONFIGURATION"
     },
     "Parameters": [
      "declarationUrl"
     ]
    }
   ],
   "ParameterLabels": {
    "Vpc": {
     "default": "VPC"
    },
    "additionalNicLocation": {
     "default": "Additional NIC Location"
    },
    "allowPhoneHome": {
     "default": "Send Anonymous Device Statistics to F5"
    },
    "allowUsageAnalytics": {
     "default": "Send Anonymous Template Statistics to F5"
    },
    "application": {
     "default": "Application"
    },
    "applicationInstanceType": {
     "default": "Application Instance Type"
    },
    "availabilityZone1": {
     "default": "Availability Zone 1"
    },
    "availabilityZone2": {
     "default": "Availability Zone 2"
    },
    "bigIpModules": {
     "default": "BIG-IP Modules"
    },
    "costcenter": {
     "default": "Cost Center"
    },
    "customImageId": {
     "default": "Custom Image Id"
    },
    "declarationUrl": {
     "default": "AS3 Declaration URL"
    },
    "environment": {
     "default": "Environment"
    },
    "group": {
     "default": "Group"
    },
    "imageName": {
     "default": "BIG-IP Image Name"
    },
    "instanceType": {
     "default": "AWS Instance Size"
    },
    "licenseKey1": {
     "default": "License Key 1"
    },
    "licenseKey2": {
     "default": "License Key 2"
    },
    "managementGuiPort": {
     "default": "BIG-IP Management Port"
    },
    "managementSubnetAz1": {
     "default": "Management Subnet AZ1"
    },
    "managementSubnetAz1Address": {
     "default": "Management Subnet AZ1 Static IP Address"
    },
    "managementSubnetAz2": {
     "default": "Management Subnet AZ2"
    },
    "ntpServer": {
     "default": "NTP Server"
    },
    "numberOfAdditionalNics": {
     "default": "Number Of Additional NICs"
    },
    "owner": {
     "default": "Owner"
    },
    "provisionPublicIP": {
     "default": "Provision Public IP addresses for the BIG-IP interfaces"
    },
    "restrictedSrcAddress": {
     "default": "Source Address(es) for Management Access"
    },
    "restrictedSrcAddressApp": {
     "default": "Source Address(es) for Web Application Access (80/443)"
    },
    "sshKey": {
     "default": "SSH Key"
    },
    "subnet1Az1": {
     "default": "Subnet1 in AZ1"
    },
    "subnet1Az1Address": {
     "default": "Subnet1 AZ1 Static IP Addresses"
    },
    "subnet1Az2": {
     "default": "Subnet1 in AZ2"
    },
    "subnet2Az1": {
     "default": "Subnet2 in AZ1"
    },
    "subnet2Az1Address": {
     "default": "Subnet2 AZ1 Static IP Address"
    },
    "subnet2Az2": {
     "default": "Subnet2 in AZ2"
    },
    "timezone": {
     "default": "Timezone (Olson)"
    }
   }
  },
  "Version": "6.2.0"
 },
 "Outputs": {
  "Bigip1ExternalInterfacePrivateIp": {
   "Description": "Internally routable IP of the public interface on BIG-IP",
   "Value": {
    "Fn::If": [
     "useDynamicExternalIpAddr",
     {
      "Fn::GetAtt": [
       "Bigip1subnet1Az1Interface",
       "PrimaryPrivateIpAddress"
      ]
     },
     {
      "Fn::GetAtt": [
       "Bigip1Staticsubnet1Az1Interface",
       "PrimaryPrivateIpAddress"
      ]
     }
    ]
   }
  },
  "Bigip1InstanceId": {
   "Description": "Instance Id of BIG-IP in Amazon",
   "Value": {
    "Ref": "Bigip1Instance"
   }
  },
  "Bigip1InternalInterface": {
   "Description": "Internal interface ID on BIG-IP",
   "Value": {
    "Fn::If": [
     "useDynamicInternalIpAddr",
     {
      "Ref": "Bigip1InternalInterface"
     },
     {
      "Ref": "Bigip1StaticInternalInterface"
     }
    ]
   }
  },
  "Bigip1InternalInterfacePrivateIp": {
   "Description": "Internally routable IP of internal interface on BIG-IP",
   "Value": {
    "Fn::If": [
     "useDynamicInternalIpAddr",
     {
      "Fn::GetAtt": [
       "Bigip1InternalInterface",
       "PrimaryPrivateIpAddress"
      ]
     },
     {
      "Fn::GetAtt": [
       "Bigip1StaticInternalInterface",
       "PrimaryPrivateIpAddress"
      ]
     }
    ]
   }
  },
  "Bigip1ManagementEipAddress": {
   "Condition": "usePublicIP",
   "Description": "IP address of the management port on BIG-IP",
   "Value": {
    "Ref": "Bigip1ManagementEipAddress"
   }
  },
  "Bigip1ManagementInterface": {
   "Condition": "usePublicIP",
   "Description": "Management interface ID on BIG-IP",
   "Value": {
    "Fn::If": [
     "useDynamicManagementIpAddr",
     {
      "Ref": "Bigip1ManagementInterface"
     },
     {
      "Ref": "Bigip1StaticManagementInterface"
     }
    ]
   }
  },
  "Bigip1ManagementInterfacePrivateIp": {
   "Condition": "usePublicIP",
   "Description": "Internally routable IP of the management interface on BIG-IP",
   "Value": {
    "Fn::If": [
     "useDynamicManagementIpAddr",
     {
      "Fn::GetAtt": [
       "Bigip1ManagementInterface",
       "PrimaryPrivateIpAddress"
      ]
     },
     {
      "Fn::GetAtt": [
       "Bigip1StaticManagementInterface",
       "PrimaryPrivateIpAddress"
      ]
     }
    ]
   }
  },
  "Bigip1Url": {
   "Condition": "usePublicIP",
   "Description": "BIG-IP Management GUI",
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Fn::GetAtt": [
        "Bigip1Instance",
        "PublicIp"
       ]
      }
     ]
    ]
   }
  },
  "Bigip1VipEipAddress": {
   "Condition": "usePublicIP",
   "Description": "EIP address for VIP",
   "Value": {
    "Fn::Join": [
     "",
     [
      "http://",
      {
       "Ref": "Bigip1VipEipAddress"
      },
      ":80"
     ]
    ]
   }
  },
  "Bigip1VipPrivateIp": {
   "Condition": "usePublicIP",
   "Description": "VIP on External Interface Secondary IP 1",
   "Value": {
    "Fn::If": [
     "useDynamicExternalIpAddr",
     {
      "Fn::Select": [
       "0",
       {
        "Fn::GetAtt": [
         "Bigip1subnet1Az1Interface",
         "SecondaryPrivateIpAddresses"
        ]
       }
      ]
     },
     {
      "Fn::Select": [
       "0",
       {
        "Fn::GetAtt": [
         "Bigip1Staticsubnet1Az1Interface",
         "SecondaryPrivateIpAddresses"
        ]
       }
      ]
     }
    ]
   }
  },
  "Bigip1subnet1Az1Interface": {
   "Description": "External interface Id on BIG-IP",
   "Value": {
    "Fn::If": [
     "useDynamicExternalIpAddr",
     {
      "Ref": "Bigip1subnet1Az1Interface"
     },
     {
      "Ref": "Bigip1Staticsubnet1Az1Interface"
     }
    ]
   }
  },
  "Bigip1subnet1Az1SelfEipAddress": {
   "Condition": "usePublicIP",
   "Description": "IP Address of the External interface attached to BIG-IP",
   "Value": {
    "Ref": "Bigip1subnet1Az1SelfEipAddress"
   }
  },
  "availabilityZone1": {
   "Description": "Availability Zone",
   "Value": {
    "Fn::GetAtt": [
     "Bigip1Instance",
     "AvailabilityZone"
    ]
   }
  },
  "bigipExternalSecurityGroup": {
   "Description": "Public or External Security Group",
   "Value": {
    "Ref": "bigipExternalSecurityGroup"
   }
  },
  "bigipInternalSecurityGroup": {
   "Description": "Private or Internal Security Group",
   "Value": {
    "Ref": "bigipInternalSecurityGroup"
   }
  },
  "bigipManagementSecurityGroup": {
   "Description": "Management Security Group",
   "Value": {
    "Ref": "bigipManagementSecurityGroup"
   }
  }
 },
 "Parameters": {
  "Vpc": {
   "ConstraintDescription": "This must be an existing VPC within the working region.",
   "Type": "AWS::EC2::VPC::Id"
  },
  "allowPhoneHome": {
   "AllowedValues": [
    "Yes",
    "No"
   ],
   "Default": "Yes",
   "Description": "This deployment can send anonymous device statistics to F5 to help us determine how to improve our solutions. If you select **No** statistics are not sent.",
   "Type": "String"
  },
  "allowUsageAnalytics": {
   "AllowedValues": [
    "Yes",
    "No"
   ],
   "Default": "Yes",
   "Description": "This deployment can send anonymous template statistics to F5 to help us determine how to improve our solutions. If you select **No** statistics are not sent.",
   "Type": "String"
  },
  "application": {
   "Default": "f5app",
   "Description": "Name of the Application Tag",
   "Type": "String"
  },
  "bigIpModules": {
   "Default": "ltm:nominal",
   "Description": "Comma separated list of modules and levels to provision, for example: ltm:nominal,asm:nominal",
   "Type": "String"
  },
  "costcenter": {
   "Default": "f5costcenter",
   "Description": "Name of the Cost Center Tag",
   "Type": "String"
  },
  "customImageId": {
   "ConstraintDescription": "Must be a valid AMI Id",
   "Default": "OPTIONAL",
   "Description": "If you would like to deploy using a custom BIG-IP image, provide the AMI Id.  **Note**: Unless specifically required, leave the default of **OPTIONAL**",
   "MaxLength": 255,
   "MinLength": 1,
   "Type": "String"
  },
  "declarationUrl": {
   "AllowedPattern": "^(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$|^none$",
   "Default": "none",
   "Description": "URL for the AS3 declaration JSON file to be deployed. Leave as **none** to deploy without a service configuration.",
   "Type": "String"
  },
  "environment": {
   "Default": "f5env",
   "Description": "Name of the Environment Tag",
   "Type": "String"
  },
  "group": {
   "Default": "f5group",
   "Description": "Name of the Group Tag",
   "Type": "String"
  },
  "imageName": {
   "AllowedValues": [
    "Good25Mbps",
    "Good200Mbps",
    "Good1000Mbps",
    "Good5000Mbps",
    "Good10000Mbps",
    "Good16vCPU",
    "Better25Mbps",
    "Better200Mbps",
    "Better1000Mbps",
    "Better5000Mbps",
    "Better10000Mbps",
    "Best25Mbps",
    "Best200Mbps",
    "Best1000Mbps",
    "Best5000Mbps",
    "Best10000Mbps",
    "AdvancedWaf25Mbps",
    "AdvancedWaf200Mbps",
    "PerAppVeAwaf25Mbps",
    "PerAppVeAwaf200Mbps",
    "PerAppVeLtm25Mbps",
    "PerAppVeLtm200Mbps"
   ],
   "ConstraintDescription": "Must be a valid F5 BIG-IP VE image type",
   "Default": "Best1000Mbps",
   "Description": "F5 BIG-IP Performance Type",
   "Type": "String"
  },
  "instanceType": {
   "AllowedValues": [
    "m5.xlarge",
    "m5.4xlarge",
    "m5.large",
    "m5.12xlarge",
    "m4.xlarge",
    "m4.large",
    "m4.4xlarge",
    "m4.2xlarge",
    "m4.16xlarge",
    "m4.10xlarge",
    "m3.xlarge",
    "m3.medium",
    "m3.large",
    "t3.large",
    "m3.2xlarge",
    "cc2.8xlarge",
    "c5.xlarge",
    "c5.large",
    "c5.4xlarge",
    "c5.9xlarge",
    "c4.xlarge",
    "c4.8xlarge",
    "c4.4xlarge",
    "c4.2xlarge",
    "c3.xlarge",
    "c3.8xlarge",
    "c3.4xlarge",
    "c3.2xlarge",
    "c5n.2xlarge",
    "c5n.4xlarge"
   ],
   "ConstraintDescription": "Must be a valid EC2 instance type for BIG-IP",
   "Default": "m5.xlarge",
   "Description": "Size of the F5 BIG-IP Virtual Instance",
   "Type": "String"
  },
  "managementSubnetAz1": {
   "ConstraintDescription": "The subnet ID must be within an existing VPC",
   "Description": "Management Subnet ID",
   "Type": "AWS::EC2::Subnet::Id"
  },
  "managementSubnetAz1Address": {
   "Default": "DYNAMIC",
   "Description": "Optional. If you want to assign a static IP address in the subnet, type it here.  Otherwise leave DYNAMIC and a dynamic address is assigned based on the subnet you specified.",
   "Type": "String"
  },
  "ntpServer": {
   "Default": "0.pool.ntp.org",
   "Description": "NTP server for this implementation",
   "Type": "String"
  },
  "owner": {
   "Default": "f5owner",
   "Description": "Name of the Owner Tag",
   "Type": "String"
  },
  "provisionPublicIP": {
   "AllowedValues": [
    "Yes",
    "No"
   ],
   "Default": "Yes",
   "Description": "Whether or not to provision Public IP Addresses for the BIG-IP Network Interfaces. By Default no Public IP addresses are provisioned.",
   "Type": "String"
  },
  "restrictedSrcAddress": {
   "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
   "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x.",
   "Description": " The IP address range used to SSH and access managment GUI on the EC2 instances",
   "MaxLength": "18",
   "MinLength": "9",
   "Type": "String"
  },
  "restrictedSrcAddressApp": {
   "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
   "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x.",
   "Description": " The IP address range that can be used to access web traffic (80/443) to the EC2 instances",
   "MaxLength": "18",
   "MinLength": "9",
   "Type": "String"
  },
  "sshKey": {
   "Description": "EC2 KeyPair to enable SSH access to the BIG-IP instance",
   "Type": "AWS::EC2::KeyPair::KeyName"
  },
  "subnet1Az1": {
   "ConstraintDescription": "The subnet ID must be within an existing VPC",
   "Description": "Public or External subnet",
   "Type": "AWS::EC2::Subnet::Id"
  },
  "subnet1Az1Address": {
   "Default": "DYNAMIC",
   "Description": "Optional. If you want to assign static IP address(es) in the subnet, type them here.  Separate multiple IP addresses with a comma (the first is the Primary IP address, all others are Secondary).  Otherwise leave DYNAMIC and a dynamic address is assigned based on the subnet you specified.",
   "Type": "String"
  },
  "subnet2Az1": {
   "ConstraintDescription": "The subnet ID must be within an existing VPC",
   "Description": "Private or Internal subnet ID",
   "Type": "AWS::EC2::Subnet::Id"
  },
  "subnet2Az1Address": {
   "Default": "DYNAMIC",
   "Description": "Optional. If you want to assign a static IP address in the subnet, type it here.  Otherwise leave DYNAMIC and a dynamic address is assigned based on the subnet you specified.",
   "Type": "String"
  },
  "timezone": {
   "Default": "UTC",
   "Description": "Enter the Olson timezone string from /usr/share/zoneinfo. The default is 'UTC'. See the TZ column here (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) for legal values. For example, 'US/Eastern'.",
   "Type": "String"
  }
 },
 "Resources": {
  "Bigip1Instance": {
   "Metadata": {
    "AWS::CloudFormation::Init": {
     "config": {
      "commands": {
       "000-disable-1nicautoconfig": {
        "command": "/usr/bin/setdb provision.1nicautoconfig disable"
       },
       "010-install-libs": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "mkdir -p /var/log/cloud/aws;",
           "nohup /config/installCloudLibs.sh",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "040-network-config": {
        "command": {
         "Fn::Join": [
          "",
          [
           "GATEWAY_MAC=`cat /config/cloud/net1_mac | awk '{print tolower($2)}'`\n",
           "sleep 30 && TOKEN=`/usr/bin/curl -sS --retry 20 -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 120'`\n",
           "GATEWAY_CIDR_BLOCK=`/usr/bin/curl -s -f --retry 20 -H 'X-aws-ec2-metadata-token: '$TOKEN'' http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC}/subnet-ipv4-cidr-block`; ",
           "GATEWAY_NET=${GATEWAY_CIDR_BLOCK%/*}; ",
           "GATEWAY_PREFIX=${GATEWAY_CIDR_BLOCK#*/}; ",
           "GATEWAY=`echo ${GATEWAY_NET} | awk -F. '{ print $1\".\"$2\".\"$3\".\"$4+1 }'`; ",
           "GATEWAY_MAC2=`cat /config/cloud/net2_mac | awk '{print tolower($2)}'`\n",
           "GATEWAY_CIDR_BLOCK2=`/usr/bin/curl -s -f --retry 20 -H 'X-aws-ec2-metadata-token: '$TOKEN'' http://169.254.169.254/latest/meta-data/network/interfaces/macs/${GATEWAY_MAC2}/subnet-ipv4-cidr-block`; ",
           "GATEWAY_PREFIX2=${GATEWAY_CIDR_BLOCK2#*/}; ",
           "nohup /config/waitThenRun.sh ",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/network.js ",
           "--host localhost ",
           "-o /var/log/cloud/aws/network.log ",
           "--log-level silly ",
           "--signal NETWORK_CONFIG_DONE ",
           "--vlan name:external,nic:1.1 ",
           "--default-gw ${GATEWAY} ",
           "--self-ip name:external-self,address:",
           {
            "Fn::If": [
             "useDynamicExternalIpAddr",
             {
              "Fn::GetAtt": [
               "Bigip1subnet1Az1Interface",
               "PrimaryPrivateIpAddress"
              ]
             },
             {
              "Fn::GetAtt": [
               "Bigip1Staticsubnet1Az1Interface",
               "PrimaryPrivateIpAddress"
              ]
             }
            ]
           },
           "/${GATEWAY_PREFIX},vlan:external ",
           "--vlan name:internal,nic:1.2 ",
           "--self-ip name:internal-self,address:",
           {
            "Fn::If": [
             "useDynamicInternalIpAddr",
             {
              "Fn::GetAtt": [
               "Bigip1InternalInterface",
               "PrimaryPrivateIpAddress"
              ]
             },
             {
              "Fn::GetAtt": [
               "Bigip1StaticInternalInterface",
               "PrimaryPrivateIpAddress"
              ]
             }
            ]
           },
           "/${GATEWAY_PREFIX2},vlan:internal ",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "050-onboard-BIG-IP": {
        "command": {
         "Fn::If": [
          "optin",
          {
           "Fn::Join": [
            " ",
            [
             "REGION=\"",
             {
              "Ref": "AWS::Region"
             },
             "\";",
             "DEPLOYMENTID=`echo \"",
             {
              "Ref": "AWS::StackId"
             },
             "\"|sha512sum|cut -d \" \" -f 1`;",
             "CUSTOMERID=`echo \"",
             {
              "Ref": "AWS::AccountId"
             },
             "\"|sha512sum|cut -d \" \" -f 1`;",
             "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth0`;",
             "nohup /config/waitThenRun.sh",
             "TOKEN=`/usr/bin/curl -sS --retry 20 -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 120'`;",
             "HOSTNAME=`/usr/bin/curl -sS --retry 20 -H 'X-aws-ec2-metadata-token: '$TOKEN'' http://169.254.169.254/latest/meta-data/hostname`;",
             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
             "--wait-for NETWORK_CONFIG_DONE",
             "--signal ONBOARD_DONE",
             "-o /var/log/cloud/aws/onboard.log",
             "--log-level silly",
             "--no-reboot",
             "--host localhost",
             "--hostname ${HOSTNAME}",
             "--ntp ",
             {
              "Ref": "ntpServer"
             },
             "--tz ",
             {
              "Ref": "timezone"
             },
             "--dns ${NAME_SERVER}",
             "--modules ",
             {
              "Ref": "bigIpModules"
             },
             "--metrics \"cloudName:aws,region:${REGION},bigIpVersion:16.1.3.2-0.0.4,customerId:${CUSTOMERID},deploymentId:${DEPLOYMENTID},templateName:f5-existing-stack-payg-3nic-bigip.template,templateVersion:6.2.0,licenseType:hourly\"",
             "-d tm.tcpudptxchecksum:software-only ",
             "--ping",
             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          },
          {
           "Fn::Join": [
            " ",
            [
             "NAME_SERVER=`/config/cloud/aws/getNameServer.sh eth0`;",
             "nohup /config/waitThenRun.sh",
             "TOKEN=`/usr/bin/curl -sS --retry 20 -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 120'`;",
             "HOSTNAME=`/usr/bin/curl -sS --retry 20 -H 'X-aws-ec2-metadata-token: '$TOKEN'' http://169.254.169.254/latest/meta-data/hostname`;",
             "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/onboard.js",
             "--wait-for NETWORK_CONFIG_DONE",
             "--signal ONBOARD_DONE",
             "-o /var/log/cloud/aws/onboard.log",
             "--log-level silly",
             "--no-reboot",
             "--host localhost",
             "--hostname ${HOSTNAME}",
             "--ntp ",
             {
              "Ref": "ntpServer"
             },
             "--tz ",
             {
              "Ref": "timezone"
             },
             "--dns ${NAME_SERVER}",
             "--modules ",
             {
              "Ref": "bigIpModules"
             },
             "-d tm.tcpudptxchecksum:software-only ",
             "--ping",
             "&>> /var/log/cloud/aws/install.log < /dev/null &"
            ]
           ]
          }
         ]
        }
       },
       "055-custom-config": {
        "command": {
         "Fn::Join": [
          " ",
          [
           "nohup /config/waitThenRun.sh",
           "f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/runScript.js",
           "--file /config/cloud/aws/custom-config.sh",
           "--cwd /config/cloud/aws",
           "-o /var/log/cloud/aws/custom-config.log",
           "--log-level silly",
           "--wait-for ONBOARD_DONE",
           "--signal CUSTOM_CONFIG_DONE",
           "&>> /var/log/cloud/aws/install.log < /dev/null &"
          ]
         ]
        }
       },
       "060-cluster": {
        "command": {
         "Fn::Join": [
          " ",
          []
         ]
        }
       },
       "065-cfe": {
        "command": {
         "Fn::Join": [
          " ",
          []
         ]
        }
       }
      },
      "files": {
       "/config/cloud/aws/custom-config.sh": {
        "content": {
         "Fn::Join": [
          "",
          [
           "#!/bin/bash\n",
           "TOKEN=`/usr/bin/curl -sS --retry 20 -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 120'`\n",
           "PROGNAME=$(basename $0)\n",
           "function error_exit {\n",
           "echo \"${PROGNAME}: ${1:-\\\"Unknown Error\\\"}\" 1>&2\n",
           "exit 1\n",
           "}\n",
           "declare -a tmsh=()\n",
           "echo 'starting custom-config.sh'\n",
           "source /config/cloud/aws/onboard_config_vars\n",
           "if [[ $allowPhoneHome == \"No\" ]]; then\n",
           "    tmsh+=(\n",
           "    \"tmsh modify sys software update auto-phonehome disabled\")\n",
           "fi\n",
           "tmsh+=(\n",
           "\"tmsh save /sys config\")\n",
           "for CMD in \"${tmsh[@]}\"\n",
           "do\n",
           "  \"/config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/waitForMcp.sh\"\n",
           "    if $CMD;then\n",
           "        echo \"command $CMD successfully executed.\"\n",
           "    else\n",
           "        error_exit \"$LINENO: An error has occurred while executing $CMD. Aborting!\"\n",
           "    fi\n",
           "done\n",
           "date\n",
           "### START CUSTOM CONFIGURATION\n",
           "deployed=\"no\"\n",
           "url_regex=\"(http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$\"\n",
           "file_loc=\"/config/cloud/custom_config\"\n",
           "if [[ $declarationUrl =~ $url_regex ]]; then\n",
           "  response_code=$(/usr/bin/curl -sk -w \"%{http_code}\" $declarationUrl -o $file_loc)\n",
           "  if [[ $response_code == 200 ]]; then\n",
           "    echo \"Custom config download complete; checking for valid JSON.\"\n",
           "    cat $file_loc | jq .class\n",
           "    if [[ $? == 0 ]]; then\n",
           "      response_code=$(/usr/bin/curl -svvu admin: -w \"%{http_code}\" -X POST -H \"Content-Type: application/json\" -H \"Expect:\" http://localhost:8100/mgmt/shared/appsvcs/declare -d @$file_loc -o /dev/null)\n",
           "      if [[ $response_code == 200 || $response_code == 502 ]]; then\n",
           "        echo \"Deployment of custom application succeeded.\"\n",
           "        deployed=\"yes\"\n",
           "      else\n",
           "         echo \"Failed to deploy custom application; continuing...\"\n",
           "      fi\n",
           "    else\n",
           "      echo \"Custom config was not valid JSON, continuing...\"\n",
           "    fi\n",
           "  else\n",
           "    echo \"Failed to download custom config; continuing...\"\n",
           "  fi\n",
           "else\n",
           "  echo \"Custom config was not a URL, continuing...\"\n",
           "fi\n",
           "### END CUSTOM CONFIGURATION"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/getNameServer.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "INTERFACE=$1",
           "INTERFACE_MAC=`ifconfig ${INTERFACE} | egrep ether | awk '{print tolower($2)}'`",
           "TOKEN=`/usr/bin/curl -sS --retry 20 -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 120'`",
           "VPC_CIDR_BLOCK=`/usr/bin/curl -s -f --retry 20 -H 'X-aws-ec2-metadata-token: '$TOKEN'' http://169.254.169.254/latest/meta-data/network/interfaces/macs/${INTERFACE_MAC}/vpc-ipv4-cidr-block`",
           "VPC_NET=${VPC_CIDR_BLOCK%/*}",
           "NAME_SERVER=`echo ${VPC_NET} | awk -F. '{ printf \"%d.%d.%d.%d\", $1, $2, $3, $4+2 }'`",
           "echo $NAME_SERVER"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/aws/onboard_config_vars": {
        "content": {
         "Fn::Join": [
          "",
          [
           "",
           "#!/bin/bash\n",
           "# Generated from 6.2.0\n",
           "TOKEN=`/usr/bin/curl -sS --retry 20 -X PUT 'http://169.254.169.254/latest/api/token' -H 'X-aws-ec2-metadata-token-ttl-seconds: 120'`\n",
           "HOSTNAME=`/usr/bin/curl -sS --retry 20 -H 'X-aws-ec2-metadata-token: '$TOKEN'' http://169.254.169.254/latest/meta-data/hostname`\n",
           "region='",
           {
            "Ref": "AWS::Region"
           },
           "'\n",
           "adminUsername='srv_user'\n",
           "timezone='",
           {
            "Ref": "timezone"
           },
           "'\n",
           "ntpServer='",
           {
            "Ref": "ntpServer"
           },
           "'\n",
           "declarationUrl='",
           {
            "Ref": "declarationUrl"
           },
           "'\n",
           "allowPhoneHome='",
           {
            "Ref": "allowPhoneHome"
           },
           "'\n",
           "passwd=$(f5-rest-node /config/cloud/aws/node_modules/@f5devcentral/f5-cloud-libs/scripts/decryptDataFromFile.js --data-file /config/cloud/aws/.adminPassword)\n",
           "managementGuiPort='443'\n"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/cloud/f5-cloud-libs-aws.tar.gz": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "http://cdn.f5.com/product/cloudsolutions/f5-cloud-libs-aws/v2.10.1/f5-cloud-libs-aws.tar.gz"
       },
       "/config/cloud/f5-cloud-libs.tar.gz": {
        "group": "root",
        "mode": "000755",
        "owner": "root",
        "source": "http://cdn.f5.com/product/cloudsolutions/f5-cloud-libs/v4.27.1/f5-cloud-libs.tar.gz"
       },
       "/config/installCloudLibs.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "#!/bin/bash",
           "echo about to execute",
           "checks=0",
           "while [ $checks -lt 120 ]; do echo checking mcpd",
           "    tmsh -a show sys mcp-state field-fmt | grep -q running",
           "    if [ $? == 0 ]; then",
           "        echo mcpd ready",
           "        break",
           "    fi",
           "    echo mcpd not ready yet",
           "    let checks=checks+1",
           "    sleep 10",
           "done",
           "echo loading verifyHash script",
           "if ! tmsh load sys config merge file /config/verifyHash; then",
           "    echo cannot validate signature of /config/verifyHash",
           "    exit",
           "fi",
           "echo loaded verifyHash",
           "declare -a filesToVerify=(\"/config/cloud/f5-cloud-libs.tar.gz\" \"/config/cloud/f5-cloud-libs-aws.tar.gz\")",
           "for fileToVerify in \"${filesToVerify[@]}\"",
           "do",
           "    echo verifying \"$fileToVerify\"",
           "    if ! tmsh run cli script verifyHash \"$fileToVerify\"; then",
           "        echo \"$fileToVerify\" is not valid",
           "        exit 1",
           "    fi",
           "    echo verified \"$fileToVerify\"",
           "done",
           "mkdir -p /config/cloud/aws/node_modules/@f5devcentral",
           "echo expanding f5-cloud-libs.tar.gz",
           "tar xvfz /config/cloud/f5-cloud-libs.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
           "echo installing dependencies",
           "tar xvfz /config/cloud/f5-cloud-libs-aws.tar.gz -C /config/cloud/aws/node_modules/@f5devcentral",
           "echo cloud libs install complete",
           "touch /config/cloud/cloudLibsReady"
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/verifyHash": {
        "content": "cli script /Common/verifyHash {\nproc script::run {} {\n        if {[catch {\n            set hashes(f5-cloud-libs.tar.gz) 32dbb0e602b8a9dc8b492e52dcd61b47ba62f4f70cdb2c6162694b8b6bdde6f2684d0747878a89e966dff78dbec02d98b682aa108cba5b024195561189c61c06\n            set hashes(f5-cloud-libs-aws.tar.gz) c2eadf04a910e28a52c21e1b9af9015b5a4e5a50501bc0dfbd354d03d08d5a82fe8c0326dd4138b835ff88fc17232e957b8f2d3fb031ed1809fd3d0b973afe09\n            set hashes(f5-cloud-libs-azure.tar.gz) 703bae0e774114b16528ca71bb2109db5f36623f8b8698588348677862ffa48559ba9698001d2f245860059a4fec588a15ee924317b967bf338cca66b0de6936\n            set hashes(f5-cloud-libs-gce.tar.gz) fd16ab827b3089e76d5c77c713a2eabe685707dba7207cfdf2778db2e96281fc8e3e4424fb20f584c44cb9722b4fbf352e7c364de5fed61a74bd138f974705b2\n            set hashes(f5-cloud-libs-openstack.tar.gz) 5c83fe6a93a6fceb5a2e8437b5ed8cc9faf4c1621bfc9e6a0779f6c2137b45eab8ae0e7ed745c8cf821b9371245ca29749ca0b7e5663949d77496b8728f4b0f9\n            set hashes(f5-cloud-libs-consul.tar.gz) a32aab397073df92cbbba5067e5823e9b5fafca862a258b60b6b40aa0975c3989d1e110f706177b2ffbe4dde65305a260a5856594ce7ad4ef0c47b694ae4a513\n            set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0\n            set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034\n            set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe\n            set hashes(f5.http.v1.2.0rc7.tmpl) 21f413342e9a7a281a0f0e1301e745aa86af21a697d2e6fdc21dd279734936631e92f34bf1c2d2504c201f56ccd75c5c13baa2fe7653213689ec3c9e27dff77d\n            set hashes(f5.aws_advanced_ha.v1.3.0rc1.tmpl) 9e55149c010c1d395abdae3c3d2cb83ec13d31ed39424695e88680cf3ed5a013d626b326711d3d40ef2df46b72d414b4cb8e4f445ea0738dcbd25c4c843ac39d\n            set hashes(f5.aws_advanced_ha.v1.4.0rc1.tmpl) de068455257412a949f1eadccaee8506347e04fd69bfb645001b76f200127668e4a06be2bbb94e10fefc215cfc3665b07945e6d733cbe1a4fa1b88e881590396\n            set hashes(f5.aws_advanced_ha.v1.4.0rc2.tmpl) 6ab0bffc426df7d31913f9a474b1a07860435e366b07d77b32064acfb2952c1f207beaed77013a15e44d80d74f3253e7cf9fbbe12a90ec7128de6facd097d68f\n            set hashes(f5.aws_advanced_ha.v1.4.0rc3.tmpl) 2f2339b4bc3a23c9cfd42aae2a6de39ba0658366f25985de2ea53410a745f0f18eedc491b20f4a8dba8db48970096e2efdca7b8efffa1a83a78e5aadf218b134\n            set hashes(f5.aws_advanced_ha.v1.4.0rc4.tmpl) 2418ac8b1f1884c5c096cbac6a94d4059aaaf05927a6a4508fd1f25b8cc6077498839fbdda8176d2cf2d274a27e6a1dae2a1e3a0a9991bc65fc74fc0d02ce963\n            set hashes(f5.aws_advanced_ha.v1.4.0rc5.tmpl) 5e582187ae1a6323e095d41eddd41151d6bd38eb83c634410d4527a3d0e246a8fc62685ab0849de2ade62b0275f51264d2deaccbc16b773417f847a4a1ea9bc4\n            set hashes(asm-policy.tar.gz) 2d39ec60d006d05d8a1567a1d8aae722419e8b062ad77d6d9a31652971e5e67bc4043d81671ba2a8b12dd229ea46d205144f75374ed4cae58cefa8f9ab6533e6\n            set hashes(deploy_waf.sh) 1a3a3c6274ab08a7dc2cb73aedc8d2b2a23cd9e0eb06a2e1534b3632f250f1d897056f219d5b35d3eed1207026e89989f754840fd92969c515ae4d829214fb74\n            set hashes(f5.policy_creator.tmpl) 06539e08d115efafe55aa507ecb4e443e83bdb1f5825a9514954ef6ca56d240ed00c7b5d67bd8f67b815ee9dd46451984701d058c89dae2434c89715d375a620\n            set hashes(f5.service_discovery.tmpl) 4811a95372d1dbdbb4f62f8bcc48d4bc919fa492cda012c81e3a2fe63d7966cc36ba8677ed049a814a930473234f300d3f8bced2b0db63176d52ac99640ce81b\n            set hashes(f5.cloud_logger.v1.0.0.tmpl) 64a0ed3b5e32a037ba4e71d460385fe8b5e1aecc27dc0e8514b511863952e419a89f4a2a43326abb543bba9bc34376afa114ceda950d2c3bd08dab735ff5ad20\n            set hashes(f5-appsvcs-3.5.1-5.noarch.rpm) ba71c6e1c52d0c7077cdb25a58709b8fb7c37b34418a8338bbf67668339676d208c1a4fef4e5470c152aac84020b4ccb8074ce387de24be339711256c0fa78c8\n            set hashes(f5-appsvcs-3.18.0-4.noarch.rpm) e72ee8005a27070ac399ab097e8aa507a72aae4721d7491589cfeb821db3ef86cbc979e796ab319ec727bb51400ccda813c4b9eb4a6b3d1220a396b582f8f400\n            set hashes(f5-appsvcs-3.20.0-3.noarch.rpm) d4bba8892a2068bb53f88c6090dc65f17707abca35a7ed2fff39980057fe7f7a2ebf710ab2284a1d83d70b7746beabad9df603017c0fd8728f7457661c95ac8d\n            set hashes(f5-appsvcs-3.25.0-3.noarch.rpm) 26f19bdaaa81cbe0421b3e08c09987f9dd0c54b05a626d6a21a836b34248d2d9d83095f0daad8e7a4a068e9ef99b89fbcd246ae8b617ac2b2456599157d0e8b3\n            set hashes(f5-appsvcs-3.26.1-1.noarch.rpm) b460e11679d38a96549b5041def27b419f1a41c8f788f9f8c7a034aa5cb5a8c9fd151c7c439bebd093fcd85cd8657f1c064551d9337566f9fc7e9506c55dc02c\n            set hashes(f5-appsvcs-3.31.0-6.noarch.rpm) 6506fde5d1c2e067662b513387dccda0281d3bbc604fc6dcf8e5740ae563748899f7f335e349006fe3f0e751cd70d4ef8be3701ae45dca305de649f259f090a9\n            set hashes(f5-cloud-failover-1.1.0-0.noarch.rpm) 15a440c299f9e4af86a3d0f5b0d75b0054385b95e47c3ef116d2e0bfb0041a26dcbf549028e2a26d2c718ec61446bd657be38fbbcd9db781efe5414c174ac68c\n            set hashes(f5-cloud-failover-1.3.0-0.noarch.rpm) 19681eb33d9f910c913f8180199485eb653b4b5ebeaae0b90a6ce8341d7a22fed8d21815b5ba148c468852d20cc26fad4c4242e50ecc184f1f8770dacced6f6a\n            set hashes(f5-cloud-failover-1.4.0-0.noarch.rpm) 49e9108a070e0c8713aeb7b330662358542e61b7c53a9d45108d37a9bf5246f9e4aaae10cc61064801dcccd20bfd5108347b0f694510e7ece07f96c45ba683b0\n            set hashes(f5-cloud-failover-1.5.0-0.noarch.rpm) 33a7e2d047106bcce681757a65240bfacedd48e13567e05fdb23a4b269d266aa5001f81158c3964dc297f0428db31c9df428002898d190285b349c59422a573b\n            set hashes(f5-cloud-failover-1.6.1-1.noarch.rpm) c1b842da21b8d1ba21b6eb63c8598a9ea9986d5daddc21e4d280e1d6b09d3db1de8ac7de5c84edf07b43e4af03daf8fe747a4048f6573d955206352cde2cec65\n            set hashes(f5-cloud-failover-1.7.1-1.noarch.rpm) 14ff0cd2bb49780cc0ae3021c4fc8fcc096e3fce2258096a4aa026d6d37de728ca7345bfe3a79031e336e74d25a2b40ff28324c2c752bf0ee71b7fc89b6fc8fe\n            set hashes(f5-cloud-failover-1.8.0-0.noarch.rpm) 23086d1cbf3cb24eac7eba2305156c600fa21f1b896321a2fa5225d331d7e41471edb3f5368144d86848a4520b1e005c014485ff451e7da6429053f58bfe8ce4\n            set hashes(f5-cloud-failover-1.9.0-0.noarch.rpm) 09c15377389ac18313370635fb99f9aff05970807cc60bff074f80f664023cfc0d9f5b7f2ed7a8f879deb2da84a034bb9fa9f4e95f9806d644af518db32f1425\n\n            set file_path [lindex $tmsh::argv 1]\n            set file_name [file tail $file_path]\n\n            if {![info exists hashes($file_name)]} {\n                tmsh::log err \"No hash found for $file_name\"\n                exit 1\n            }\n\n            set expected_hash $hashes($file_name)\n            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]\n            if { $expected_hash eq $computed_hash } {\n                exit 0\n            }\n            tmsh::log err \"Hash does not match for $file_path\"\n            exit 1\n        }]} {\n            tmsh::log err {Unexpected error in verifyHash}\n            exit 1\n        }\n    }\n    script-signature X7djuj51rcPDqOQfTUMmV6Qg8gSjD4UnhrHAMkP0oFDTSDigD+s49RMbK05inVzbq+wqjWC2Rlsz1bfreGy35DzIBQo0k8hCOr2JNXAOXOp45LfVgqq+c1NgjsHo54ogvHRixLxo2wo3QBX9SJzktr3zgj6BTHoU95R76497hmaeJ96EYz+3d78tO64ORbtzizlMV9xfBFYzgW0SPT644Rer65DstCMbQcDNqHv71BnKfshfu5Ta2qXUmn8ZNBOdcdSOng+E05/rURDEFU7NJ0j7mkn3UbY8F9WNKkyL+098FitD/l+gD3VpFaFwFKIOvorz8fWfWT+u4GQF3MvRdg==\n    signing-key /Common/f5-irule\n}",
        "group": "root",
        "mode": "000755",
        "owner": "root"
       },
       "/config/waitThenRun.sh": {
        "content": {
         "Fn::Join": [
          "\n",
          [
           "#!/bin/bash",
           "while true; do echo \"waiting for cloud libs install to complete\"",
           "    if [ -f /config/cloud/cloudLibsReady ]; then",
           "        break",
           "    else",
           "        sleep 10",
           "    fi",
           "done",
           "\"$@\""
          ]
         ]
        },
        "group": "root",
        "mode": "000755",
        "owner": "root"
       }
      }
     }
    }
   },
   "Properties": {
    "BlockDeviceMappings": [
     {
      "DeviceName": "/dev/xvda",
      "Ebs": {
       "DeleteOnTermination": true,
       "VolumeSize": 100,
       "VolumeType": "gp2"
      }
     },
     {
      "DeviceName": "/dev/xvdb",
      "NoDevice": {}
     }
    ],
    "IamInstanceProfile": {
     "Ref": "bigipServiceDiscoveryProfile"
    },
    "ImageId": {
     "Fn::If": [
      "noCustomImageId",
      {
       "Fn::FindInMap": [
        "BigipRegionMap",
        {
         "Ref": "AWS::Region"
        },
        {
         "Ref": "imageName"
        }
       ]
      },
      {
       "Ref": "customImageId"
      }
     ]
    },
    "InstanceType": {
     "Ref": "instanceType"
    },
    "KeyName": {
     "Ref": "sshKey"
    },
    "NetworkInterfaces": [
     {
      "Description": "Management Interface",
      "DeviceIndex": "0",
      "NetworkInterfaceId": {
       "Fn::If": [
        "useDynamicManagementIpAddr",
        {
         "Ref": "Bigip1ManagementInterface"
        },
        {
         "Ref": "Bigip1StaticManagementInterface"
        }
       ]
      }
     },
     {
      "Description": "Public or External Interface",
      "DeviceIndex": "1",
      "NetworkInterfaceId": {
       "Fn::If": [
        "useDynamicExternalIpAddr",
        {
         "Ref": "Bigip1subnet1Az1Interface"
        },
        {
         "Ref": "Bigip1Staticsubnet1Az1Interface"
        }
       ]
      }
     },
     {
      "Description": "Private or Internal Interface",
      "DeviceIndex": "2",
      "NetworkInterfaceId": {
       "Fn::If": [
        "useDynamicInternalIpAddr",
        {
         "Ref": "Bigip1InternalInterface"
        },
        {
         "Ref": "Bigip1StaticInternalInterface"
        }
       ]
      }
     }
    ],
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "application"
      }
     },
     {
      "Key": "Costcenter",
      "Value": {
       "Ref": "costcenter"
      }
     },
     {
      "Key": "Environment",
      "Value": {
       "Ref": "environment"
      }
     },
     {
      "Key": "Group",
      "Value": {
       "Ref": "group"
      }
     },
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "Big-IP: ",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     },
     {
      "Key": "Owner",
      "Value": {
       "Ref": "owner"
      }
     }
    ],
    "UserData": {
     "Fn::Base64": {
      "Fn::Join": [
       "",
       [
        "#!/bin/bash\n",
        "mkdir -p /var/log/cloud /config/cloud /var/config/rest/downloads\n",
        "/usr/bin/setdb provision.extramb 1000\n",
        "/usr/bin/setdb restjavad.useextramb true\n",
        "cat << EOF >> /config/cloud/runtime-init-config.yaml\n",
        "controls:\n",
        "  logLevel: info\n",
        "  logFilename: /var/log/cloud/bigIpRuntimeInit.log\n",
        "pre_onboard_enabled:\n",
        "  - name: get_ifconfig\n",
        "    type: inline\n",
        "    commands:\n",
        "      - ifconfig eth1 | grep ether > /config/cloud/net1_mac || exit 0\n",
        "      - ifconfig eth2 | grep ether > /config/cloud/net2_mac || exit 0\n",
        "      - ifconfig eth3 | grep ether > /config/cloud/net3_mac || exit 0\n",
        "      - ifconfig eth4 | grep ether > /config/cloud/net4_mac || exit 0\n",
        "      - ifconfig eth5 | grep ether > /config/cloud/net5_mac || exit 0\n",
        "      - ifconfig eth6 | grep ether > /config/cloud/net6_mac || exit 0\n",
        "      - ifconfig eth7 | grep ether > /config/cloud/net7_mac || exit 0\n",
        "extension_packages:\n",
        "  install_operations:\n",
        "    - extensionType: as3\n",
        "      extensionVersion: 3.40.0\n",
        "      extensionHash: 708533815cb8e608b4d28fbb730f0ed34617ce5def53c5462c0ab98bd54730fc\n",
        "EOF\n",
        "/usr/bin/curl -fv --retry 1 --connect-timeout 5 -L http://cdn.f5.com/product/cloudsolutions/f5-bigip-runtime-init/v1.5.1/dist/f5-bigip-runtime-init-1.5.1-1.gz.run -o /var/config/rest/downloads/f5-bigip-runtime-init-1.5.1-1.gz.run\n",
        "bash /var/config/rest/downloads/f5-bigip-runtime-init-1.5.1-1.gz.run -- '--cloud aws'\n",
        "f5-bigip-runtime-init --config-file /config/cloud/runtime-init-config.yaml --skip-telemetry\n",
        "/opt/aws/apitools/cfn-init/bin/cfn-init -v -s ",
        {
         "Ref": "AWS::StackId"
        },
        " -r ",
        "Bigip1Instance",
        " --region ",
        {
         "Ref": "AWS::Region"
        },
        "\n"
       ]
      ]
     }
    }
   },
   "Type": "AWS::EC2::Instance"
  },
  "Bigip1InternalInterface": {
   "Condition": "useDynamicInternalIpAddr",
   "Properties": {
    "Description": "Internal Interface for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipInternalSecurityGroup"
     }
    ],
    "SubnetId": {
     "Ref": "subnet2Az1"
    }
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip1ManagementEipAddress": {
   "Condition": "usePublicIP",
   "Properties": {
    "Domain": "vpc"
   },
   "Type": "AWS::EC2::EIP"
  },
  "Bigip1ManagementEipAssociation": {
   "Condition": "usePublicIP",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "Bigip1ManagementEipAddress",
      "AllocationId"
     ]
    },
    "NetworkInterfaceId": {
     "Fn::If": [
      "useDynamicManagementIpAddr",
      {
       "Ref": "Bigip1ManagementInterface"
      },
      {
       "Ref": "Bigip1StaticManagementInterface"
      }
     ]
    }
   },
   "Type": "AWS::EC2::EIPAssociation"
  },
  "Bigip1ManagementInterface": {
   "Condition": "useDynamicManagementIpAddr",
   "Properties": {
    "Description": "Management Interface for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipManagementSecurityGroup"
     }
    ],
    "SubnetId": {
     "Ref": "managementSubnetAz1"
    }
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip1StaticInternalInterface": {
   "Condition": "useStaticInternalIpAddr",
   "Properties": {
    "Description": "Internal Interface for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipInternalSecurityGroup"
     }
    ],
    "PrivateIpAddress": {
     "Ref": "subnet2Az1Address"
    },
    "SubnetId": {
     "Ref": "subnet2Az1"
    }
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip1StaticManagementInterface": {
   "Condition": "useStaticManagementIpAddr",
   "Properties": {
    "Description": "Management Interface for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipManagementSecurityGroup"
     }
    ],
    "PrivateIpAddress": {
     "Ref": "managementSubnetAz1Address"
    },
    "SubnetId": {
     "Ref": "managementSubnetAz1"
    }
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip1Staticsubnet1Az1Interface": {
   "Condition": "useStaticExternalIpAddr",
   "Properties": {
    "Description": "Public External Interface for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipExternalSecurityGroup"
     }
    ],
    "PrivateIpAddresses": [
     {
      "Primary": true,
      "PrivateIpAddress": {
       "Fn::Select": [
        "0",
        {
         "Fn::Split": [
          ",",
          {
           "Ref": "subnet1Az1Address"
          }
         ]
        }
       ]
      }
     },
     {
      "Primary": false,
      "PrivateIpAddress": {
       "Fn::Select": [
        "1",
        {
         "Fn::Split": [
          ",",
          {
           "Ref": "subnet1Az1Address"
          }
         ]
        }
       ]
      }
     }
    ],
    "SubnetId": {
     "Ref": "subnet1Az1"
    }
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip1VipEipAddress": {
   "Condition": "usePublicIP",
   "Properties": {
    "Domain": "vpc"
   },
   "Type": "AWS::EC2::EIP"
  },
  "Bigip1VipEipAssociation": {
   "Condition": "usePublicIP",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "Bigip1VipEipAddress",
      "AllocationId"
     ]
    },
    "NetworkInterfaceId": {
     "Fn::If": [
      "useDynamicExternalIpAddr",
      {
       "Ref": "Bigip1subnet1Az1Interface"
      },
      {
       "Ref": "Bigip1Staticsubnet1Az1Interface"
      }
     ]
    },
    "PrivateIpAddress": {
     "Fn::If": [
      "useDynamicExternalIpAddr",
      {
       "Fn::Select": [
        "0",
        {
         "Fn::GetAtt": [
          "Bigip1subnet1Az1Interface",
          "SecondaryPrivateIpAddresses"
         ]
        }
       ]
      },
      {
       "Fn::Select": [
        "0",
        {
         "Fn::GetAtt": [
          "Bigip1Staticsubnet1Az1Interface",
          "SecondaryPrivateIpAddresses"
         ]
        }
       ]
      }
     ]
    }
   },
   "Type": "AWS::EC2::EIPAssociation"
  },
  "Bigip1subnet1Az1Interface": {
   "Condition": "useDynamicExternalIpAddr",
   "Properties": {
    "Description": "Public External Interface for the BIG-IP",
    "GroupSet": [
     {
      "Ref": "bigipExternalSecurityGroup"
     }
    ],
    "SecondaryPrivateIpAddressCount": 1,
    "SubnetId": {
     "Ref": "subnet1Az1"
    }
   },
   "Type": "AWS::EC2::NetworkInterface"
  },
  "Bigip1subnet1Az1SelfEipAddress": {
   "Condition": "usePublicIP",
   "Properties": {
    "Domain": "vpc"
   },
   "Type": "AWS::EC2::EIP"
  },
  "Bigip1subnet1Az1SelfEipAssociation": {
   "Condition": "usePublicIP",
   "Properties": {
    "AllocationId": {
     "Fn::GetAtt": [
      "Bigip1subnet1Az1SelfEipAddress",
      "AllocationId"
     ]
    },
    "NetworkInterfaceId": {
     "Fn::If": [
      "useDynamicExternalIpAddr",
      {
       "Ref": "Bigip1subnet1Az1Interface"
      },
      {
       "Ref": "Bigip1Staticsubnet1Az1Interface"
      }
     ]
    },
    "PrivateIpAddress": {
     "Fn::If": [
      "useDynamicExternalIpAddr",
      {
       "Fn::GetAtt": [
        "Bigip1subnet1Az1Interface",
        "PrimaryPrivateIpAddress"
       ]
      },
      {
       "Fn::GetAtt": [
        "Bigip1Staticsubnet1Az1Interface",
        "PrimaryPrivateIpAddress"
       ]
      }
     ]
    }
   },
   "Type": "AWS::EC2::EIPAssociation"
  },
  "bigipExternalSecurityGroup": {
   "Properties": {
    "GroupDescription": "Public or external interface rules",
    "SecurityGroupIngress": [
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddressApp"
      },
      "FromPort": 80,
      "IpProtocol": "tcp",
      "ToPort": 80
     },
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddressApp"
      },
      "FromPort": 443,
      "IpProtocol": "tcp",
      "ToPort": 443
     }
    ],
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "application"
      }
     },
     {
      "Key": "Costcenter",
      "Value": {
       "Ref": "costcenter"
      }
     },
     {
      "Key": "Environment",
      "Value": {
       "Ref": "environment"
      }
     },
     {
      "Key": "Group",
      "Value": {
       "Ref": "group"
      }
     },
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "Bigip External Security Group:",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     },
     {
      "Key": "Owner",
      "Value": {
       "Ref": "owner"
      }
     }
    ],
    "VpcId": {
     "Ref": "Vpc"
    }
   },
   "Type": "AWS::EC2::SecurityGroup"
  },
  "bigipInternalSecurityGroup": {
   "Properties": {
    "GroupDescription": "Allow All from Intra-VPC only",
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "application"
      }
     },
     {
      "Key": "Costcenter",
      "Value": {
       "Ref": "costcenter"
      }
     },
     {
      "Key": "Environment",
      "Value": {
       "Ref": "environment"
      }
     },
     {
      "Key": "Group",
      "Value": {
       "Ref": "group"
      }
     },
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "Bigip Internal Security Group:",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     },
     {
      "Key": "Owner",
      "Value": {
       "Ref": "owner"
      }
     }
    ],
    "VpcId": {
     "Ref": "Vpc"
    }
   },
   "Type": "AWS::EC2::SecurityGroup"
  },
  "bigipManagementSecurityGroup": {
   "Properties": {
    "GroupDescription": "BIG-IP management interface policy",
    "SecurityGroupIngress": [
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddress"
      },
      "FromPort": 22,
      "IpProtocol": "tcp",
      "ToPort": 22
     },
     {
      "CidrIp": {
       "Ref": "restrictedSrcAddress"
      },
      "FromPort": 443,
      "IpProtocol": "tcp",
      "ToPort": 443
     }
    ],
    "Tags": [
     {
      "Key": "Application",
      "Value": {
       "Ref": "application"
      }
     },
     {
      "Key": "Costcenter",
      "Value": {
       "Ref": "costcenter"
      }
     },
     {
      "Key": "Environment",
      "Value": {
       "Ref": "environment"
      }
     },
     {
      "Key": "Group",
      "Value": {
       "Ref": "group"
      }
     },
     {
      "Key": "Name",
      "Value": {
       "Fn::Join": [
        "",
        [
         "Bigip Management Security Group:",
         {
          "Ref": "AWS::StackName"
         }
        ]
       ]
      }
     },
     {
      "Key": "Owner",
      "Value": {
       "Ref": "owner"
      }
     }
    ],
    "VpcId": {
     "Ref": "Vpc"
    }
   },
   "Type": "AWS::EC2::SecurityGroup"
  },
  "bigipServiceDiscoveryAccessRole": {
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "ec2.amazonaws.com"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Path": "/",
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "ec2:DescribeInstances",
          "ec2:DescribeInstanceStatus",
          "ec2:DescribeAddresses",
          "ec2:AssociateAddress",
          "ec2:DisassociateAddress",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DescribeNetworkInterfaceAttribute",
          "ec2:DescribeRouteTables",
          "ec2:DescribeSubnets",
          "ec2:AssignPrivateIpAddresses"
         ],
         "Effect": "Allow",
         "Resource": [
          "*"
         ]
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "BigipServiceDiscoveryPolicy"
     }
    ]
   },
   "Type": "AWS::IAM::Role"
  },
  "bigipServiceDiscoveryProfile": {
   "Properties": {
    "Path": "/",
    "Roles": [
     {
      "Ref": "bigipServiceDiscoveryAccessRole"
     }
    ]
   },
   "Type": "AWS::IAM::InstanceProfile"
  }
 }
}
